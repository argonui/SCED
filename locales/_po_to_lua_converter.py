# This scripts converts the .po files into a Lua table and
# stores it in the specified file to include it in the TTS mod.
import os
import polib

# This script assumes it is located inside the 'locales' folder.
# It will navigate up one directory and then into 'src/Global/'.
OUTPUT_LUA_FILE = os.path.join("..", "src", "Global", "i18nData.ttslua")


def to_lua_string(s):
    """Escapes a Python string to be a valid Lua string literal."""
    return '"' + s.replace("\\", "\\\\").replace('"', '\\"').replace("\n", "\\n") + '"'


def convert_po_to_lua():
    """
    Reads all .po files from the directory where the script is located,
    converts them into a nested Python dictionary, and then writes that
    dictionary out as a formatted Lua table to the specified output path.
    """
    # This dictionary will store all translations in the structure of your Lua table.
    # Example: {'OP_HEADER': {'en': 'Options', 'de': 'Optionen'}}
    i18n_data = {}

    # Get the absolute path of the directory containing this script.
    # This makes the script runnable from any location.
    script_dir = os.path.dirname(os.path.abspath(__file__))

    print(f"Reading .po files from script directory: '{script_dir}'")

    # Iterate over all files in the script's directory.
    for filename in os.listdir(script_dir):
        if filename.endswith(".po"):
            filepath = os.path.join(script_dir, filename)
            try:
                po_file = polib.pofile(filepath, encoding="utf-8")

                # Determine the language code.
                # It first checks the 'Language' metadata field in the .po file.
                # If not found, it falls back to using the filename (e.g., 'de.po' -> 'de').
                lang_code = po_file.metadata.get("Language")
                if not lang_code:
                    lang_code = os.path.splitext(filename)[0]
                    print(
                        f"> Warning: 'Language' metadata not set in '{filename}'. Falling back to filename for language code: '{lang_code}'"
                    )

                print(f"> Processing '{filename}' for language: '{lang_code}'...")

                # Process each translated entry in the .po file.
                for entry in po_file.translated_entries():
                    msgid = entry.msgid
                    msgstr = entry.msgstr

                    # If the key (msgid) is not yet in our main dictionary, add it.
                    if msgid not in i18n_data:
                        i18n_data[msgid] = {}

                    # Add the translation for the current language.
                    i18n_data[msgid][lang_code] = msgstr

            except Exception as e:
                print(f"Error processing file {filepath}: {e}")

    if not i18n_data:
        print("No translation data was found in the script's directory.")
        return

    # --- Generate the Lua file content ---
    lua_output_string = (
        "-- This file is auto-generated by the po_to_lua_converter.py script.\n"
    )
    lua_output_string += (
        "-- Do not edit it manually, as your changes will be overwritten.\n\n"
    )
    lua_output_string += "I18N_DATA = {\n"

    # Sort keys for consistent output file
    sorted_keys = sorted(i18n_data.keys())

    for key in sorted_keys:
        translations = i18n_data[key]
        lua_output_string += f"  [{to_lua_string(key)}] = {{\n"

        sorted_langs = sorted(translations.keys())
        for lang in sorted_langs:
            text = translations[lang]
            lua_output_string += (
                f"    [{to_lua_string(lang)}] = {to_lua_string(text)},\n"
            )

        lua_output_string += "  },\n"

    lua_output_string += "}\n"

    # --- Write the content to the output file ---
    output_path = os.path.join(script_dir, OUTPUT_LUA_FILE)

    # Ensure the target directory exists
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    try:
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(lua_output_string)
        print(
            f"\nSuccess! All translations have been written to '{os.path.abspath(output_path)}'."
        )
    except Exception as e:
        print(f"\nError writing to output file {output_path}: {e}")


if __name__ == "__main__":
    convert_po_to_lua()
