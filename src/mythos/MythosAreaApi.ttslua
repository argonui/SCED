do
  local MythosAreaApi = {}
  local GUIDReferenceApi = require("core/GUIDReferenceApi")
  local SearchLib = require("util/SearchLib")

  local function getMythosArea()
    return GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "MythosArea")
  end

  ---@return table: chaos token metadata (if provided through scenario reference card)
  function MythosAreaApi.returnTokenData()
    return getMythosArea().call("returnTokenData")
  end

  function MythosAreaApi.resetScenarioData()
    getMythosArea().call("resetScenarioData")
  end

  ---@return table: object references to the encounter deck objects
  function MythosAreaApi.getEncounterDeckObjects()
    return getMythosArea().call("getEncounterDeckObjects")
  end

  ---@return tts__Object: object reference to the set-aside chest
  function MythosAreaApi.getSetAsideChest()
    -- hardcoded coordinates of the snap point
    local searchPosition = getMythosArea().positionToWorld(Vector(2.191, 0.1, -0.462))
    for _, obj in ipairs(SearchLib.atPosition(searchPosition, "isInteractable")) do
      if obj.type == "Bag" then
        return obj
      end
    end
    return nil
  end

  ---@return tts__Vector: position for the eagenda deck
  function MythosAreaApi.getAgendaPosition()
    return getMythosArea().call("getAgendaPosition"):copy()
  end

  ---@return tts__Vector: position for the encounter deck
  function MythosAreaApi.getActPosition()
    return getMythosArea().call("getActPosition"):copy()
  end

  ---@return tts__Vector: position for the encounter deck
  function MythosAreaApi.getEncounterDeckPosition()
    return getMythosArea().call("getEncounterDeckPosition"):copy()
  end

  ---@return tts__Vector: position for the encounter discard
  function MythosAreaApi.getEncounterDiscardPosition()
    return getMythosArea().call("getEncounterDiscardPosition"):copy()
  end

  ---@return tts__Vector: rotation for the encounter discard
  function MythosAreaApi.getEncounterDiscardRotation()
    return getMythosArea().call("getEncounterDiscardRotation"):copy()
  end

  ---@return tts__Vector: position for the scenario reference card
  function MythosAreaApi.getScenarioReferenceCardPosition()
    return getMythosArea().call("getScenarioReferenceCardPosition"):copy()
  end

  -- draw an encounter card for the requesting mat to the first empty spot from the right
  ---@param matColor string Playermat that triggered this
  ---@param position tts__Vector Position for the encounter card
  function MythosAreaApi.drawEncounterCard(matColor, position)
    getMythosArea().call("drawEncounterCard", { matColor = matColor, position = position })
  end

  -- reshuffle the encounter deck
  ---@param disablePrint? boolean True to suppress printing
  function MythosAreaApi.reshuffleEncounterDeck(disablePrint)
    return getMythosArea().call("reshuffleEncounterDeck", disablePrint)
  end

  -- flip the top card of the encounter deck
  function MythosAreaApi.flipTopCardFromDeck(additionalDelay)
    getMythosArea().call("flipTopCardFromDeck", additionalDelay)
  end

  return MythosAreaApi
end
