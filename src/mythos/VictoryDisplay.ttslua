local DeckLib          = require("util/DeckLib")
local GUIDReferenceApi = require("core/GUIDReferenceApi")
local PlayAreaApi      = require("playarea/PlayAreaApi")
local SearchLib        = require("util/SearchLib")

local pendingCall      = false
local missingData      = {}
local countedVP        = {}

local highlightMissing = false
local highlightCounted = false

-- button creation when loading the game
function onLoad()
  -- index 0: VP - "Display"
  local buttonParameters          = {}
  buttonParameters.label          = "0"
  buttonParameters.click_function = "none"
  buttonParameters.function_owner = self
  buttonParameters.scale          = { 0.15, 0.15, 0.15 }
  buttonParameters.width          = 0
  buttonParameters.height         = 0
  buttonParameters.font_size      = 600
  buttonParameters.font_color     = { 1, 1, 1 }
  buttonParameters.position       = { x = -0.72, y = 0.06, z = -0.69 }
  self.createButton(buttonParameters)

  -- index 1: VP - "Play Area"
  buttonParameters.position.x = 0.65
  self.createButton(buttonParameters)

  -- index 2: VP - "Total"
  buttonParameters.position.x = 1.69
  self.createButton(buttonParameters)

  -- index 3: highlighting button (missing data)
  buttonParameters.label          = "!"
  buttonParameters.click_function = "highlightMissingData"
  buttonParameters.tooltip        = "Enable highlighting of cards without metadata (VP on these is not counted)."
  buttonParameters.color          = { 1, 0, 0 }
  buttonParameters.width          = 700
  buttonParameters.height         = 800
  buttonParameters.font_size      = 700
  buttonParameters.position       = { x = 1.82, y = 0.06, z = -1.32 }
  self.createButton(buttonParameters)

  -- index 4: highlighting button (counted VP)
  buttonParameters.label          = "?"
  buttonParameters.click_function = "highlightCountedVP"
  buttonParameters.tooltip        = "Enable highlighting of cards with VP."
  buttonParameters.color          = { 0, 1, 0 }
  buttonParameters.position.x     = 1.5
  self.createButton(buttonParameters)

  -- index 5: spawn additional VP card button
  buttonParameters.label          = "+"
  buttonParameters.click_function = "spawnAdditionalVP"
  buttonParameters.tooltip        = "Spawn a card to track additional earned VP"
  buttonParameters.color          = { 86 / 255, 90 / 255, 233 / 255 }
  buttonParameters.position.x     = -1.82
  self.createButton(buttonParameters)

  -- update the display label once
  Wait.time(updateCount, 1)
end

---------------------------------------------------------
-- events with descriptions
---------------------------------------------------------

-- dropping an object on the victory display
function onCollisionEnter()
  startUpdate()
end

-- removing an object from the victory display
function onCollisionExit()
  startUpdate()
end

-- picking a clue or location up
function onObjectPickUp(_, obj)
  maybeUpdate(obj)
end

-- dropping a clue or location
function onObjectDrop(_, obj)
  maybeUpdate(obj, 1)
end

-- flipping a clue/doom or location
function onObjectRotate(obj, _, flip, _, _, oldFlip)
  if flip == oldFlip then return end
  maybeUpdate(obj, 1, true)
end

-- destroying a clue or location
function onObjectDestroy(obj)
  if countedVP[obj] then
    startUpdate()
  else
    maybeUpdate(obj)
  end
end

---------------------------------------------------------
-- main functionality
---------------------------------------------------------

function maybeUpdate(obj, delay, flipped)
  -- stop if there is already an update call running
  if pendingCall then return end

  -- stop if obj is nil (by e.g. dropping a clue onto another and making a stack)
  if obj == nil then return end

  -- only continue for clues / doom tokens or locations
  if obj.hasTag("Location") then
  elseif obj.memo == "clueDoom" then
    -- only continue if the clue side is up or a doom token is being flipped
    if obj.is_face_down == true and flipped ~= true then return end
  else
    return
  end

  -- only continue if the obj in in the play area
  if not PlayAreaApi.isInPlayArea(obj) then return end

  startUpdate(delay)
end

-- starts an update
function startUpdate(delay)
  -- stop if there is already an update call running
  if pendingCall then return end
  pendingCall = true
  delay = tonumber(delay) or 0
  Wait.time(updateCount, delay + 0.2)
end

-- counts the VP in the victory display and request the VP count from the play area
function updateCount()
  -- Turn off highlighting in case any cards are going to stop being tracked
  local tempHighlightingGreen = false
  local tempHighlightingRed = false
  if highlightCounted then
    highlightCountedVP()
    tempHighlightingGreen = true
  end
  if highlightMissing then
    highlightMissingData()
    tempHighlightingRed = true
  end
  missingData            = {}
  countedVP              = {}
  local victoryPoints    = {}
  victoryPoints.display  = 0
  victoryPoints.playArea = PlayAreaApi.countVP()

  -- count cards in victory display
  for _, obj in ipairs(SearchLib.onObject(self, "isCardOrDeck")) do
    -- check metadata for VP
    if obj.type == "Card" then
      local VP = getCardVP(obj, JSON.decode(obj.getGMNotes()))
      victoryPoints.display = victoryPoints.display + VP
      if VP > 0 then
        countedVP[obj] = true
      end

      -- handling for stacked cards
    elseif obj.type == "Deck" then
      local VP = 0
      for _, deepObj in ipairs(obj.getObjects()) do
        local deepVP = getCardVP(obj, JSON.decode(deepObj.gm_notes))
        victoryPoints.display = victoryPoints.display + deepVP
        if deepVP > 0 then
          VP = VP + 1
        end
      end
      if VP > 0 then
        countedVP[obj] = true
      end
    end
  end

  -- update the buttons that are used as labels
  self.editButton({ index = 0, label = victoryPoints.display })
  self.editButton({ index = 1, label = victoryPoints.playArea })
  self.editButton({ index = 2, label = victoryPoints.display + victoryPoints.playArea })

  -- if highlighting was on, turn it back on, including any new cards now being tracked
  if tempHighlightingGreen then
    highlightCountedVP()
  end
  if tempHighlightingRed then
    highlightMissingData()
  end

  -- allow new update calls
  pendingCall = false
end

-- gets the VP count from the notes
function getCardVP(obj, notes)
  local cardVP
  if notes ~= nil then
    -- enemy, treachery etc.
    cardVP = tonumber(notes.victory)

    -- location
    if not cardVP then
      -- check the correct side of the location
      if not obj.is_face_down and notes.locationFront ~= nil then
        cardVP = tonumber(notes.locationFront.victory)
      elseif notes.locationBack ~= nil then
        cardVP = tonumber(notes.locationBack.victory)
      end
    end
    if (cardVP or 0) > 0 then
      countedVP[obj] = true
    end
  else
    table.insert(missingData, obj)
  end
  return cardVP or 0
end

-- toggles the highlight for objects with missing metadata
function highlightMissingData()
  self.editButton({
    index = 3,
    tooltip = (highlightMissing and "En" or "Dis") ..
        "able highlighting of cards without metadata (VP on these is not counted)."
  })
  for _, obj in pairs(missingData) do
    if obj ~= nil then
      if highlightMissing then
        obj.highlightOff("Red")
      else
        obj.highlightOn("Red")
      end
    end
  end
  PlayAreaApi.highlightMissingData(highlightMissing)
  highlightMissing = not highlightMissing
end

-- toggles the highlight for objects that were counted
function highlightCountedVP()
  startUpdate()
  self.editButton({
    index = 4,
    tooltip = (highlightCounted and "Enable" or "Disable") .. " highlighting of cards with VP."
  })
  for obj, _ in pairs(countedVP) do
    if obj ~= nil then
      if highlightCounted then
        obj.highlightOff("Green")
      else
        obj.highlightOn("Green")
      end
    end
  end
  PlayAreaApi.highlightCountedVP(highlightCounted)
  highlightCounted = not highlightCounted
end

function spawnAdditionalVP()
  local sourceBag = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "ObjectSourceBag")
  for _, objData in ipairs(sourceBag.getData().ContainedObjects) do
    if objData["Nickname"] == "Additional Victory Points" then
      placeCard(spawnObjectData({ data = objData }))
      return
    end
  end
end

-- places the provided card in the first empty spot
function placeCard(card)
  local name = card.getName() or "Unnamed card"

  -- get sorted list of snap points to check slots
  local snaps = self.getSnapPoints()
  table.sort(snaps, function(a, b) return a.position.x > b.position.x end)
  table.sort(snaps, function(a, b) return a.position.z < b.position.z end)

  -- get first empty slot
  local emptyIndex, emptyPos
  for i, snap in ipairs(snaps) do
    local snapPos = self.positionToWorld(snap.position)
    local searchResult = SearchLib.atPosition(snapPos, "isCardOrDeck")
    if #searchResult == 0 then
      emptyPos = snapPos
      emptyIndex = i
      break
    end
  end

  -- remove tokens from the card (does not remove chaos tokens)
  local trash = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  for _, obj in ipairs(SearchLib.onObject(card, "isTileOrToken")) do
    if obj.memo and not obj.getLock() and obj.interactable then
      trash.putObject(obj)
    end
  end

  -- use the first snap position in case all slots are full
  local pos = emptyPos or self.positionToWorld(snaps[1].position)
  local rot = card.getRotation():setAt("x", 0):setAt("y", 270)
  DeckLib.placeOrMergeIntoDeck(card, pos, rot)

  -- give a feedback message
  if emptyPos then
    broadcastToAll("Victory Display: " .. name .. " placed into slot " .. emptyIndex .. ".", "Green")
  else
    broadcastToAll("Victory Display is full! " .. name .. " placed into slot 1.", "Orange")
  end
end
