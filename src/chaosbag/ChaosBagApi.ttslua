do
  local TableLib    = require("util/TableLib")

  local ChaosBagApi = {}

  -- Respawns the chaos bag with a new state of tokens
  ---@param tokenList table List of chaos token ids
  function ChaosBagApi.setChaosBagState(tokenList)
    Global.call("setChaosBagState", tokenList)
  end

  -- Returns a list of chaos token ids in the current chaos bag
  function ChaosBagApi.getChaosBagState()
    return TableLib.copy(Global.call("getChaosBagState"))
  end

  -- Returns a reference to the chaos bag (used by a lot of objects!)
  function ChaosBagApi.findChaosBag()
    return Global.call("findChaosBag")
  end

  -- Returns a table of object references to the tokens in play (does not include sealed tokens!)
  function ChaosBagApi.getTokensInPlay()
    return Global.call("getChaosTokensinPlay")
  end

  -- Returns all sealed tokens on cards to the chaos bag
  ---@param playerColor string Color of the player to show the broadcast to
  ---@param filterName? string Name of the token to release
  ---@param silent? boolean Whether or not to hide messages
  function ChaosBagApi.releaseAllSealedTokens(playerColor, filterName, silent)
    Global.call("releaseAllSealedTokens", { playerColor = playerColor, filterName = filterName, silent = silent })
  end

  -- Returns all drawn tokens to the chaos bag
  function ChaosBagApi.returnChaosTokens()
    Global.call("returnChaosTokens")
  end

  -- Removes the specified chaos token from the chaos bag
  ---@param id string ID of the chaos token
  function ChaosBagApi.removeChaosToken(id)
    Global.call("removeChaosToken", id)
  end

  -- Returns a chaos token to the bag and calls all relevant functions
  ---@param token tts__Object Chaos token to return
  ---@param fromBag boolean whether or not the token to return was in the middle of being drawn (true) or elsewhere (false)
  function ChaosBagApi.returnChaosTokenToBag(token, fromBag)
    Global.call("returnChaosTokenToBag", { token = token, fromBag = fromBag })
  end

  -- Spawns the specified chaos token and puts it into the chaos bag
  ---@param id string ID of the chaos token
  function ChaosBagApi.spawnChaosToken(id)
    Global.call("spawnChaosToken", id)
  end

  -- Checks to see if the chaos bag can be manipulated.
  -- This method will broadcast a message to all players if the bag is being searched.
  ---@return any: True if the bag is manipulated, false if it should be blocked.
  function ChaosBagApi.canTouchChaosTokens()
    return Global.call("canTouchChaosTokens")
  end

  -- Function used for manipulation of chaos tokens that are in play, in conjunction with various helpers
  -- e.g. Nkosi Mabati or Ocula Obscura.
  ---@param type string "redraw" or "seal" for what happens after the token is removed from play
  ---@param validTokens? table list of tokens eligible for manipulation
  ---@param invalidTokens? table list of tokens ineligible for manipulation
  ---@param returnToPool? boolean if the token should be removed from the chaos bag (e.g. False Covenant)
  ---@param drawSpecificToken? boolean if upon redrawing, a specific chaos token is drawn (e.g. Nkosi Mabati)
  ---@param triggeringCardGUID? string the GUID of the card triggering the token manipulation
  ---@param playerColor? string the color of the triggering player (useful for functions that require messaging the player)
  function ChaosBagApi.removeTokenFromPlay(type, validTokens, invalidTokens, returnToPool, drawSpecificToken, triggeringCardGUID, playerColor)
    Global.call("removeTokenFromPlay", {
      type               = type,
      validTokens        = validTokens,
      invalidTokens      = invalidTokens,
      returnToPool       = returnToPool,
      drawSpecificToken  = drawSpecificToken,
      triggeringCardGUID = triggeringCardGUID,
      playerColor        = playerColor
    })
  end

  function ChaosBagApi.getReadableTokenName(tokenName)
    return Global.call("getReadableTokenName", tokenName)
  end

  function ChaosBagApi.getChaosTokenName(chosenToken)
    return Global.call("getChaosTokenName", chosenToken)
  end

  -- Draws a chaos token to a playermat
  ---@param mat tts__Object|string Playermat that triggered this (either object or matColor)
  ---@param drawAdditional boolean Controls whether additional tokens should be drawn
  ---@param tokenType? string Name of token (e.g. "Bless") to be drawn from the bag
  ---@param guidToBeResolved? string GUID of the sealed token to be resolved instead of drawing a token from the bag
  ---@param takeParameters? table Position and rotation of the location where the new token should be drawn to, usually to replace a returned token
  ---@return tts__Object: Object reference to the token that was drawn
  function ChaosBagApi.drawChaosToken(mat, drawAdditional, tokenType, guidToBeResolved, takeParameters)
    return Global.call("drawChaosToken", {
      mat              = mat,
      drawAdditional   = drawAdditional,
      tokenType        = tokenType,
      guidToBeResolved = guidToBeResolved,
      takeParameters   = takeParameters
    })
  end

  -- Returns a Table List of chaos token ids in the current chaos bag
  function ChaosBagApi.getIdUrlMap()
    return Global.getTable("ID_URL_MAP")
  end

  return ChaosBagApi
end
