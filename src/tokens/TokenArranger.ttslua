local ChaosBagApi               = require("chaosbag/ChaosBagApi")
local GlobalApi                 = require("Global/GlobalApi")
local MythosAreaApi             = require("mythos/MythosAreaApi")

-- position of the first token
local START_POSITION            = Vector(-0.86, 0, -0.86)
local TOKEN_OFFSET              = 0.3

-- common parameters
local buttonParameters          = {}
buttonParameters.function_owner = self
buttonParameters.label          = ""
buttonParameters.tooltip        = "Increase / Decrease"
buttonParameters.color          = { 0, 0, 0, 0 }
buttonParameters.width          = 315
buttonParameters.height         = 315
buttonParameters.scale          = { 0.35, 0.35, 0.35 }

local inputParameters           = {}
inputParameters.function_owner  = self
inputParameters.font_size       = 200
inputParameters.width           = 500
inputParameters.height          = inputParameters.font_size + 46
inputParameters.alignment       = 3
inputParameters.validation      = 2
inputParameters.tab             = 2
inputParameters.scale           = { 0.17, 0.17, 0.17 }

local percentageLabel           = {}
percentageLabel.function_owner  = self
percentageLabel.click_function  = "none"
percentageLabel.font_size       = 200
percentageLabel.width           = 0
percentageLabel.height          = 0

-- variables with save function
local tokenPrecedence           = {}
local percentage                = false
local includeDrawnTokens        = true

-- variables without save function
local updating                  = false
local TOKEN_NAMES               = {
  "Elder Sign",
  "Skull",
  "Cultist",
  "Tablet",
  "Elder Thing",
  "Auto-fail",
  "Bless",
  "Curse",
  "Frost",
  ""
}

-- saving the precedence settings and information on the most recently loaded data
function updateSave()
  self.script_state = JSON.encode({
    tokenPrecedence    = tokenPrecedence,
    includeDrawnTokens = includeDrawnTokens
  })
end

-- loading data, button creation and initial layouting
function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData   = JSON.decode(savedData)
    tokenPrecedence    = loadedData.tokenPrecedence
    includeDrawnTokens = loadedData.includeDrawnTokens
  else
    loadDefaultValues()

    -- grab token metadata from mythos area
    Wait.time(function() onTokenDataChanged(MythosAreaApi.returnTokenData()) end, 0.2)
  end

  createButtonsAndInputs()

  -- maybe trigger layout() to draw percentage buttons
  local objList = getObjectsWithTag("tempToken")
  if #objList > 0 then
    Wait.time(layout, 0.5)
  end

  -- context menu items
  self.addContextMenuItem("Load default values", function()
    loadDefaultValues()
    updateUI()
    layout()
  end)

  self.addContextMenuItem("Include drawn tokens", function()
    includeDrawnTokens = not includeDrawnTokens
    local text = includeDrawnTokens and " " or " not "
    broadcastToAll("Token Arranger will" .. text .. "include currently drawn chaos tokens.", "Orange")
    updateSave()
    layout()
  end)
end

-- delete temporary tokens when destroyed
function onDestroy() deleteCopiedTokens() end

-- layout tokens when dropped (after 1.5 seconds)
function onDrop() Wait.time(layout, 1.5) end

-- delete temporary tokens when picked up
function onPickUp() deleteCopiedTokens() end

-- click_function for buttons on chaos tokens
function tokenClick(isRightClick, index)
  local change = tonumber(isRightClick and "-1" or "1")
  tokenPrecedence[TOKEN_NAMES[index]][1] = tokenPrecedence[TOKEN_NAMES[index]][1] + change
  self.editInput({
    index = index - 1,
    value = tokenPrecedence[TOKEN_NAMES[index]][1]
  })
  updateSave()
  layout()
end

-- input_function for input_boxes
function tokenInput(input, selected, index)
  if selected == false then
    local num = tonumber(input)
    if num ~= nil then
      tokenPrecedence[TOKEN_NAMES[index]][1] = num
      updateSave()
      layout()
    end
  end
end

function getCurrentModifier(tokenName)
  if tokenPrecedence[tokenName] then
    return tokenPrecedence[tokenName][1]
  end
  return nil
end

-- loads the default precedence table
function loadDefaultValues()
  -- 1st value: token modifiers for sorting
  -- 2nd value: order for equivalent tokens (starts at 2 because of "+1" token)
  tokenPrecedence = {
    ["Elder Sign"]  = {  100,  2 },
    ["Skull"]       = {   -1,  3 },
    ["Cultist"]     = {   -2,  4 },
    ["Tablet"]      = {   -3,  5 },
    ["Elder Thing"] = {   -4,  6 },
    ["Auto-fail"]   = { -100,  7 },
    ["Bless"]       = {  110,  8 },
    ["Curse"]       = { -110,  9 },
    ["Frost"]       = { -105, 10 },
    [""]            = {    0, 11 }
  }
  updateSave()
end

-- creates buttons and inputs
function createButtonsAndInputs()
  local zOffset = 0.24
  local pos     = { x = { -0.35, 0.13 }, z = -0.632 }

  -- button and inputs index 0-9
  for i = 1, 10 do
    if i < 6 then
      buttonParameters.position = { pos.x[1], 0.1, pos.z + i * zOffset }
      inputParameters.position  = { pos.x[1] + zOffset * 0.95, 0.1, pos.z + i * zOffset }
    else
      buttonParameters.position = { pos.x[2], 0.1, pos.z + (i - 5) * zOffset }
      inputParameters.position  = { pos.x[2] + zOffset * 0.95, 0.1, pos.z + (i - 5) * zOffset }
    end

    buttonParameters.click_function = "tokenClick" .. i
    inputParameters.input_function  = "tokenInput" .. i
    inputParameters.value           = tokenPrecedence[TOKEN_NAMES[i]][1]

    -- setting click-/inputfunction
    self.setVar(buttonParameters.click_function, function(_, _, isRightClick) tokenClick(isRightClick, i) end)
    self.setVar(inputParameters.input_function, function(_, _, input, selected) tokenInput(input, selected, i) end)

    -- button/input creation
    self.createButton(buttonParameters)
    self.createInput(inputParameters)
  end

  -- index 10: "Update / Hide" button
  self.createButton({
    function_owner = self,
    label          = "Update / Hide",
    click_function = "layout",
    tooltip        = "Left-Click: Update!\nRight-Click: Hide Tokens!",
    position       = { 0, 0.1, 1.12 },
    scale          = { 0.25, 0.25, 0.25 },
    color          = { 1, 1, 1 },
    font_size      = 200,
    width          = 1350,
    height         = 325
  })
end

-- update input fields
function updateUI()
  for i = 1, 10 do
    self.editInput({
      index = i - 1,
      value = tokenPrecedence[TOKEN_NAMES[i]][1]
    })
  end
end

-- order function for data sorting
function tokenValueComparator(left, right)
  if left.value ~= right.value then
    return left.value > right.value
  elseif left.order ~= right.order then
    return left.order < right.order
  else
    return false
  end
end

-- deletes previously placed tokens
function deleteCopiedTokens()
  for _, token in ipairs(getObjectsWithTag("tempToken")) do
    token.destruct()
  end

  -- this removes the percentage buttons (by index 11+)
  local buttonCount = #self.getButtons()
  if buttonCount < 12 then return end

  for i = buttonCount, 12, -1 do
    self.removeButton(i - 1)
  end
end

-- creates buttons as labels as display for percentage values
function createPercentageButton(tokenCount, rowCount, tokenName, optionPanelState)
  if optionPanelState == "No Odds" then return end

  -- make a copy of the global start position and adjust Y for buttons
  local buttonPosition = START_POSITION:copy():setAt("y", 0.05)

  -- flip X-coodinate for buttons
  buttonPosition = buttonPosition * Vector(-1, 1, 1)

  -- x-offset to align buttons
  buttonPosition = buttonPosition + Vector(0.02, 0, 0)

  -- z-offset to align buttons
  buttonPosition = buttonPosition + Vector(0, 0, TOKEN_OFFSET) * (rowCount - 1)

  -- adjust data if both labels are enabled
  if optionPanelState == "Full" then
    percentageLabel.scale    = Vector(0.22, 0.22, 0.22)
    percentageLabel.position = buttonPosition - Vector(0, 0, TOKEN_OFFSET * 0.19)
  else
    percentageLabel.scale    = Vector(0.26, 0.26, 0.26)
    percentageLabel.position = buttonPosition
  end

  -- determine font_color
  if tokenName == "Elder Sign" then
    percentageLabel.font_color = { 0.35, 0.71, 0.85 }
  elseif tokenName == "Auto-fail" then
    percentageLabel.font_color = { 0.86, 0.1, 0.1 }
  elseif string.match(tokenName, "%a") ~= nil then
    -- tokenName contains letters (e.g. symbol token)
    percentageLabel.font_color = { 0.68, 0.53, 0.86 }
  else
    percentageLabel.font_color = { 0.85, 0.67, 0.33 }
  end

  -- create label for base percentage
  if optionPanelState == "Basic" or optionPanelState == "Full" then
    local basePercentage = math.floor((tokenCount.row / tokenCount.total) * 10000) / 100
    percentageLabel.label = formatPercentage(basePercentage)
    self.createButton(percentageLabel)
  elseif optionPanelState == "Cumulative" then
    -- only display one digit for 100%
    if tokenCount.sum == tokenCount.total then
      percentageLabel.label = "100.0%"
    else
      local cumulativePercentage = math.floor((tokenCount.sum / tokenCount.total) * 10000) / 100
      percentageLabel.label = formatPercentage(cumulativePercentage)
    end
    self.createButton(percentageLabel)
  end

  -- optionally create label for cumulative percentage
  if optionPanelState == "Full" then
    percentageLabel.position = buttonPosition + Vector(0, 0, TOKEN_OFFSET * 0.19)
    percentageLabel.font_color = { 1, 1, 1 }

    -- only display one digit for 100%
    if tokenCount.sum == tokenCount.total then
      percentageLabel.label = "100.0%"
    else
      local cumulativePercentage = math.floor((tokenCount.sum / tokenCount.total) * 10000) / 100
      percentageLabel.label = formatPercentage(cumulativePercentage)
    end
    self.createButton(percentageLabel)
  end
end

function formatPercentage(value)
  return string.format("%s", string.format("%05.2f", value) .. "%")
end

-- main function (delete old tokens, clone chaos bag content, sort it and position it)
function layout(_, _, isRightClick)
  if updating then return end
  updating = true
  deleteCopiedTokens()

  -- stop here if right-clicked
  if isRightClick then
    updating = false
    return
  end

  -- get ChaosBag and stop if not found
  local chaosBag = ChaosBagApi.findChaosBag()
  if not chaosBag then
    updating = false
    return
  end

  -- clone tokens from chaos bag (default position above trash can)
  local rawData = chaosBag.getData().ContainedObjects or {}

  -- optionally get the data for tokens in play
  if includeDrawnTokens then
    for _, token in pairs(ChaosBagApi.getTokensInPlay()) do
      if token ~= nil then
        table.insert(rawData, token.getData())
      end
    end
  end

  -- generate layout data
  local data = {}
  for i, objData in ipairs(rawData) do
    objData["Tags"] = { "tempToken" }

    -- remove GUID to avoid issues for high latency clients
    objData["GUID"] = nil

    -- store data for each token
    data[i] = { token = objData }

    local value = tonumber(objData.Nickname)
    if value then
      -- numeric tokens
      data[i].value = value
      data[i].order = value
    else
      -- symbol tokens
      local precedence = tokenPrecedence[objData.Nickname] or tokenPrecedence[""]
      data[i].value = precedence[1]
      data[i].order = precedence[2]
    end
  end

  -- handling for near empty chaos bag
  if #data == 0 then
    -- small delay to limit update calls
    Wait.time(function() updating = false end, 0.1)
    return
  elseif #data > 1 then
    -- sort table by value (symbols last if same value)
    table.sort(data, tokenValueComparator)
  end

  -- laying out the tokens
  local rotation = self.getRotation()
  local localStartPos = START_POSITION:copy()
  local optionPanelState = GlobalApi.getOptionPanelState()["tokenArrangerOdds"]

  -- make space for the percentage labels
  if optionPanelState ~= "No Odds" then
    localStartPos = localStartPos - Vector(0.35, 0, 0)
  end

  local location = localStartPos:copy()
  local currentValue = data[1].value
  local tokenCount = { row = 0, sum = 0, total = #data }
  local rowCount = 1
  local tokenName

  for _, item in ipairs(data) do
    -- this is true for the first token in a new row
    if item.value ~= currentValue then
      tokenCount.sum = tokenCount.sum + tokenCount.row
      createPercentageButton(tokenCount, rowCount, tokenName, optionPanelState)

      location = Vector(localStartPos.x, location.y, location.z + TOKEN_OFFSET)
      currentValue = item.value
      rowCount = rowCount + 1
      tokenCount.row = 0
    end

    spawnObjectData({
      data = item.token,
      position = self.positionToWorld(location),
      rotation = rotation
    })
    tokenName = item.token.Nickname
    location = location - Vector(TOKEN_OFFSET, 0, 0)
    tokenCount.row = tokenCount.row + 1
  end

  -- this is repeated to create the button for the last token
  tokenCount.sum = tokenCount.sum + tokenCount.row
  createPercentageButton(tokenCount, rowCount, tokenName, optionPanelState)

  -- small delay to limit update calls
  Wait.time(function() updating = false end, 0.1)
end

-- called from outside to set default values for tokens
function onTokenDataChanged(parameters)
  -- update token precedence
  for key, table in pairs(parameters.tokenData or {}) do
    local modifier = table.modifier
    if modifier == -999 then modifier = 0 end
    tokenPrecedence[key][1] = modifier
  end

  updateUI()
  updateSave()
  layout()
end
