do
  local TokenManagerApi = {}

  -- Spawns tokens for the card. This function is built to just throw a card at it and let it do
  -- the work once a card has hit an area where it might spawn tokens. It will check to see if
  -- the card has already spawned, get the metadata and and spawn the tokens.
  ---@param card tts__Object Card to maybe spawn tokens for
  ---@param extraUses? table A table of <use type>=<count> which will modify the number of tokens
  ---    spawned for that type. e.g. Akachi's playermat should pass "Charge"=1
  ---@param spawnReactionToken? boolean Whether there should spawn an additional reaction token (atm only for Michael)
  ---@param matColor? string Color of the triggering playermat - White, Orange, Green or Red
  function TokenManagerApi.spawnForCard(card, extraUses, spawnReactionToken, matColor)
    Global.call("callTable", {
      { "TokenManager", "spawnForCard" },
      {
        card               = card,
        extraUses          = extraUses,
        spawnReactionToken = spawnReactionToken,
        matColor           = matColor
      }
    })
  end

  -- Spawns a single token at the given global position by copying it from the template bag.
  ---@param position tts__Vector Global position to spawn the token
  ---@param tokenType string Type of token to spawn (template needs to be in source bag)
  ---@param rotation tts__Vector Rotation to be used for the new token. Only the y-value will be used,
  --     x and z will use the default rotation from the source bag
  ---@param callbackName? string Name of the callback function (in Global)
  ---@param callbackParams? any Parameters for the callback function
  ---@param scriptstate? any Scriptstate for the token
  ---@param addTag? string Additional tag for the spawned token
  function TokenManagerApi.spawnToken(position, tokenType, rotation, callbackName, callbackParams, scriptstate, addTag)
    Global.call("callTable", {
      { "TokenManager", "spawnToken" },
      {
        position       = position,
        rotation       = rotation,
        tokenType      = tokenType,
        callbackName   = callbackName,
        callbackParams = callbackParams,
        scriptstate    = scriptstate,
        addTag         = addTag
      }
    })
  end

  -- Spawns a set of tokens on the given card.
  ---@param card tts__Object Card to spawn tokens on
  ---@param tokenType string Type of token to spawn (template needs to be in source bag)
  ---@param tokenCount number How many tokens to spawn. For damage or horror this value will be set to the
  --     spawned state object rather than spawning multiple tokens
  ---@param shiftDown? number An offset for the z-value of this group of tokens
  ---@param subType? string Subtype of token to spawn. This will only differ from the tokenName for resource tokens
  ---@param temporary? boolean If present adds the temporary tag to an action token
  function TokenManagerApi.spawnTokenGroup(card, tokenType, tokenCount, shiftDown, subType, temporary)
    Global.call("callTable", {
      { "TokenManager", "spawnTokenGroup" },
      {
        card       = card,
        tokenType  = tokenType,
        tokenCount = tokenCount,
        shiftDown  = shiftDown,
        subType    = subType,
        temporary  = temporary
      }
    })
  end

  -- Checks a card for metadata to maybe replenish it
  ---@param card tts__Object Card object to be replenished
  ---@param uses table The already decoded metadata.uses (to avoid decoding again)
  function TokenManagerApi.maybeReplenishCard(card, uses)
    Global.call("callTable", {
      { "TokenManager", "maybeReplenishCard" },
      { card = card, uses = uses }
    })
  end

  -- Generates the data to spawn an infinite bag of a specific type of resources
  function TokenManagerApi.getDataForInfiniteBag(tokenType, position, rotation)
    return Global.call("callTable", {
      { "TokenManager", "getDataForInfiniteBag" },
      {
        tokenType = tokenType,
        position  = position,
        rotation  = rotation
      }
    })
  end

  -- adds a use to a card
  ---@param card tts__Object Card that should get a use added
  ---@param useType string Type of uses to be added
  ---@param additionalCount number How many uses to add
  function TokenManagerApi.addUseToCard(card, useType, additionalCount)
    local result = Global.call("callTable", {
      { "TokenManager", "addUseToCard" },
      { card = card, useType = useType, additionalCount = additionalCount }
    })
    return result
  end

  -- Spawns a single resource counter token and sets the value to tokenValue.
  ---@param card tts__Object Card to spawn token on
  ---@param tokenValue number Value to set the counter to
  function TokenManagerApi.spawnResourceCounterToken(card, tokenValue)
    Global.call("callTable", {
      { "TokenManager", "spawnResourceCounterToken" },
      { card = card, tokenValue = tokenValue }
    })
  end

  return TokenManagerApi
end
