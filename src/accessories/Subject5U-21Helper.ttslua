local SearchLib     = require("util/SearchLib")

local CLASS_ORDER   = {
  "Guardian",
  "Seeker",
  "Survivor",
  "Mystic",
  "Rogue"
}

local metadataCache = {}

function onLoad()
  self.createButton({
    width          = 0,
    height         = 0,
    function_owner = self,
    click_function = "none",
    label          = "Cards on this tile are automatically counted.",
    position       = Vector(0, 0.11, 0.875),
    scale          = Vector(0.1, 1, 0.1),
    font_color     = "White",
    font_size      = 400
  })
  createDisplayButtons()
  Wait.time(updateDisplayButtons, 2, -1)
end

function createDisplayButtons()
  local x_offset        = 0.361

  local bParam          = {}
  bParam.width          = 0
  bParam.height         = 0
  bParam.function_owner = self
  bParam.click_function = "none"
  bParam.label          = "0"
  bParam.position       = Vector(-3 * x_offset, 0.11, -0.7)
  bParam.scale          = Vector(0.1, 1, 0.1)
  bParam.font_color     = "White"
  bParam.font_size      = 700

  for i = 1, 5 do
    bParam.position.x = bParam.position.x + x_offset
    self.createButton(bParam)
  end
end

function updateDisplayButtons(_, playerColor)
  local classCount = {
    Guardian  = 0,
    Seeker    = 0,
    Survivor  = 0,
    Mystic    = 0,
    Rogue     = 0,
    uncounted = 0
  }

  -- loop through cards on this helper and count classes from metadata
  for _, md in ipairs(getMetadataFromCardsAndContainers()) do
    if md.class then
      for str in string.gmatch(md.class, "([^|]+)") do
        if not tonumber(classCount[str]) then
          str = "uncounted"
        end
        classCount[str] = classCount[str] + 1
      end
    end
  end

  -- edit button labels with index 1-5
  for i = 1, 5 do
    self.editButton({ index = i, label = classCount[CLASS_ORDER[i]] })
  end

  -- show message about uncounted cards
  if classCount.uncounted > 0 and playerColor then
    printToColor("Search included " .. classCount.uncounted .. " neutral/uncounted card(s).", playerColor, "Orange")
  end
end

function getMetadataFromCardsAndContainers()
  local mdList = {}
  for _, obj in ipairs(SearchLib.onObject(self)) do
    if obj.type == "Card" then
      table.insert(mdList, getMetadataFromNotes(obj.getName(), obj.getGMNotes()))
    elseif obj.type == "Bag" or obj.type == "Deck" then
      -- check if there are actually objects contained and loop through them
      local containedObjects = obj.getData().ContainedObjects
      if containedObjects then
        for _, deepObj in ipairs(containedObjects) do
          if deepObj.Name == "Card" or deepObj.Name == "CardCustom" then
            table.insert(mdList, getMetadataFromNotes(deepObj.Nickname, deepObj.GMNotes))
          end
        end
      end
    end
  end
  return mdList
end

function getMetadataFromNotes(name, notes)
  metadataCache[name] = metadataCache[name] or JSON.decode(notes) or {}
  return metadataCache[name]
end
