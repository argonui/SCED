-- Cleans up the table for the next scenario in a campaign:
-- sets counters to default values (resources and doom) or trauma values (health and sanity, if not disabled) from campaign log
-- puts everything on playermats and hands into respective trashcans
-- use the IGNORE_TAG to exclude objects from tidying (default: "CleanUpHelper_Ignore")

local BlessCurseManagerApi      = require("chaosbag/BlessCurseManagerApi")
local ChaosBagApi               = require("chaosbag/ChaosBagApi")
local CoroutineLib              = require("util/CoroutineLib")
local GUIDReferenceApi          = require("core/GUIDReferenceApi")
local MythosAreaApi             = require("mythos/MythosAreaApi")
local PlayAreaApi               = require("playarea/PlayAreaApi")
local PlayermatApi              = require("playermat/PlayermatApi")
local SearchLib                 = require("util/SearchLib")
local SoundCubeApi              = require("core/SoundCubeApi")
local TokenSpawnTrackerApi      = require("tokens/TokenSpawnTrackerApi")

-- objects with this tag will be ignored
local IGNORE_TAG                = "CleanUpHelper_ignore"

local matColorList              = {}
local valuesForDamageHorror     = {}
local loadingFailedBefore       = false
local optionsVisible            = false
local options                   = {
  ["importTrauma"]     = true,
  ["tidyPlayermats"]   = true,
  ["removeDrawnLines"] = false
}
local removeIgnoreLater         = {}

-- don't clean playermats for preludes
local scenarioName
local preludeList               = {
  ["Prelude: Welcome to Hemlock Vale!"] = true, -- real prelude, don't clean playermats
  ["Prelude: The First Evening"]        = true, -- interlude, but maybe players already imported decks
  ["Prelude: Dawn of the Second Day"]   = true, -- real prelude, don't clean playermats
  ["Prelude: The Second Evening"]       = true, -- interlude, but maybe players already imported decks
  ["Prelude: Dawn of the Final Day"]    = true  -- real prelude, don't clean playermats
}

local buttonParameters          = {}
buttonParameters.function_owner = self

---------------------------------------------------------
-- option loading and GUI setup
---------------------------------------------------------

function getSaveData()
  return { options = options }
end

function updateSave()
  self.script_state = JSON.encode(getSaveData())
end

-- loads data and updates the UI to match
function loadData(loadedData)
  if not loadedData then return end

  options = loadedData.options

  for id, state in pairs(options) do
    self.UI.setAttribute(id, "image", state and "option_on" or "option_off")
  end
end

function onLoad(savedData)
  if savedData ~= nil and savedData ~= "" then
    loadData(JSON.decode(savedData))
  end

  -- index 0: button as label
  buttonParameters.label          = "Clean Up Helper"
  buttonParameters.click_function = "none"
  buttonParameters.position       = { x = 0, y = 0.1, z = -1.3 }
  buttonParameters.height         = 0
  buttonParameters.width          = 0
  buttonParameters.font_size      = 230
  buttonParameters.font_color     = Color(0, 0, 0)
  self.createButton(buttonParameters)

  -- index 1: option button
  buttonParameters.label          = "Settings"
  buttonParameters.click_function = "showOrHideOptions"
  buttonParameters.color          = { 0, 0, 0, 0.96 }
  buttonParameters.position.z     = -0.1
  buttonParameters.height         = 350
  buttonParameters.width          = 1000
  buttonParameters.font_size      = 190
  buttonParameters.font_color     = "White"
  self.createButton(buttonParameters)

  -- index 2: start button
  buttonParameters.label          = "Reset play areas"
  buttonParameters.click_function = "cleanUp"
  buttonParameters.position.z     = 1.1
  buttonParameters.width          = 1550
  self.createButton(buttonParameters)
end

---------------------------------------------------------
-- click functions for option buttons
---------------------------------------------------------

-- changes the UI state and the internal variable for the togglebuttons
function optionButtonClick(_, id)
  local currentState = options[id]
  local newState = (currentState and "option_off" or "option_on")
  options[id] = not currentState
  self.UI.setAttribute(id, "image", newState)
  updateSave()
end

-- shows or hides the option panel
function showOrHideOptions()
  optionsVisible = not optionsVisible

  if optionsVisible then
    self.UI.show("options")
  else
    self.UI.hide("options")
  end
end

---------------------------------------------------------
-- main function
---------------------------------------------------------

function cleanUp(_, color)
  printToAll("------------------------------", "White")
  printToAll("Clean up started!", "Orange")
  printToAll("Resetting counters...", "White")

  -- dynamically get mat colors
  matColorList = {}
  for matColor, _ in pairs(GUIDReferenceApi.getObjectsByType("Playermat")) do
    table.insert(matColorList, matColor)
  end

  getScenarioName()
  MythosAreaApi.resetScenarioData()
  SoundCubeApi.playSoundByName("Vacuum")
  getTrauma()

  -- delay to account for potential state change of campaign log
  Wait.time(updateCounters, 0.2)

  resetDoomCounter()
  BlessCurseManagerApi.removeAll(color)
  removeLines()
  returnMiniCards()
  discardHands()
  resetHandHelpers()
  ChaosBagApi.returnChaosTokens()
  ChaosBagApi.releaseAllSealedTokens(color)
  maybeIgnoreTekeliliCards()

  printToAll("Tidying main play area...", "White")
  CoroutineLib.start(tidyPlayAreaCoroutine)
end

---------------------------------------------------------
-- modular functions, called by other functions
---------------------------------------------------------

function getScenarioName()
  local tokenData = MythosAreaApi.returnTokenData()
  scenarioName = tokenData.currentScenario
end

function updateCounters()
  if not getOptionValue() then return end

  PlayermatApi.updateCounter("All", "ResourceCounter", 5)
  PlayermatApi.updateCounter("All", "ClickableClueCounter", 0)
  PlayermatApi.resetSkillTracker("All")

  for i, matColor in ipairs(matColorList) do
    PlayermatApi.updateCounter(matColor, "DamageCounter", valuesForDamageHorror.Damage[i])
    PlayermatApi.updateCounter(matColor, "HorrorCounter", valuesForDamageHorror.Horror[i])
  end
end

-- reset doom on agenda
function resetDoomCounter()
  local doomCounter = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "DoomCounter")
  if doomCounter ~= nil then
    doomCounter.call("updateVal")
  else
    printToAll("Doom counter could not be found.", "Yellow")
  end

  -- reset subtractDoom setting
  local doomInPlayCounter = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "DoomInPlayCounter")
  if doomInPlayCounter ~= nil then
    doomInPlayCounter.call("toggleSubtractDoom", false)
  end
end

-- read values for trauma from campaign log if enabled
function getTrauma()
  valuesForDamageHorror = {
    Damage = { 0, 0, 0, 0 },
    Horror = { 0, 0, 0, 0 }
  }

  -- stop here if trauma import is disabled
  if not options["importTrauma"] then
    printToAll("Default values for health and sanity loaded.", "Yellow")
    return
  end

  -- get campaign log
  local campaignLog = getObjectsWithTag("CampaignLog")[1]
  if campaignLog ~= nil then
    loadTrauma(campaignLog)
  else
    printToAll("Campaign log not found in standard position!", "Yellow")
    printToAll("Default values for health and sanity loaded.", "Yellow")
  end
end

-- gets data from campaign log if possible
function loadTrauma(campaignLog)
  -- check if "returnTrauma" function exists to avoid calling nil
  local trauma = campaignLog.getVar("returnTrauma")

  if trauma ~= nil then
    printToAll("Trauma values found in campaign log!", "Green")
    trauma = campaignLog.call("returnTrauma")
    for i = 1, 8 do
      if i < 5 then
        valuesForDamageHorror.Damage[i] = trauma[i]
      else
        valuesForDamageHorror.Horror[i - 4] = trauma[i]
      end
    end
    loadingFailedBefore = false
  elseif loadingFailedBefore then
    printToAll("Trauma values could not be found in campaign log!", "Yellow")
    printToAll("Default values for health and sanity loaded.", "Yellow")
    loadingFailedBefore = false
  else
    -- set campaign log to first state
    if campaignLog.getStateId() ~= 1 then
      campaignLog = campaignLog.setState(1)
    end
    loadingFailedBefore = true

    -- small delay to account for potential state change
    Wait.time(function() loadTrauma(campaignLog) end, 0.1)
  end
end

-- remove drawn lines
function removeLines()
  if options["removeDrawnLines"] then
    printToAll("Removing global vector lines...", "White")
    Global.setVectorLines({})
  end
end

-- returns the mini cards back to the owning mat
function returnMiniCards()
  -- stop if playermats get tidied anyway
  if getOptionValue() then return end

  -- get mini cards in play
  local miniCardIndex = {}
  for _, obj in ipairs(getObjectsWithTag("Minicard")) do
    local notes = JSON.decode(obj.getGMNotes())
    if notes ~= nil and notes.id then
      miniCardIndex[notes.id] = obj
    end
  end

  -- move mini cards
  for _, matColor in ipairs(matColorList) do
    local data = PlayermatApi.getActiveInvestigatorData(matColor)
    if miniCardIndex[data.miniId] then
      local pos = PlayermatApi.transformLocalPosition(Vector(-1.36, 0, -0.625), matColor)
      miniCardIndex[data.miniId].setPosition(pos:setAt("y", 1.67))
    end
  end
end

-- discard all hand objects
function discardHands()
  if not getOptionValue() then return end
  for _, color in ipairs(matColorList) do
    local trash = GUIDReferenceApi.getObjectByOwnerAndType(color, "Trash")
    if trash then
      local hand = Player[PlayermatApi.getPlayerColor(color)].getHandObjects()
      for j = #hand, 1, -1 do
        trash.putObject(hand[j])
      end
    end
  end
end

-- resets hand size modifiers for Hand Helpers
function resetHandHelpers()
  for _, obj in pairs(GUIDReferenceApi.getObjectsByType("HandHelper")) do
    obj.call("resetHandSize")
  end
end

-- maybe ignore cards / decks on the tekelili helper
function maybeIgnoreTekeliliCards()
  local tekeliliHelper = getTekeliliHelper()
  if tekeliliHelper then
    removeIgnoreLater = SearchLib.onObject(tekeliliHelper, "isCardOrDeck")
    for _, obj in ipairs(removeIgnoreLater) do
      obj.addTag(IGNORE_TAG)
    end
  end
end

-- clean up for play area
function tidyPlayAreaCoroutine()
  CoroutineLib.yieldFrames(10)

  local trash = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  local playAreaZone = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")

  -- triggers an update to remove lines from helpers
  PlayAreaApi.rebuildConnectionList()

  -- reset the playarea image by not providing an image
  PlayAreaApi.updateSurface()

  if playAreaZone == nil then
    printToAll("Scripting zone for main play area could not be found!", "Red")
  elseif trash == nil then
    printToAll("Trashcan for main play area could not be found!", "Red")
  else
    for _, obj in ipairs(playAreaZone.getObjects()) do
      -- ignore these elements
      if obj.hasTag(IGNORE_TAG) == false
          and obj.locked == false
          and obj.interactable == true then
        CoroutineLib.yieldFrames(1)
        trash.putObject(obj)
      end
    end
  end

  printToAll("Tidying playermats and mythos area...", "White")
  CoroutineLib.start(tidyPlayerMatCoroutine)
end

-- clean up for the four playermats and the mythos area
function tidyPlayerMatCoroutine()
  local tekeliliHelper = getTekeliliHelper()

  if getOptionValue() then
    for _, matColor in ipairs(matColorList) do
      local trash = GUIDReferenceApi.getObjectByOwnerAndType(matColor, "Trash")
      if trash == nil then
        printToAll("Trashcan for " .. matColor .. " playermat could not be found! Skipping this playermat.", "Yellow")
      else
        CoroutineLib.yieldFrames(20)

        -- maybe store tekelili cards
        if tekeliliHelper then
          tekeliliHelper.call("storeTekelili", matColor)
        end

        -- parse playermat objects
        for _, obj in ipairs(PlayermatApi.searchAroundPlayermat(matColor)) do
          maybeTrashObject(obj, trash)
        end

        CoroutineLib.yieldFrames(5)

        -- maybe respawn tekelili cards
        if tekeliliHelper then
          tekeliliHelper.call("spawnStoredTekelili", matColor)
        end
      end
      Global.call("updateActionTrackerName", matColor)
    end

    -- reset "activeInvestigatorId" and "...class"
    PlayermatApi.setActiveInvestigatorData("All", { class = "Neutral", id = "00000", miniId = "00000-m" })
    PlayermatApi.updateTexture("All")

    CoroutineLib.yieldFrames(5)

    -- respawn action tokens
    PlayermatApi.spawnActionTokens("All")
  else
    -- perform a "pseudo" upkeep for cards on playermats
    for _, matColor in ipairs(matColorList) do
      for _, obj in ipairs(PlayermatApi.searchAroundPlayermat(matColor)) do
        if obj.hasTag("DoInUpkeep") and not obj.is_face_down then
          obj.call("doInUpkeep")
        end
      end
    end
  end

  -- mythos area cleanup
  local trash = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  if trash then
    for _, objectName in ipairs({ "MythosArea", "VictoryDisplay" }) do
      local object = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", objectName)
      if object then
        for _, searchObj in ipairs(SearchLib.onObject(object)) do
          maybeTrashObject(searchObj, trash)
        end
      end
    end
  end

  -- maybe remove ignore tag from cards / decks on the tekelili helper
  if removeIgnoreLater then
    for _, obj in ipairs(removeIgnoreLater) do
      if obj ~= nil then
        obj.removeTag(IGNORE_TAG)
      end
    end
    removeIgnoreLater = {}
  end

  -- reset spawned data
  TokenSpawnTrackerApi.resetAll()

  printToAll("Clean up completed!", "Green")
end

-- used to detect the "Tekeli-li Helper" for Edge of the Earth
function getTekeliliHelper()
  for _, obj in ipairs(getObjects()) do
    if obj ~= nil and obj.getName() == "Tekeli-li Helper" then
      return obj
    end
  end
  return nil
end

function maybeTrashObject(obj, trash)
  if obj.hasTag(IGNORE_TAG) then return end

  if obj.hasTag("Temporary") then
    trash.putObject(obj)
    return
  end

  if (not obj.locked or obj.hasTag("Investigator")) and obj.interactable then
    trash.putObject(obj)
  end
end

-- get value with respect to override value
function getOptionValue()
  -- don't clean up playermats if playing a prelude from the list
  if scenarioName and preludeList[scenarioName] then
    return false
  else
    return options["tidyPlayermats"]
  end
end
