local SearchLib = require("util/SearchLib")
local fontColor, lastRejectedName, lastSyncedName
local messageSent = false
local BACKGROUNDS = {
  {
    title     = "Ancestral Knowledge",
    id        = "07303",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/1915746489207287888/2F9F6F211ED0F98E66C9D35D93221E4C7FB6DD3C/",
    fontcolor = { 1, 1, 1 },
    icons     = true
  },
  {
    title     = "Astronomical Atlas",
    id        = "08067",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/1754695853007989004/9153BC204FC707AE564ECFAC063A11CB8C2B5D1E/",
    fontcolor = { 1, 1, 1 },
    icons     = true
  },
  {
    title     = "Backpack",
    id        = "04037",
    id2       = "53011",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2018212896278691928/F55BEFFC2540109C6333179532F583B367FF2EBC/",
    fontcolor = { 0, 0, 0 },
    icons     = false
  },
  {
    title     = "Bewitching",
    id        = "10079",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2342503480966345423/F2070B5479C814F35780373966D77D91767A97CC/",
    fontcolor = { 1, 1, 1 },
    icons     = false
  },
  {
    title     = "Binder's Jar",
    id        = "09089",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2021606446228642191/4C149527851C1DBB3015F93DE91667937A3F91DD/",
    fontcolor = { 1, 1, 1 },
    icons     = false
  },
  {
    title     = "Crystallizer of Dreams",
    id        = "06024",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/1915746489207280958/100F16441939E5E23818651D1EB5C209BF3125B9/",
    fontcolor = { 1, 1, 1 },
    icons     = true
  },
  {
    title     = "Diana Stanley",
    id        = "05004",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/1754695635919071208/1AB7222850201630826BFFBA8F2BD0065E2D572F/",
    fontcolor = { 1, 1, 1 },
    icons     = false
  },
  {
    title     = "George Barnaby",
    id        = "11017",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2369545213994757925/F90DA09AE75113984112B4AA2D1330DB35507D38/",
    fontcolor = { 1, 1, 1 },
    icons     = true
  },
  {
    title     = "Gloria Goldberg",
    id        = "98019",
    id2       = "11014",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/1754695635919102502/453D4426118C8A6DE2EA281184716E26CA924C84/",
    fontcolor = { 1, 1, 1 },
    icons     = false
  },
  {
    title     = "Hunting Jacket",
    id        = "10121",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2450601762292308846/0E171E3F3F0D016EEC574F3CA25738A46D95595C/",
    fontcolor = { 1, 1, 1 },
    icons     = false
  },
  {
    title     = "Ikiaq",
    id        = "07267",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2021606446228198966/5A408D8D760221DEA164E986B9BE1F79C4803071/",
    fontcolor = { 1, 1, 1 },
    icons     = false
  },
  {
    title     = "Katja Eastbank",
    id        = "09114",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2021606446228203475/62EEE12F4DB1EB80D79B087677459B954380215F/",
    fontcolor = { 1, 1, 1 },
    icons     = false
  },
  {
    title     = "Ravenous",
    id        = "89002",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2021606446228208075/EAC598A450BEE504A7FE179288F1FBBF7ABFA3E0/",
    fontcolor = { 0, 0, 0 },
    icons     = false
  },
  {
    title     = "Sefina Rousseau",
    id        = "03003",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/1754695635919099826/3C3CBFFAADB2ACA9957C736491F470AE906CC953/",
    fontcolor = { 0, 0, 0 },
    icons     = false
  },
  {
    title     = "Stick to the Plan",
    id        = "03264",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2018214163838897493/8E38B96C5A8D703A59009A932432CBE21ABE63A2/",
    fontcolor = { 1, 1, 1 },
    icons     = false
  },
  {
    title     = "Subject 5U-21",
    id        = "89001",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/2021606446228199363/CE43D58F37C9F48BDD6E6E145FE29BADEFF4DBC5/",
    fontcolor = { 1, 1, 1 },
    icons     = false
  },
  {
    title     = "Wooden Sledge",
    id        = "08615",
    url       = "https://steamusercontent-a.akamaihd.net/ugc/1750192233783143973/D526236AAE16BDBB98D3F30E27BAFC1D3E21F4AC/",
    fontcolor = { 0, 0, 0 },
    icons     = false
  }
}

-- save state and options to restore onLoad
function onSave() return JSON.encode({ cardsInBag, showIcons, lastSyncedName }) end

function updateSave()
  self.script_state = onSave()
end

-- load variables and create context menu
function onLoad(savedData)
  local loadedData = JSON.decode(savedData)
  cardsInBag       = loadedData[1]
  showIcons        = loadedData[2]
  lastSyncedName   = loadedData[3]
  fontColor        = getFontColor()
  recreateButtons()

  self.addContextMenuItem("Select image", selectImage)
  self.addContextMenuItem("Toggle skill icons", function(color)
    showIcons = not showIcons
    printToColor("Show skill icons of cards: " .. tostring(showIcons), color, "White")
    refresh()
  end)
  self.addContextMenuItem("Draw all cards", function(color) self.deal(self.getQuantity(), color) end)
end

function getLastSyncedName()
  return lastSyncedName
end

-- gets the font color based on background url
function getFontColor()
  local customInfo = self.getCustomObject()
  for i = 1, #BACKGROUNDS do
    if BACKGROUNDS[i].url == customInfo.diffuse then
      return BACKGROUNDS[i].fontcolor
    end
  end
  return { 1, 1, 1 }
end

-- attempt to load image from below card when dropped
function onDrop(playerColor)
  local searchResult = SearchLib.belowPosition(self.getPosition(), "isCard")
  if #searchResult == 0 then
    self.setScale({ 0.8, 1, 0.8 })
    return
  end

  self.setScale({ 0.57, 0.65, 0.57 })

  -- assume the first eligible object as intended sync object
  local syncObj = searchResult[1]
  local syncName = syncObj.getName()
  if syncName ~= getLastSyncedName() then
    local md = JSON.decode(syncObj.getGMNotes()) or {}

    local found = loadDataFromMetadata({
      md           = md,
      playerColor  = playerColor,
      syncName     = syncName,
      syncRotation = syncObj.getRotation()
    })

    if not found then
      printToColor("Didn't find background for '" .. syncName .. "'!", playerColor, "Orange")
    end
  else
    if not messageSent then
      printToColor("Background is already '" .. syncName .. "'!", playerColor, "Yellow")
      messageSent = true
    end
  end
end

function loadDataFromMetadata(params)
  local md           = params.md
  local syncRotation = params.syncRotation
  local playerColor  = params.playerColor
  local syncName     = params.syncName

  -- loop through background table
  for _, bgInfo in ipairs(BACKGROUNDS) do
    if bgInfo.id == md.id or bgInfo.id2 == md.id then
      if syncName and playerColor then
        printToColor("Background for '" .. syncName .. "' loaded!", playerColor, "Green")
      end
      showIcons = bgInfo.icons

      -- maybe update rotation
      if syncRotation then
        if md.type == "Investigator" then
          syncRotation.y = syncRotation.y + 90
        end
        self.setRotation(self.getRotation():setAt("y", syncRotation.y))
      end

      -- update the image
      lastSyncedName = syncName or bgInfo.title
      updateImage(bgInfo.url)
      return true
    end
  end
  return false
end

-- called by context menu to change background image
function selectImage(color)
  -- generate list of options
  local options = {}
  for i = 1, #BACKGROUNDS do
    options[i] = BACKGROUNDS[i].title
  end

  -- prompt user to select option
  Player[color].showOptionsDialog("Select image:", options, 1, function(optionText, optionIndex)
    lastSyncedName = optionText
    showIcons = BACKGROUNDS[optionIndex].icons
    updateImage(BACKGROUNDS[optionIndex].url)
  end)
end

-- sets background to the provided URL
function updateImage(url)
  messageSent = false
  updateSave()
  local customInfo = self.getCustomObject()
  customInfo.diffuse = url
  self.setCustomObject(customInfo)
  self.reload()
end

-- only allow cards to enter, split decks and reject other objects
function tryObjectEnter(object)
  -- block repeated collisions
  if object.getName() == lastRejectedName then return end

  if object.type == "Deck" then
    local pos = self.getPosition()
    for i = 1, #object.getObjects() do
      local card = object.takeObject({ position = pos + Vector(0, 0.1 * i, 0), smooth = false })
      findCard(card.getGUID(), card.getName(), card.getGMNotes())
      self.putObject(card)
    end
    recreateButtons()
    return false
  elseif object.type ~= "Card" then
    broadcastToAll("The 'Attachment Helper' only supports cards.", "Orange")
    lastRejectedName = object.getName()
    Wait.time(function() lastRejectedName = nil end, 1)
    return false
  else
    findCard(object.getGUID(), object.getName(), object.getGMNotes())
    recreateButtons()
    return true
  end
end

-- removes leaving cards from the "cardInBag" table
function onObjectLeaveContainer(container, object)
  if container == self then
    local guid = object.getGUID()
    local found = false
    for i, card in ipairs(cardsInBag) do
      if card.guid == guid then
        table.remove(cardsInBag, i)
        found = true
        break
      end
    end

    if found ~= true then
      local name = object.getName()
      for i, card in ipairs(cardsInBag) do
        if card.name == name then
          table.remove(cardsInBag, i)
          break
        end
      end
    end
    recreateButtons()
  end
end

-- refreshes displayed buttons based on contained cards
function refresh()
  cardsInBag = {}
  for _, object in ipairs(self.getObjects()) do
    findCard(object.guid, object.name, object.gm_notes)
  end
  recreateButtons()
end

-- gets cost and icons for a card
function findCard(guid, name, GMNotes)
  local metadata = JSON.decode(GMNotes) or {}
  local buttonLabel = name or "unnamed"
  local hasIcons = false

  if metadata.cost then
    -- need the additional spaces next to the brackets to stop TTS from interpreting this as color code for two digit costs
    if metadata.cost > 9 then
      buttonLabel = "[ " .. metadata.cost .. " ] " .. buttonLabel
    else
      buttonLabel = "[" .. metadata.cost .. "] " .. buttonLabel
    end
  end

  if showIcons then
    local iconTypes = { "Wild", "Willpower", "Intellect", "Combat", "Agility" }
    for _, iconName in ipairs(iconTypes) do
      local mdName = string.lower(iconName) .. "Icons"
      if metadata[mdName] ~= nil then
        if hasIcons == false then
          buttonLabel = buttonLabel .. "\n"
          hasIcons = true
        else
          buttonLabel = buttonLabel .. " "
        end
        buttonLabel = buttonLabel .. iconName .. ": " .. metadata[mdName]
      end
    end
  end
  table.insert(cardsInBag, { buttonLabel = buttonLabel, hasIcons = hasIcons, name = name, guid = guid })
end

-- recreates buttons with up-to-date labels
function recreateButtons()
  self.clearButtons()
  local verticalPosition = 1.65

  -- create buttons for the last 7 cards that entered
  for i = #cardsInBag, 1, -1 do
    if (i + 7) == #cardsInBag then
      printToAll("Only displaying buttons for the last 7 cards.", "Orange")
      break
    end

    local card = cardsInBag[i]

    -- click function
    local funcName = "removeCard" .. card.guid
    self.setVar(funcName, function() removeCard(card.guid) end)

    -- font size
    local fontSize = 100
    if card.hasIcons or string.len(card.buttonLabel) > 20 then
      fontSize = 75
    end

    -- button creation
    self.createButton({
      label          = card.buttonLabel,
      click_function = funcName,
      function_owner = self,
      position       = { 0, -0.1, verticalPosition },
      height         = 200,
      width          = 1200,
      font_size      = fontSize
    })
    verticalPosition = verticalPosition - 0.485
  end

  local countLabel = #cardsInBag
  local fontSize = 250
  if #cardsInBag == 0 then
    countLabel = "Attachment Helper"
    fontSize   = 150
  end

  self.createButton({
    label          = tostring(countLabel),
    click_function = "none",
    function_owner = self,
    position       = { 0, -0.1, -1.7 },
    height         = 0,
    width          = 0,
    font_size      = fontSize,
    font_color     = fontColor
  })
end

-- click-function for buttons to take a card out of the bag
function removeCard(cardGUID)
  self.takeObject({
    guid = cardGUID,
    rotation = self.getRotation(),
    position = self.getPosition() + Vector(0, 0.25, 0),
    callback_function = function(obj) obj.resting = true end
  })
end
