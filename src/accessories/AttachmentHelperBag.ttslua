local GUIDReferenceApi = require("core/GUIDReferenceApi")
local SearchLib        = require("util/SearchLib")

function onLoad()
  -- search all existing tagged cards and add context menu
  for _, obj in ipairs(getObjects()) do
    if obj.hasTag("CardWithAttachmentHelper") then
      maybeAddContextMenu(obj)
    end
  end
end

function onObjectSpawn(obj)
  if obj.hasTag("CardWithAttachmentHelper") then
    maybeAddContextMenu(obj)
  end
end

function maybeAddContextMenu(obj)
  -- We're using a variable to track whether the context menu is present
  -- since this will also not persist saving / loading, just like the context menu entry.
  if not obj.getVar("hasAttachmentHelperContextMenu") then
    obj.addContextMenuItem("Spawn Helper", spawnAttachmentHelper)
    obj.setVar("hasAttachmentHelperContextMenu", true)
  end
end

function spawnAttachmentHelper(playerColor, _, card)
  local bag = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "AttachmentHelper")
  if bag == nil then
    broadcastToColor("Attachment Helper bag couldn't be found!", playerColor, "Red")
    return
  end

  local position = card.getPosition() -- on top of the card and centered
  local rotation = card.getRotation()

  if card.hasTag("Investigator") then
    position = card.positionToWorld(Vector(0.18, 0, -0.7)) -- slightly to the left of the investigator card
    rotation = rotation + Vector(0, 90, 0)
  end

  for _, obj in ipairs(SearchLib.atPosition(position)) do
    if obj.getName() == "Attachment Helper" then
      broadcastToColor("There is already an attachment helper on this card.", playerColor, "White")
      return
    end
  end

  local md = JSON.decode(card.getGMNotes()) or {}

  local helper = bag.takeObject({
    position = position:setAt("y", 1.8),
    rotation = rotation,
    smooth   = false
  })

  helper.setScale({ 0.57, 0.65, 0.57 })

  -- only passing the ID since we have cards with type "Investigator" handled already
  Wait.frames(function() helper.call("loadDataFromMetadata", { md = { id = md.id } }) end, 3)
end
