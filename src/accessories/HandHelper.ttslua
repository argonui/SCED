local PlayermatApi    = require("playermat/PlayermatApi")

-- forward declaration of variables that are used across functions
local matColor, handColor, newModifier, modifiedBase

-- cache for decoded metadata
local metadataCache   = {}

-- description before modifications
local baseDescription = "Displays your hand size and maximum hand size. Right click for options."

local handModifiers   = {
  ["60205"] = 1,  -- Arcane Enlightenment
  ["02020"] = 2,  -- Laboratory Assistant
  ["60202"] = 2,  -- Vault of Knowledge
  ["03041"] = -5, -- Drawing the Sign
  ["71023"] = 2   -- Dr. Mya Badry
}

function onLoad()
  -- index 0: button as hand size label
  self.createButton({
    function_owner = self,
    hover_color    = "White",
    label          = 0,
    click_function = "none",
    position       = Vector(0, 0.11, 0.15),
    height         = 0,
    width          = 0,
    font_size      = 1000,
    font_color     = "White"
  })

  -- index 1: button as max handsize label
  self.createButton({
    function_owner = self,
    hover_color    = "White",
    label          = 8,
    click_function = "none",
    position       = Vector(0.65, 0.11, -0.65),
    height         = 0,
    width          = 0,
    font_size      = 320,
    font_color     = "White"
  })

  -- add right-click menu options
  self.addContextMenuItem("Set Hand Size", setBaseHandSize)
  self.addContextMenuItem("Modify Hand Size", addHandSizeModifier)
  self.addContextMenuItem("Reset to Default", resetHandSize)

  -- make sure this part executes after the playermats are loaded
  Wait.time(function()
    updateColors()

    -- start loop to update card count
    Wait.time(updateValue, 1, -1)
  end, 1)
end

-- updates colors when object is dropped somewhere
function onDrop() updateColors() end

-- updates the matcolor and handcolor variable
function updateColors()
  matColor = PlayermatApi.getMatColorByPosition(self.getPosition())
  handColor = PlayermatApi.getPlayerColor(matColor)
  self.setName(handColor .. " Hand Helper")
end

function getHandSizeModifier()
  desCount = nil
  local modSize = newModifier or 0
  local deckAreaObjects = PlayermatApi.getDeckAreaObjects(matColor)

  -- look for  cards around playermat that modify hand size (also store value from DES if found)
  for _, obj in ipairs(PlayermatApi.searchAroundPlayermat(matColor, "isCard")) do
    if not obj.is_face_down and
        obj ~= deckAreaObjects.draw and
        obj ~= deckAreaObjects.topCard and
        obj ~= deckAreaObjects.discard then
      -- handle specific cards
      local md = getMetadata(obj)
      modSize = modSize + (handModifiers[md.id] or 0)

      -- store DES value in a global variable for later
      if md.id == "06159" then
        desCount = obj.call("updateValue")
      end
    end
  end
  return modSize
end

function setBaseHandSize(player)
  Player[player].showInputDialog("Set Base Max Hand Size", "5",
    function(text) modifiedBase = text end
  )
end

function addHandSizeModifier(player)
  Player[player].showInputDialog("Add Max Hand Size Modifier (e.g. for Tarot reading)", "-2",
    function(text) newModifier = (newModifier or 0) + tonumber(text) end
  )
end

function resetHandSize()
  newModifier = nil
  modifiedBase = nil
end

function getMetadata(obj)
  local name = obj.getName()
  if metadataCache[name] == nil then
    metadataCache[name] = JSON.decode(obj.getGMNotes()) or {}
  end
  return metadataCache[name]
end

function getInvestigatorHandSize()
  local activeInvestigatorData = PlayermatApi.getActiveInvestigatorData(matColor)
  if activeInvestigatorData == nil then return 8 end
  -- Patrice Hathaway has a base handsize of 5
  if activeInvestigatorData.id == "06005" then
    return 5
  elseif activeInvestigatorData.id == "11017" then
    -- if George Barnaby, look for attachment helper nearby set to his state
    for _, obj in ipairs(PlayermatApi.searchAroundPlayermat(matColor)) do
      if obj.getName() == "Attachment Helper" then
        if obj.call("getLastSyncedName") == "George Barnaby" then
          return obj.getQuantity()
        end
      end
    end
    return 5
  end
  return 8
end

-- count cards in hand
function updateValue()
  -- update colors if handColor doesn't own a handzone
  if Player[handColor].getHandCount() == 0 then
    updateColors()
  end

  -- if one of the colors is undefined, then end here
  if matColor == nil or handColor == nil then return end

  -- if there is still no handzone, then end here
  if Player[handColor].getHandCount() == 0 then return end

  -- count cards in hand
  local hand = Player[handColor].getHandObjects()
  local size = 0
  local maxSize = modifiedBase or getInvestigatorHandSize()

  for _, obj in pairs(hand) do
    if obj.type == "Card" then
      size = size + 1
      local md = getMetadata(obj)
      if md.id == "10109" then -- Pelt Shipment
        maxSize = maxSize - 3
      end
    end
  end

  local handSizeModifier = getHandSizeModifier()
  local maxSizeLabel = maxSize + handSizeModifier
  local modifierText = (handSizeModifier > -1 and "+" or "") .. handSizeModifier

  -- if DES is around, use it for determining the label color
  local actualHandSize = desCount or size
  local handSizeColor = "White"
  if actualHandSize > maxSizeLabel then
    handSizeColor = "Red"
  elseif actualHandSize == maxSizeLabel then
    handSizeColor = "Orange"
  elseif actualHandSize == maxSizeLabel - 1 then
    handSizeColor = "Yellow"
  end

  self.setDescription(baseDescription .. "\nBase maximum hand size is " .. maxSize .. ".\nCurrent total modifiers are " .. modifierText .. ".")

  if maxSizeLabel > 9 or size > 9 then
    self.editButton({ index = 1, font_size = 220, position = { .65, .11, -.7 } })
  else
    self.editButton({ index = 1, font_size = 320, position = { .65, .11, -.65 } })
  end

  -- update button label and color
  self.editButton({ index = 0, font_color = handSizeColor, label = size })
  self.editButton({ index = 1, label = math.max(maxSizeLabel, 0) })
end
