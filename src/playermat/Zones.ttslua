-- Sets up and returns coordinates for all possible spawn zones. Because Lua assigns tables by reference
-- and there is no built-in function to copy a table this is relatively brute force.
--
-- Positions are all relative to the player mat, and most are consistent. The
-- exception are the SetAside# zones, which are placed to the left of the mat
-- for White/Green, and the right of the mat for Orange/Red.
--
-- Investigator: Investigator card area.
-- Minicard: Placement for the investigator's minicard, just above the player mat
-- Deck, Discard: Standard locations for the deck and discard piles.
-- Blank1: used for assets that start in play (e.g. Duke)
-- Tarot, Hand1, Hand2, Ally, Blank4, Accessory, Arcane1, Arcane2, Body: Asset slot positions
-- Threat[1-4]: Threat area slots. Threat[1-3] correspond to the named threat area slots, and Threat4 is the blank threat area slot.
-- SetAside[1-3]: Column closest to the player mat, with 1 at the top and 3 at the bottom.
-- SetAside[4-6]: Column farther away from the mat, with 4 at the top and 6 at the bottom.
-- SetAside1: Permanent cards
-- SetAside2: Bonded cards
-- SetAside3: Ancestral Knowledge
-- SetAside4: Upgrade sheets for customizable cards
-- SetAside5: Hunch Deck for Joe Diamond // Summoned Servitor Minicard
-- SetAside6: Underworld Market
-- AboveSetAside: Investigator specific object
-- BelowSetAside: Investigator specific object

do
  local PlayermatApi                        = require("playermat/PlayermatApi")
  local Zones                               = {}

  -- local coordinates for each playermat
  local commonZones                         = {}
  commonZones["Investigator"]               = Vector(-1.177, 0, 0.002)
  commonZones["Deck"]                       = Vector(-1.82, 0, 0)
  commonZones["Discard"]                    = Vector(-1.82, 0, 0.61)
  commonZones["Ally"]                       = Vector(-0.616, 0, 0.024)
  commonZones["Body"]                       = Vector(-0.631, 0, 0.551)
  commonZones["Hand1"]                      = Vector(0.217, 0, 0.035)
  commonZones["Hand2"]                      = Vector(-0.177, 0, 0.032)
  commonZones["Arcane1"]                    = Vector(0.212, 0, 0.559)
  commonZones["Arcane2"]                    = Vector(-0.174, 0, 0.551)
  commonZones["Tarot"]                      = Vector(0.602, 0, 0.033)
  commonZones["Accessory"]                  = Vector(0.605, 0, 0.555)
  commonZones["Blank1"]                     = Vector(1.758, 0, 0.040)
  commonZones["Blank2"]                     = Vector(1.754, 0, 0.563)
  commonZones["Blank3"]                     = Vector(1.371, 0, 0.038)
  commonZones["Blank4"]                     = Vector(1.371, 0, 0.558)
  commonZones["Blank5"]                     = Vector(0.98, 0, 0.035)
  commonZones["Blank6"]                     = Vector(0.977, 0, 0.556)
  commonZones["Threat1"]                    = Vector(-0.911, 0, -0.625)
  commonZones["Threat2"]                    = Vector(-0.454, 0, -0.625)
  commonZones["Threat3"]                    = Vector(0.002, 0, -0.625)
  commonZones["Threat4"]                    = Vector(0.459, 0, -0.625)
  commonZones["Minicard"]                   = Vector(-0.911, 0, -0.625)

  -- position of tokens and related objects
  commonZones["Damage"]                     = Vector(-1.062, 0.07, 0.384)
  commonZones["Horror"]                     = Vector(-1.38, 0.07, 0.44)
  commonZones["Clues"]                      = Vector(-1.043, -0.45, 0.688)
  commonZones["Clue Counter"]               = Vector(-1.013, 0.07, 0.692)
  commonZones["Resources"]                  = Vector(-1.319, 0.07, 0.749)
  commonZones["Investigator Skill Tracker"] = Vector(-1.089, 0.081, -1.128)
  commonZones["Token Draw Dummy"]           = Vector(-1.851, -0.15, -0.739)
  commonZones["TokenDiscardZone"]           = Vector(0, -0.2, 1.555)
  commonZones["HandZone"]                   = Vector(0, 4.55, 1.555)

  -- local coordinates for white / green (inverted X for orange / red)
  local mirrorZones              = {}
  mirrorZones["SetAside1"]       = Vector(2.35, 0, -0.520)
  mirrorZones["SetAside2"]       = Vector(2.35, 0, 0.042)
  mirrorZones["SetAside3"]       = Vector(2.35, 0, 0.605)
  mirrorZones["UnderSetAside3"]  = Vector(2.50, 0, 0.805)
  mirrorZones["SetAside4"]       = Vector(2.78, 0, -0.520)
  mirrorZones["SetAside5"]       = Vector(2.78, 0, 0.042)
  mirrorZones["SetAside6"]       = Vector(2.78, 0, 0.605)
  mirrorZones["UnderSetAside6"]  = Vector(2.93, 0, 0.805)
  mirrorZones["AboveSetAside"]   = Vector(2.35, 0, -1.069)
  mirrorZones["BelowSetAside"]   = Vector(2.85, 0, 1.650)

  -- position of tokens and related objects
  mirrorZones["Trash"]           = Vector(-1.851, 0.1, -1.131)
  mirrorZones["Dynamic tokens"]  = Vector(-2.325, 0.13, -1.09)
  mirrorZones["Resource tokens"] = Vector(-2.325, 0.13, -0.79)
  mirrorZones["Damage tokens"]   = Vector(-2.325, 0.13, -0.49)
  mirrorZones["Horror tokens"]   = Vector(-2.325, 0.13, -0.19)
  mirrorZones["Clue tokens"]     = Vector(-2.325, 0.13, 0.11)
  mirrorZones["Doom tokens"]     = Vector(-2.325, 0.13, 0.41)
  mirrorZones["Token Remover"]   = Vector(-2.325, 0.031, 0.71)

  local zoneData                 = {}
  zoneData["White"]              = {}
  zoneData["Orange"]             = {}

  -- copy common coordinates
  for zoneName, zonePos in pairs(commonZones) do
    zoneData["White"][zoneName]  = zonePos
    zoneData["Orange"][zoneName] = zonePos
  end

  -- copy mirrored coordinates
  for zoneName, zonePos in pairs(mirrorZones) do
    zoneData["White"][zoneName]  = zonePos
    zoneData["Orange"][zoneName] = zonePos * Vector(-1, 1, 1)
  end

  -- Green positions are the same as White and Red the same as Orange
  zoneData["Red"]   = zoneData["Orange"]
  zoneData["Green"] = zoneData["White"]

  -- Gets the global position for the given zone on the specified player mat.
  ---@param matColor string Color name of the player mat to get the zone position for (e.g. "Red")
  ---@param zoneName string Name of the zone to get the position for. See Zones object documentation for a list of valid zones.
  ---@return tts__Vector|nil: Global position table, or nil if an invalid player color or zone is specified
  function Zones.getZonePosition(matColor, zoneName)
    if zoneData[matColor] then
      return PlayermatApi.transformLocalPosition(zoneData[matColor][zoneName], matColor)
    end
    return nil
  end

  -- Return the global rotation for a card on the given player mat, based on its zone.
  ---@param matColor string Color name of the player mat to get the rotation for (e.g. "Red")
  ---@param zoneName string Name of the zone. See Zones object documentation for a list of valid zones.
  ---@return tts__Vector: Global rotation vector for the given card. This will include the
  --     Y rotation to orient the card on the given player mat as well as a
  --     Z rotation to place the card face up or face down.
  function Zones.getDefaultCardRotation(matColor, zoneName)
    local cardRotation = PlayermatApi.returnRotation(matColor)
    if zoneName == "Deck" or zoneName == "UnderSetAside3" or zoneName == "UnderSetAside6" then
      cardRotation = cardRotation:setAt("z", 180)
    end
    return cardRotation
  end

  function Zones.getLocalZoneData(matColor, zoneName)
    if zoneData[matColor] then
      return zoneData[matColor][zoneName]
    end
    return nil
  end

  return Zones
end
