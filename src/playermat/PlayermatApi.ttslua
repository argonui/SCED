do
  local PlayermatApi = {}
  local GUIDReferenceApi = require("core/GUIDReferenceApi")
  local SearchLib = require("util/SearchLib")
  local localInvestigatorPosition = { x = -1.17, y = 1, z = -0.01 }

  -- Convenience function to look up a mat's object by color, or get all mats.
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@return table: Single-element if only single playermat is requested
  local function getMatForColor(matColor)
    if matColor == "All" then
      return GUIDReferenceApi.getObjectsByType("Playermat") or {}
    else
      return { matColor = GUIDReferenceApi.getObjectByOwnerAndType(matColor, "Playermat") }
    end
  end

  -- Returns the color of the closest playermat
  ---@param startPos table Starting position to get the closest mat from
  function PlayermatApi.getMatColorByPosition(startPos)
    local result, smallestDistance
    for matColor, mat in pairs(getMatForColor("All")) do
      local distance = Vector.between(startPos, mat.getPosition()):magnitude()
      if smallestDistance == nil or distance < smallestDistance then
        smallestDistance = distance
        result = matColor
      end
    end
    return result
  end

  -- Returns the color of the player's hand that is seated next to the playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.getPlayerColor(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.getVar("playerColor")
    end
  end

  -- Returns the color of the playermat that owns the playercolor's hand
  ---@param handColor string Color of the playermat
  function PlayermatApi.getMatColor(handColor)
    for matColor, mat in pairs(getMatForColor("All")) do
      local playerColor = mat.getVar("playerColor")
      if playerColor == handColor then
        return matColor
      end
    end
    return nil
  end

  -- gets the slot data for the playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.getSlotData(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.getTable("slotData")
    end
  end

  -- sets the slot data for the playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  ---@param newSlotData table New slot data for the playermat
  function PlayermatApi.loadSlotData(matColor, newSlotData)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.setTable("slotData", newSlotData)
      mat.call("updateSave")
      mat.call("updateSlotSymbols")
      return
    end
  end

  -- Performs a search of the deck area of the requested playermat and returns the result as table
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.getDeckAreaObjects(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("getDeckAreaObjects")
    end
  end

  -- Flips the top card of the deck (useful after deck manipulation for Norman Withers)
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.flipTopCardFromDeck(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("flipTopCardFromDeck")
    end
  end

  -- Returns the position of the discard pile of the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.getDiscardPosition(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("returnGlobalDiscardPosition")
    end
  end

  -- Returns the position of the draw pile of the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.getDrawPosition(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("returnGlobalDrawPosition")
    end
  end

  -- Transforms a local position into a global position
  ---@param localPos table Local position to be transformed
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.transformLocalPosition(localPos, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.positionToWorld(localPos)
    end
  end

  -- Returns the rotation of the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.returnRotation(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.getRotation()
    end
  end

  -- Returns a table with spawn data (position and rotation) for a helper object
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param helperName string Name of the helper object
  function PlayermatApi.getHelperSpawnData(matColor, helperName)
    local resultTable = {}
    local localPositionTable = {
      ["Clickable Clue Counter"] = Vector(-1.013, 0.09, 0.692),
      ["Hand Helper"]            = Vector(-0.055, 0.03, -1.132),
      ["Search Assistant"]       = Vector(-0.340, 0.03, -1.132)
    }
    local localRotationTable = {
      ["Clickable Clue Counter"] = Vector(0, 10, 0),
      ["Hand Helper"]            = Vector(0, 0, 0),
      ["Search Assistant"]       = Vector(0, 0, 0)
    }

    for color, mat in pairs(getMatForColor(matColor)) do
      resultTable[color] = {
        position = mat.positionToWorld(localPositionTable[helperName]),
        rotation = mat.getRotation() + localRotationTable[helperName]
      }
    end
    return resultTable
  end

  -- Triggers the Upkeep for the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param playerColor string Color of the calling player (for messages)
  function PlayermatApi.doUpkeepFromHotkey(matColor, playerColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("doUpkeepFromHotkey", playerColor)
    end
  end

  -- Handles discarding for the requested playermat for the provided list of objects
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  ---@param objList table List of objects to discard
  function PlayermatApi.discardListOfObjects(matColor, objList)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("discardListOfObjects", objList)
    end
  end

  -- Gets data about the active investigator
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.getActiveInvestigatorData(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("getActiveInvestigatorData")
    end
  end

  -- Gets data about the active investigator
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param newData table New active investigator data (class and id)
  function PlayermatApi.setActiveInvestigatorData(matColor, newData)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("setActiveInvestigatorData", newData)
    end
  end

  -- Returns the position for encounter card drawing
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  ---@param stack boolean If true, returns the leftmost position instead of the first empty from the right
  function PlayermatApi.getEncounterCardDrawPosition(matColor, stack)
    for _, mat in pairs(getMatForColor(matColor)) do
      return Vector(mat.call("getEncounterCardDrawPosition", stack))
    end
  end

  -- Sets the requested playermat's snap points to limit snapping to matching card types or not.  If
  -- matchTypes is true, the main card slot snap points will only snap assets, while the
  -- investigator area point will only snap Investigators.  If matchTypes is false, snap points will
  -- be reset to snap all cards.
  ---@param matchCardTypes boolean Whether snap points should only snap for the matching card types
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.setLimitSnapsByType(matchCardTypes, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("setLimitSnapsByType", matchCardTypes)
    end
  end

  -- Sets the requested playermat's draw 1 button to visible
  ---@param isDrawButtonVisible boolean Whether the draw 1 button should be visible or not
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.showDrawButton(isDrawButtonVisible, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("showDrawButton", isDrawButtonVisible)
    end
  end

  -- Updates clue counts to account for clickable clue counters
  ---@param showCounter boolean Whether the clickable counter should be present or not
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.clickableClues(showCounter, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("clickableClues", showCounter)
    end
  end

  -- Toggles the use of class textures for the requested playermat
  ---@param state boolean Whether the class texture should be used or not
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.useClassTexture(state, matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("useClassTexture", state)
    end
  end

  -- updates the texture of the playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param overrideName? string Force a specific texture
  function PlayermatApi.updateTexture(matColor, overrideName)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("updateTexture", overrideName)
    end
  end

  -- Removes all clues (to the trash for tokens and counters set to 0) for the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.removeClues(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("removeClues")
    end
  end

  -- Reports the clue count for the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.getClueCount(matColor)
    local count = 0
    for _, mat in pairs(getMatForColor(matColor)) do
      count = count + (mat.call("getClueCount") or 0)
    end
    return count
  end

  -- Reports the doom count for the requested playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.getDoomCount(matColor)
    local count = 0
    for _, mat in pairs(getMatForColor(matColor)) do
      count = count + (mat.call("getDoomCount") or 0)
    end
    return count
  end

  -- Updates the specified owned counter
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param type string Counter to target
  ---@param newValue number Value to set the counter to
  ---@param modifier number If newValue is not provided, the existing value will be adjusted by this modifier
  function PlayermatApi.updateCounter(matColor, type, newValue, modifier)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("updateCounter", { type = type, newValue = newValue, modifier = modifier })
    end
  end

  -- Triggers the draw function for the specified playermat
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param number number Amount of cards to draw
  function PlayermatApi.drawCardsWithReshuffle(matColor, number)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("drawCardsWithReshuffle", number)
    end
  end

  -- Returns the resource counter amount
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  ---@param type string Counter to target
  function PlayermatApi.getCounterValue(matColor, type)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("getCounterValue", type)
    end
  end

  -- Returns a list of mat colors that have an investigator placed
  function PlayermatApi.getUsedMatColors()
    local usedColors = {}
    for matColor, mat in pairs(getMatForColor("All")) do
      local searchPos = mat.positionToWorld(localInvestigatorPosition)
      local searchResult = SearchLib.atPosition(searchPos, "isCardOrDeck")
      if #searchResult > 0 then
        table.insert(usedColors, matColor)
      end
    end
    return usedColors
  end

  -- Returns a list of investigator card objects
  function PlayermatApi.getUsedInvestigatorCards()
    local usedCards = {}
    for matColor, mat in pairs(getMatForColor("All")) do
      local searchPos = mat.positionToWorld(localInvestigatorPosition)
      local searchResult = SearchLib.atPosition(searchPos, "isCardOrDeck")
      if #searchResult > 0 then
        usedCards[matColor] = searchResult[1]
      end
    end
    return usedCards
  end

  -- Returns investigator name
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.getInvestigatorName(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      local searchPos = mat.positionToWorld(localInvestigatorPosition)
      local searchResult = SearchLib.atPosition(searchPos, "isCardOrDeck")
      if #searchResult == 1 then
        return searchResult[1].getName()
      end
    end
    return ""
  end

  -- Resets the specified skill tracker to "1, 1, 1, 1"
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.resetSkillTracker(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("resetSkillTracker")
    end
  end

  -- Updates the XML for the slot symbols based on the slotData table
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.updateSlotSymbols(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("updateSlotSymbols")
    end
  end

  -- Finds all objects on the playermat and associated set aside zone and returns a table
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param filter? string Name of the filte function (see util/SearchLib)
  function PlayermatApi.searchAroundPlayermat(matColor, filter)
    local objList = {}
    for _, mat in pairs(getMatForColor(matColor)) do
      for _, obj in ipairs(mat.call("searchAroundSelf", filter)) do
        table.insert(objList, obj)
      end
    end
    return objList
  end

  -- Discard a non-hidden card from the corresponding player's hand
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.doDiscardOne(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("doDiscardOne")
    end
  end

  -- Spawns the regular action tokens
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  function PlayermatApi.spawnActionTokens(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      mat.call("spawnActionTokens")
    end
  end

  -- Triggers the metadata sync for all playermats
  function PlayermatApi.syncAllCustomizableCards()
    for _, mat in pairs(getMatForColor("All")) do
      mat.call("syncAllCustomizableCards")
    end
  end

  -- Gets the value of the "Use Resource Counters" option that's set in the mat's option panel
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  function PlayermatApi.getResourceCounterOption(matColor)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("getResourceCounterOption")
    end
  end

  -- Gets the exhaust rotation that's set in the mat's option panel
  ---@param matColor string Color of the playermat - White, Orange, Green or Red (does not support "All")
  ---@param convertToGlobal? boolean True if the global (Vector) rotation is requested (otherwise just local Y-rotation)
  function PlayermatApi.getExhaustRotation(matColor, convertToGlobal)
    for _, mat in pairs(getMatForColor(matColor)) do
      return mat.call("getExhaustRotation", convertToGlobal)
    end
  end

  -- moves + rotates a playermat (and related objects)
  ---@param matColor string Color of the playermat - White, Orange, Green, Red or All
  ---@param position? table New position for the playermat
  ---@param rotationY? number New y-rotation for the playermat (X and Z will be 0)
  ---@param positionOffset? table Positional offset for the playermat
  function PlayermatApi.moveAndRotate(matColor, position, rotationY, positionOffset)
    -- get mat and related objects
    local mat = GUIDReferenceApi.getObjectByOwnerAndType(matColor, "Playermat")
    if not mat then return end

    -- get current transform data
    local currentMatPos = mat.getPosition()
    local currentMatRotY = mat.getRotation().y

    -- use current values if undefined
    position = position or currentMatPos
    rotationY = rotationY or currentMatRotY

    if positionOffset then
      position = Vector(position) + Vector(positionOffset)
    end

    local movedObjects = {}
    local function moveAndRotateObject(obj)
      local relativePos = obj.getPosition() - currentMatPos
      obj.setPosition(position + relativePos:rotateOver("y", rotationY - currentMatRotY))

      if obj.type == "Hand" then
        obj.setRotation({ 0, rotationY + 180, 0 })
      else
        local objRot = obj.getRotation()
        local relativeRotY = objRot.y - currentMatRotY
        obj.setRotation({ objRot.x, rotationY + relativeRotY, objRot.z })
      end

      movedObjects[obj.getGUID()] = true
    end

    -- get objects on the mat
    for _, obj in ipairs(SearchLib.onObject(mat, "isInteractable")) do
      if not movedObjects[obj.getGUID()] then
        -- make sure object isn't owned by another mat
        local owner = GUIDReferenceApi.getOwnerOfObject(obj)
        if owner == "Mythos" or owner == matColor then
          moveAndRotateObject(obj)
        end
      end
    end

    -- move owned objects (including the mat)
    for _, obj in pairs(GUIDReferenceApi.getObjectsByOwner(matColor)) do
      if not movedObjects[obj.getGUID()] then
        moveAndRotateObject(obj)
      end
    end

    -- make sure the Token Remover Zone is updated
    local tokenRemover = GUIDReferenceApi.getObjectByOwnerAndType(matColor, "TokenRemover")
    if tokenRemover ~= nil then
      tokenRemover.call("updateZone")
    end
  end

  return PlayermatApi
end
