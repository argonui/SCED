local AllCardsBagApi           = require("playercards/AllCardsBagApi")
local CardSpawner              = require("playercards/CardSpawner")
local utf8                     = require("util/utf8")

local BUTTON_LABELS            = {
  spawn = {
    [true]  = "All matching cards",
    [false] = "First matching card"
  },
  search = {
    [true]  = "Name equals search term",
    [false] = "Name contains search term"
  }
}

local inputParameters          = {}
inputParameters.label          = "Enter name / ID"
inputParameters.input_function = "input_func"
inputParameters.function_owner = self
inputParameters.alignment      = 2
inputParameters.position       = Vector(0, 0.1, -0.6)
inputParameters.width          = 3500
inputParameters.height         = 450
inputParameters.font_size      = 400
inputParameters.scale          = { 0.12, 1, 0.12 }
inputParameters.color          = { 0.9, 0.7, 0.5 }
inputParameters.font_color     = { 0, 0, 0 }

function updateSave()
  self.script_state = JSON.encode({
    noLimit     = noLimit,
    spawnAll    = spawnAll,
    searchExact = searchExact,
    value       = inputParameters.value
  })
end

function onLoad(savedData)
  local loadedData      = JSON.decode(savedData) or {}
  noLimit               = loadedData.noLimit or false
  spawnAll              = loadedData.spawnAll or false
  searchExact           = loadedData.searchExact or false
  inputParameters.value = loadedData.value or ""
  self.createInput(inputParameters)

  -- shared parameters
  local buttonParameters          = {}
  buttonParameters.function_owner = self
  buttonParameters.font_size      = 180
  buttonParameters.scale          = { 0.1, 1, 0.1 }
  buttonParameters.hover_color    = { 0.4, 0.6, 0.8 }
  buttonParameters.color          = { 0.9, 0.7, 0.5 }

  -- index 0: button for spawn mode
  buttonParameters.click_function = "toggleSpawnMode"
  buttonParameters.label          = BUTTON_LABELS["spawn"][spawnAll]
  buttonParameters.position       = Vector(0.16, 0.11, 0.565)
  buttonParameters.height         = 375
  buttonParameters.width          = 2300
  self.createButton(buttonParameters)

  -- index 1: button for search mode
  buttonParameters.click_function = "toggleSearchMode"
  buttonParameters.label          = BUTTON_LABELS["search"][searchExact]
  buttonParameters.position.z     = 0.652
  self.createButton(buttonParameters)

  -- index 2: start search
  buttonParameters.click_function = "startSearch"
  buttonParameters.label          = ""
  buttonParameters.position       = Vector(0, 0, 0.806)
  buttonParameters.height         = 600
  buttonParameters.width          = 2800
  self.createButton(buttonParameters)

  createContextMenu()
end

function createContextMenu()
  self.clearContextMenu()
  self.addContextMenuItem((noLimit and "Dis" or "En") .. "able No Limit", toggleNoLimit)
end

function toggleNoLimit(playerColor)
  printToColor(
  "The limitation of only spawning the first 100 cards has been " .. (noLimit and "en" or "dis") .. "abled.", playerColor)
  noLimit = not noLimit
  createContextMenu()
  updateSave()
end

function toggleSpawnMode()
  spawnAll = not spawnAll
  self.editButton({ index = 0, label = BUTTON_LABELS["spawn"][spawnAll] })
  updateSave()
end

function toggleSearchMode()
  searchExact = not searchExact
  self.editButton({ index = 1, label = BUTTON_LABELS["search"][searchExact] })
  updateSave()
end

-- if "Enter press" (\n) is found, start search and recreate input
function input_func(_, _, input, stillEditing)
  if not stillEditing then
    inputParameters.value = input
  elseif string.find(input, "%\n") ~= nil then
    sanitizeInput(input)
    startSearch()
  end
end

-- remove linebreaks, leading & trailing whitespace and recreate the input
function sanitizeInput(input)
  input = input:gsub("%\n", "")
  inputParameters.value = input:match("^%s*(.-)%s*$")
  self.clearInputs()
  self.createInput(inputParameters)
  updateSave()
end

function startSearch()
  if inputParameters.value == nil or string.len(inputParameters.value) == 0 then
    printToAll("Please enter a search string.", "Yellow")
    return
  end

  if not AllCardsBagApi.isBagPresent() then
    printToAll("Player card bag couldn't be found.", "Red")
    return
  end

  -- if the search string doesn't contain whitespace, attempt to treat it as ID
  if not string.find(inputParameters.value, "%s") then
    local singleCard = AllCardsBagApi.getCardById(inputParameters.value)
    if singleCard ~= nil then
      spawnCardList({ singleCard })
      return
    end
  else
    -- this is called here since the search could be started from the button
    sanitizeInput(inputParameters.value)
  end

  -- parse search filters
  local parsedFilters = parseSearchString(inputParameters.value)

  -- search all objects in bag
  local cardList = AllCardsBagApi.getCardsByFilter(parsedFilters, searchExact)
  if cardList == nil or #cardList == 0 then
    printToAll("No match found.", "Red")
    return
  end

  if (#cardList > 100) and noLimit == false then
    printToAll("Matched more than 100 cards, please try a more specific search or enter unlimited mode from the context menu.", "Yellow")
    return
  end

  -- sort table by name (in reverse, because bottom card spawns first)
  if spawnAll then
    table.sort(cardList, function(k1, k2) return k1.data.Nickname > k2.data.Nickname end)
  end

  spawnCardList(cardList)
end

function spawnCardList(cardList)
  local rot = self.getRotation()
  local pos = self.positionToWorld(Vector(0, 2, -0.08))
  CardSpawner.spawnCards(cardList, pos, rot, true)
end

-- Parses a search string with filters, using the manually included UTF-8 library
-- to correctly handle Cyrillic and other Unicode characters
function parseSearchString(input)
  local filters = {}
  local searchTerm = {}
  local i = 1
  local length = utf8.len(input)

  local function skipWhitespace()
    while i <= length do
      local char = utf8.sub(input, i, i)
      if not string.match(char, "%s") then
        break
      end
      i = i + 1
    end
  end

  local function parseQuotedValue()
    i = i + 1 -- skip the opening quote
    local startCharPos = i

    while i <= length and utf8.sub(input, i, i) ~= '"' do
      i = i + 1
    end

    local startBytePos = utf8.offset(input, startCharPos)
    local endBytePos = utf8.offset(input, i)

    local value = ""
    if startBytePos and endBytePos then
      value = string.sub(input, startBytePos, endBytePos - 1)
    end

    i = i + 1 -- skip the closing quote
    return value
  end

  local function parseUnquotedValue()
    local startCharPos = i
    while i <= length do
      local char = utf8.sub(input, i, i)
      if utf8.match(char, "[%s\"<>:!]") then
        break
      end
      i = i + 1
    end

    local startBytePos = utf8.offset(input, startCharPos)
    local endBytePos = utf8.offset(input, i)

    if startBytePos and endBytePos then
      return string.sub(input, startBytePos, endBytePos - 1)
    else
      return ""
    end
  end

  local function parseFilter(charBeforeOp)
    local key = charBeforeOp
    local operator = utf8.sub(input, i + 1, i + 1)

    i = i + 2        -- advance index past the key and the operator

    skipWhitespace() -- skip space between operator and value
    local value
    if i <= length and utf8.sub(input, i, i) == '"' then
      value = parseQuotedValue()
    else
      value = parseUnquotedValue()
    end
    filters[key] = { operator = operator, value = value }
  end

  -- skip whitespace at the very beginning of the parse
  skipWhitespace()

  -- main parsing loop
  while i <= length do
    local char = utf8.sub(input, i, i)
    local nextChar = ""
    if i + 1 <= length then
      nextChar = utf8.sub(input, i + 1, i + 1)
    end

    if nextChar ~= "" and string.find("[:<>!]", nextChar, 1, true) then
      parseFilter(char)
    else
      table.insert(searchTerm, char)
      i = i + 1
    end
  end

  local term = table.concat(searchTerm, "")
  if term ~= "" then
    -- handle any trailing spaces after the last word or filter
    filters.search = string.match(term, "^%s*(.-)%s*$")
  end

  return filters
end
