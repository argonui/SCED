local MythosAreaApi = require("mythos/MythosAreaApi")
local PlayermatApi  = require("playermat/PlayermatApi")

function onLoad()
  -- get class via metadata and proceed menu accordingly:
  -- lvl 0: draw 1 card from the bottom
  -- mystic lvl 3: draw 1 card from the bottom
  local buttonLabel = "Draw bottom card"
  local amount = 1
  local notes = JSON.decode(self.getGMNotes())
  if notes.id == "05188" or notes.id == "05188-t" then
    -- seeker lvl 3: draw 3 cards from the bottom
    buttonLabel = buttonLabel .. "(s)"
    amount = 3
  end
  self.addContextMenuItem(buttonLabel, function(playerColor) contextFunc(playerColor, amount) end)
end

function contextFunc(playerColor, amount)
  Player[playerColor].clearSelectedObjects()
  deckData = {}
  local options = {}

  -- check for encounter deck
  local encounterDeckObjects = MythosAreaApi.getEncounterDeckObjects()
  if encounterDeckObjects.draw or encounterDeckObjects.topCard then
    table.insert(options, "Encounter Deck")
    deckData["Encounter Deck"] = {
      draw    = encounterDeckObjects.draw,
      topCard = encounterDeckObjects.topCard
    }
  end

  -- check for players with a deck and only display them as option
  for _, color in ipairs(Player.getAvailableColors()) do
    local matColor = PlayermatApi.getMatColor(color)
    local deckAreaObjects = PlayermatApi.getDeckAreaObjects(matColor)

    if deckAreaObjects.draw or deckAreaObjects.topCard then
      local playerName = Player[color].steam_name
      local invName = PlayermatApi.getInvestigatorName(matColor)

      -- figure out a proper display name for the drop down menu
      local displayName = color .. " (color)"
      if playerName then
        displayName = playerName
      elseif invName ~= "" then
        displayName = invName .. " (inv)"
      end

      -- recreate table in this script to have access
      deckData[displayName] = {
        draw    = deckAreaObjects.draw,
        topCard = deckAreaObjects.topCard
      }
      table.insert(options, displayName)
    end
  end

  -- show the target selection dialog
  Player[playerColor].showOptionsDialog("Select target deck", options, _,
    function(owner) drawCardsFromBottom(playerColor, owner, amount) end)
end

function drawCardsFromBottom(playerColor, owner, amount)
  local deckAreaObjects = deckData[owner]
  local deck = deckAreaObjects.draw
  local deckSize = 0

  -- error handling
  if not deck and not deckAreaObjects.topCard then
    printToColor("Couldn't find deck!", playerColor)
    return
  end

  -- set deck size if there is actually a deck and not just a card
  if deck and deck.type == "Deck" then
    deckSize = #deck.getObjects()
  elseif deck and deck.type == "Card" then
    deckSize = 1
  end

  -- proceed according to deck size
  if deckSize > amount then
    for i = 1, amount do
      local card = deck.takeObject({ top = false, flip = true })
      card.deal(1, playerColor)
    end
  else
    -- deal the whole deck
    if deck then
      deck.deal(amount, playerColor)
    end

    if deckSize < amount then
      if deckAreaObjects.topCard then
        deckAreaObjects.topCard.deal(1, playerColor)
        deckSize = deckSize + 1
      end

      -- warning message for player
      if deckSize < amount then
        printToColor("Deck didn't contain enough cards.", playerColor)
      end
    end
  end
  printToColor("Handle the drawn cards according to the ability text on 'Scroll of Secrets'.", playerColor)
end
