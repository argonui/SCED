require("playercards/CardsWithHelper")
local DeckLib         = require("util/DeckLib")
local PlayermatApi    = require("playermat/PlayermatApi")
local TableLib        = require("util/TableLib")

-- intentionally global
hasXML                = true
isHelperEnabled       = false

local PHASE_LIST      = {
  mythos       = { text = "v", buttonColor = "#CC3333E6" }, -- Bold and slightly warm red
  investigator = { text = "v", buttonColor = "#88C999E6" }, -- Soft green
  enemy        = { text = "v", buttonColor = "#4477A1E6" }, -- Darker blue
  upkeep       = { text = "v", buttonColor = "#E6D34CE6" }  -- Golden yellow
}

local BUTTON_COLOR    = {
  used = "#4D4D4DA0"
}
local TEXT_COLOR      = {
  available = "#050505FF",
  used      = "#D3D3D3A0"
}
local triggeredPhases = {}

function onDestroy()
  triggeredPhases = {}
  updateSave()
end

function updateSave()
  self.script_state = JSON.encode({
    isHelperEnabled = isHelperEnabled,
    triggeredPhases = triggeredPhases
  })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    isHelperEnabled  = loadedData.isHelperEnabled
    triggeredPhases  = loadedData.triggeredPhases
  end

  generateXml()

  if isHelperEnabled then updateDisplay() end
end

function shutOff()
  updateButtonState()
end

function initialize()
  updateButtonState()
end

function doInUpkeep()
  triggeredPhases = {}
  updateSave()
  updateButtonState()
end

function generateXml()
  local gridXml = {
    tag        = "GridLayout",
    children   = {},
    attributes = {
      id              = "Helper",
      active          = isHelperEnabled,
      rotation        = "0 0 180",
      scale           = "0.175 0.175 1",
      childAlignment  = "MiddleCenter",
      constraint      = "FixedColumnCount",
      constraintCount = 2,
      position        = "0 -60 -40",
      width           = 350 * 2 + 55,
      height          = 350 * 2 + 55,
      cellSize        = "350 350",
      spacing         = "55 55"
    }
  }

  local buttonXml = {
    tag = "Button",
    attributes = {
      onClick  = "phaseClick",
      font     = "font_arkhamicons",
      fontSize = 250
    }
  }

  for phase, data in pairs(PHASE_LIST) do
    local phaseXml           = TableLib.copy(buttonXml)
    phaseXml.attributes.id   = phase
    phaseXml.attributes.text = data.text
    table.insert(gridXml.children, phaseXml)
  end

  self.UI.setXmlTable({ gridXml })
end

function phaseClick(_, _, elementId)
  if triggeredPhases[elementId] then
    triggeredPhases[elementId] = false
  else
    triggeredPhases[elementId] = true
    discardTopCard()
  end
  updateSave()
  updateButtonState()
end

function discardTopCard()
  local matColor        = PlayermatApi.getMatColorByPosition(self.getPosition())
  local deckAreaObjects = PlayermatApi.getDeckAreaObjects(matColor)
  local discardPos      = PlayermatApi.getDiscardPosition(matColor)
  local discardRot      = PlayermatApi.returnRotation(matColor)

  if not deckAreaObjects.topCard and not deckAreaObjects.draw then return end

  local card = deckAreaObjects.topCard or
  deckAreaObjects.draw.takeObject({ position = discardPos, rotation = discardRot })

  if deckAreaObjects.topCard then
    PlayermatApi.flipTopCardFromDeck(matColor, 0.75)
  end

  DeckLib.placeOrMergeIntoDeck(card, discardPos, discardRot)
end

function updateButtonState()
  for phase, data in pairs(PHASE_LIST) do
    local attributes = { color = BUTTON_COLOR.used, textColor = TEXT_COLOR.used }

    if triggeredPhases[phase] then
      attributes.color     = data.buttonColor
      attributes.textColor = TEXT_COLOR.available
    end

    self.UI.setAttributes(phase, attributes)
  end
end
