VALID_TOKENS = {
  ["+1"] = true,
  ["0"] = true,
  ["-1"] = true,
  ["-2"] = true,
  ["-3"] = true,
  ["-4"] = true,
  ["-5"] = true,
  ["-6"] = true,
  ["-7"] = true,
  ["-8"] = true
}

MAX_SEALED = 1
RESOLVE_TOKEN = true
hasXML = true
isHelperEnabled = false

require("playercards/CardsThatSealTokens")
require("playercards/CardsWithHelper")
local ChaosBagApi = require("chaosbag/ChaosBagApi")

function getSaveData()
  return {
    isHelperEnabled = isHelperEnabled,
    loopId = loopId
  }
end

function onLoad2(loadedData)
  if loadedData then
    isHelperEnabled = loadedData.isHelperEnabled or false
    loopId = loadedData.loopId
  end

  createHelperXML()
  updateDisplay()
end

function createHelperXML()
  local xmlTable = { {
    tag = "Button",
    attributes = {
      active = "false",
      id = "Helper",
      height = 360,
      width = 1400,
      rotation = "0 0 180",
      scale = "0.1 0.1 1",
      position = "0 130 -40",
      padding = "50 50 50 50",
      font = "font_teutonic-arkham",
      fontSize = 250,
      onClick = "triggerXMLTokenLabelCreation",
      color = "#77674DE6",
      textColor = "White",
      text = "Seal Token"
    },
  } }
  self.UI.setXmlTable(xmlTable)
end

function triggerXMLTokenLabelCreation(player)
  local sealedTokens = getSealedTokens()
  local playerColor = player.color
  if #sealedTokens == 0 then
    local oculaGUID = self.getGUID()
    ChaosBagApi.removeTokenFromPlay("seal", VALID_TOKENS, _, _, _, oculaGUID, playerColor)
  else
    resolveSealed(playerColor)
    self.UI.setAttribute("Helper", "text", "Seal Token")
    self.UI.setAttribute("Helper", "textColor", "White")
  end
end

function sealTokenWrapper(params)
  sealToken(params.tokenName, params.playerColor)
  self.UI.setAttribute("Helper", "text", "Resolve Token")
  self.UI.setAttribute("Helper", "textColor", "White")
end

function initialize()
  updateButtonText()
  loopId = Wait.time(updateButtonText, 2, -1)
end

function shutOff()
  if loopId then
    Wait.stop(loopId)
    loopId = nil
  end
end

-- redundancy for above button label changes, in case other functions seal / release
function updateButtonText()
  local sealedTokens = getSealedTokens()
  if #sealedTokens == 0 then
    self.UI.setAttribute("Helper", "text", "Seal Token")
    self.UI.setAttribute("Helper", "textColor", "White")
  else
    self.UI.setAttribute("Helper", "text", "Resolve Token")
    self.UI.setAttribute("Helper", "textColor", "White")
  end
end
