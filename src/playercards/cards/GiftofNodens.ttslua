local PlayermatApi   = require("playermat/PlayermatApi")
local survivorSkills = {}

function onHover()
  readDiscardPile()
end

function readDiscardPile()
  local matColor = PlayermatApi.getMatColorByPosition(self.getPosition())
  local deckAreaObjects = PlayermatApi.getDeckAreaObjects(matColor)
  survivorSkills = {}

  if deckAreaObjects.discard then
    if deckAreaObjects.discard.type == 'Card' then
      if isSurvivorSkill(deckAreaObjects.discard.getGMNotes()) then
        table.insert(survivorSkills, deckAreaObjects.discard.getName())
      end
    elseif deckAreaObjects.discard.type == 'Deck' then
      for _, card in ipairs(deckAreaObjects.discard.getObjects()) do
        if isSurvivorSkill(card.gm_notes) then
          table.insert(survivorSkills, card.name)
        end
      end
    end
  end

  generateContextMenu()
end

function isSurvivorSkill(gmnotes)
  local metadata = JSON.decode(gmnotes) or {}
  return metadata.type == 'Skill' and metadata.class == 'Survivor'
end

function pullCard(cardName)
  local matColor = PlayermatApi.getMatColorByPosition(self.getPosition())
  local deckAreaObjects = PlayermatApi.getDeckAreaObjects(matColor)

  if not deckAreaObjects.discard then return end

  if deckAreaObjects.discard.type == 'Card' then
    if deckAreaObjects.discard.getName() == cardName then
      deckAreaObjects.discard.setPositionSmooth(self.getPosition() + Vector(0.5, 0.5, 0.5), false, true)
    end
  elseif deckAreaObjects.discard.type == 'Deck' then
    for i, card in ipairs(deckAreaObjects.discard.getObjects()) do
      if card.name == cardName then
        deckAreaObjects.discard.takeObject({ guid = card.guid, position = self.getPosition() + Vector(0.5, 0.5, 0.5), smooth = false })
        break
      end
    end
  end
end

function generateContextMenu()
  self.clearContextMenu()

  for i, cardName in pairs(survivorSkills) do
    self.addContextMenuItem(cardName, function() pullCard(cardName) end)
  end
end
