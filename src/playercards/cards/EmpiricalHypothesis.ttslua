require("playercards/CardsWithHelper")
local PlayermatApi              = require("playermat/PlayermatApi")

-- intentionally global
hasXML                          = false
isHelperEnabled                 = false

-- common button parameters
local buttonParameters          = {}
buttonParameters.function_owner = self
buttonParameters.height         = 160
buttonParameters.width          = 1000
buttonParameters.font_size      = 84
buttonParameters.font_color     = { 1.0, 1.0, 1.0 }
buttonParameters.color          = Color.Black
buttonParameters.position       = {}
buttonParameters.position.x     = 0
buttonParameters.position.y     = 0.6
buttonParameters.position.z     = -1.05
initialButtonPosition           = buttonParameters.position.z

-- vertical offset between buttons
local verticalOffset            = 0.325

-- list of customizable labels
local customizableList          = {
  'Run out of cards in hand',
  'Take damage/horror',
  'Discard treachery/enemy',
  'Enter 3 or more shroud'
}

-- index of the currently selected button (0-indexed from the top)
local activeButtonIndex         = -1
local hypothesisList            = {}

function updateSave()
  self.script_state = JSON.encode({
    isHelperEnabled = isHelperEnabled,
    activeButtonIndex = activeButtonIndex
  })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    isHelperEnabled = loadedData.isHelperEnabled
    activeButtonIndex = loadedData.activeButtonIndex
    if isHelperEnabled then updateDisplay() end
  end
  if activeButtonIndex > -1 then
    selectButton(activeButtonIndex)
  end
end

function initialize()
  createButtons()
  if activeButtonIndex > -1 then
    selectButton(activeButtonIndex)
  end
end

function shutOff()
  self.clearButtons()
end

-- marks a button as active
---@param index number Index of the button to mark (starts at 0 from the top)
function selectButton(index)
  local lastindex = #hypothesisList - 1
  for i = 0, lastindex do
    local buttonColor = Color.Black
    if i == index then
      buttonColor = Color.Red
      activeButtonIndex = i
    end
    self.editButton({ index = i, color = buttonColor })
  end
  updateSave()
end

-- create buttons based on the button parameters
function createButtons()
  self.clearButtons()

  -- reset the list in case of addition of checkboxes or Refine
  hypothesisList = { 'Succeed by 3 or more', 'Fail by 2 or more' }

  -- get the upgradesheet and check for more conditions
  local upgradeSheet = findUpgradeSheet()
  if upgradeSheet then
    for i = 1, 4 do
      if upgradeSheet.call("isUpgradeActive", i) then
        table.insert(hypothesisList, customizableList[i])
      end
    end
  end

  -- reset the z position
  buttonParameters.position.z = initialButtonPosition

  -- actual button creation
  for i, label in ipairs(hypothesisList) do
    buttonParameters.label = label
    buttonParameters.click_function = "selectButton" .. i
    self.setVar(buttonParameters.click_function, function() selectButton(i - 1) end)
    self.createButton(buttonParameters)
    buttonParameters.position.z = buttonParameters.position.z + verticalOffset
  end
end

function findUpgradeSheet()
  local matColor = PlayermatApi.getMatColorByPosition(self.getPosition())
  local result = PlayermatApi.searchAroundPlayermat(matColor, "isCard")
  for j, card in ipairs(result) do
    local metadata = JSON.decode(card.getGMNotes()) or {}
    if metadata.id == "09041-c" then
      return card
    end
  end
end
