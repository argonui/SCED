require("playercards/CardsWithHelper")
local BlessCurseManagerApi = require("chaosbag/BlessCurseManagerApi")
local ChaosBagApi          = require("chaosbag/ChaosBagApi")
local GlobalApi            = require("Global/GlobalApi")
local GUIDReferenceApi     = require("core/GUIDReferenceApi")
local PlayermatApi         = require("playermat/PlayermatApi")

-- intentionally global
hasXML                     = true
isHelperEnabled            = false
local updated, loopId

function updateSave()
  self.script_state = JSON.encode({
    isHelperEnabled = isHelperEnabled,
    loopId = loopId
  })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    isHelperEnabled = loadedData.isHelperEnabled
    loopId = loadedData.loopId
  end
  if isHelperEnabled then updateDisplay() end
end

function shutOff()
  if loopId then
    Wait.stop(loopId)
    loopId = nil
  end
end

function initialize()
  maybeUpdateButtonState()
  loopId = Wait.time(maybeUpdateButtonState, 1, -1)
end

function resolveToken(player, _, tokenType)
  if not updated then return end
  updated = false

  local matColor
  if player.color == "Black" then
    matColor = PlayermatApi.getMatColorByPosition(self.getPosition())
  else
    matColor = PlayermatApi.getMatColor(player.color)
  end

  local mat = GUIDReferenceApi.getObjectByOwnerAndType(matColor, "Playermat")
  ChaosBagApi.drawChaosToken(mat, true, tokenType)
  self.setRotationSmooth(PlayermatApi.getExhaustRotation(matColor, true), nil, true)

  Wait.frames(maybeUpdateButtonState, 2)
end

-- count tokens in the bag and show appropriate buttons
function maybeUpdateButtonState()
  local state = { Bless = false, Curse = false }
  if not GlobalApi.isExhausted(self) then
    local numInBag = BlessCurseManagerApi.getBlessCurseInBag()

    if numInBag.Bless >= numInBag.Curse and numInBag.Bless > 0 then
      state.Bless = true
    end

    if numInBag.Curse >= numInBag.Bless and numInBag.Curse > 0 then
      state.Curse = true
    end
  end

  setUiState(state)
  updated = true
end

function setUiState(state)
  for _, tokenName in ipairs({ "Bless", "Curse" }) do
    if state[tokenName] then
      self.UI.show(tokenName)
      self.UI.hide("inactive" .. tokenName)
    else
      self.UI.show("inactive" .. tokenName)
      self.UI.hide(tokenName)
    end
  end
end

function errorMessage()
  if GlobalApi.isExhausted(self) then
    broadcastToAll(self.getName() .. " isn't ready.", "Red")
  else
    local numInBag = BlessCurseManagerApi.getBlessCurseInBag()

    if numInBag.Bless == 0 and numInBag.Curse == 0 then
      broadcastToAll("There are no Bless or Curse tokens in the chaos bag.", "Red")
    elseif numInBag.Bless > numInBag.Curse then
      broadcastToAll("There are more Bless tokens than Curse tokens in the chaos bag.", "Red")
    else
      broadcastToAll("There are more Curse tokens than Bless tokens in the chaos bag.", "Red")
    end
  end
end
