require("playercards/CardsWithHelper")
local ChaosBagApi = require("chaosbag/ChaosBagApi")

-- intentionally global
hasXML            = false
isHelperEnabled   = false

-- XML background color for each token
local tokenColor  = {
  ["Skull"]       = "#4A0400E6",
  ["Cultist"]     = "#173B0BE6",
  ["Tablet"]      = "#1D2238E6",
  ["Elder Thing"] = "#4D2331E6",
  ["Auto-fail"]   = "#9B0004E6",
  ["Bless"]       = "#9D702CE6",
  ["Curse"]       = "#633A84E6",
  ["Frost"]       = "#4A487BE6",
  [""]            = "#77674DE6"
}

function updateSave()
  self.script_state = JSON.encode({
    isHelperEnabled = isHelperEnabled,
    sigil = sigil
  })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    isHelperEnabled = loadedData.isHelperEnabled
    sigil = loadedData.sigil
    if isHelperEnabled then
      if sigil and sigil ~= nil then
        makeXMLButton()
      else
        updateDisplay()
      end
      self.clearContextMenu()
      self.addContextMenuItem("Clear Helper", toggleHelper)
    end
  end
end

function makeXMLButton()
  -- get name of the icon for the sigil ("token" + lowercase name without space characters)
  local sigilName = ChaosBagApi.getReadableTokenName(sigil)
  if sigilName == "Custom Token" then
    iconName = "token-custom-token"
  else
    local namesToIds = Global.call("createChaosTokenNameLookupTable")
    iconName = "token-" .. namesToIds[sigilName]
  end

  self.UI.setXmlTable({
    {
      tag = "Button",
      attributes = {
        height = 450,
        width = 1400,
        rotation = "0 0 180",
        scale = "0.1 0.1 1",
        position = "0 -55 -40",
        padding = "50 50 50 50",
        font = "font_teutonic-arkham",
        fontSize = 300,
        iconWidth = "400",
        iconAlignment = "Right",
        onClick = "resolveSigil",
        icon = iconName,
        color = tokenColor[sigil],
        textColor = "White"
      },
      value = "Resolve"
    },
    {
      tag = "Button",
      attributes = {
        height = 200,
        width = 500,
        rotation = "0 0 180",
        scale = "0.1 0.1 1",
        position = "65 125 -40",
        padding = "30 30 30 30",
        font = "font_teutonic-arkham",
        fontSize = 110,
        onClick = "chooseSigil",
        color = tokenColor[sigil],
        textColor = "White"
      },
      value = "Reset Sigil"
    }
  }
  )
  updateSave()
end

-- Create XML button to prompt choosing a sigil; acts as this card's helper
function initialize()
  if sigil and sigil ~= nil then
    makeXMLButton()
  else
    self.UI.setXmlTable({
      {
        tag = "Button",
        attributes = {
          height = 450,
          width = 1400,
          rotation = "0 0 180",
          scale = "0.1 0.1 1",
          position = "0 -55 -40",
          padding = "50 50 50 50",
          font = "font_teutonic-arkham",
          fontSize = 300,
          onClick = "chooseSigil",
          color = "#77674DE6",
          textColor = "White"
        },
        value = "Choose Sigil"
      }
    }
    )
  end
end

-- Create dialog window to choose sigil and create sigil-drawing button
function chooseSigil(player)
  player.clearSelectedObjects()
  self.clearContextMenu()
  self.addContextMenuItem("Clear Helper", toggleHelper)

  -- get list of readable names
  local readableNames = {}
  for token, _ in pairs(tokenColor) do
    table.insert(readableNames, ChaosBagApi.getReadableTokenName(token))
  end

  -- prompt player to choose sigil
  player.showOptionsDialog("Choose Sigil", readableNames, 1,
    function(chosenToken)
      sigil = ChaosBagApi.getChaosTokenName(chosenToken)
      makeXMLButton()
    end
  )
  updateSave()
end

function shutOff()
  self.UI.setXml("")
  updateSave()
end

function resolveSigil()
  local match = false
  for _, obj in ipairs(ChaosBagApi.findChaosBag().getObjects()) do
    -- if there are any sigils in the bag
    if obj.nickname == sigil then
      match = true
      break
    end
  end

  if not match then
    broadcastToAll(ChaosBagApi.getReadableTokenName(sigil) .. " not found in chaos bag", "Red")
    return
  end

  local VALID_TOKENS = {
    ["Tablet"]      = true,
    ["Elder Thing"] = true,
    ["Cultist"]     = true
  }
  ChaosBagApi.activeRedrawEffect(VALID_TOKENS, _, _, sigil)
end
