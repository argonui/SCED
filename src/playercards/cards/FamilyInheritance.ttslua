require("playercards/CardsWithHelper")
local PlayermatApi             = require("playermat/PlayermatApi")
local SearchLib                = require("util/SearchLib")
local TokenManagerApi          = require("tokens/TokenManagerApi")

-- intentionally global
hasXML                         = true
isHelperEnabled                = false
local clickableResourceCounter = nil
local foundTokens              = 0

function updateSave()
  self.script_state = JSON.encode({ isHelperEnabled = isHelperEnabled })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    isHelperEnabled = loadedData.isHelperEnabled
    if isHelperEnabled then updateDisplay() end
  end
end

function searchSelf()
  clickableResourceCounter = nil
  foundTokens = 0

  for _, obj in ipairs(SearchLib.onObject(self, "isTileOrToken")) do
    local memo = obj.getMemo()
    if memo == "resource" then
      foundTokens = foundTokens + math.abs(obj.getQuantity())
      obj.destruct()
    elseif memo == "resourceCounter" then
      foundTokens = obj.getVar("val")
      clickableResourceCounter = obj
      return
    end
  end
end

function add4()
  searchSelf()

  local newCount = foundTokens + 4
  if clickableResourceCounter then
    clickableResourceCounter.call("updateVal", newCount)
  else
    TokenManagerApi.spawnTokenGroup(self, "resource", newCount)
  end
end

function moveAll(player)
  searchSelf()
  local matColor = PlayermatApi.getMatColorByPosition(self.getPosition())
  PlayermatApi.updateCounter(matColor, "ResourceCounter", nil, foundTokens)

  if clickableResourceCounter then
    clickableResourceCounter.call("updateVal", 0)
  end
  printToColor("Moved " .. foundTokens .. " resource(s) to " .. matColor .. "'s resource pool.", player.color)
end

function loseAll(player)
  searchSelf()
  if clickableResourceCounter then
    clickableResourceCounter.call("updateVal", 0)
  end
  printToColor("Discarded " .. foundTokens .. " resource(s).", player.color)
end
