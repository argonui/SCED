do
  local CardSpawner = {}

  -- Amount to shift for the next card (zShift) or next row of cards (xShift)
  -- Note that the table rotation is weird, and the X axis is vertical while the
  -- Z axis is horizontal
  local SPREAD_Z_SHIFT = -2.3
  local SPREAD_X_SHIFT = -3.66

  -- Spawns a list of cards at the given position/rotation. This will separate cards by size -
  -- investigator, standard, and mini, spawning them in that order with larger cards on bottom. If
  -- there are different types, the provided callback will be called once for each type as it spawns
  -- either a card or deck.
  ---@param cardList table A list of Player Card data structures (data/metadata)
  ---@param pos tts__Vector table where the cards should be spawned (global)
  ---@param rot tts__Vector table for the orientation of the spawned cards (global)
  ---@param sort? boolean True if this list of cards should be sorted before spawning
  ---@param callback? function Callback to be called after the card/deck spawns.
  function CardSpawner.spawnCards(cardList, pos, rot, sort, callback)
    if sort then
      table.sort(cardList, CardSpawner.cardComparator)
    end

    local miniCards = {}
    local standardCards = {}
    local investigatorCards = {}

    for _, card in ipairs(cardList) do
      -- remove GUIDs from card data
      card.data.GUID = nil

      if card.metadata.type == "Investigator" then
        table.insert(investigatorCards, card)
      elseif card.metadata.type == "Minicard" then
        -- set proper scale for minicards
        card.data.Transform.scaleX = 0.6
        card.data.Transform.scaleZ = 0.6
        table.insert(miniCards, card)
      else
        table.insert(standardCards, card)
      end
    end

    -- Spawn each of the three types individually. Y position accounts for the thickness of the spawned deck
    local position = pos:copy()
    CardSpawner.spawn(investigatorCards, position, rot, callback)

    position.y = position.y + (#investigatorCards + #standardCards) * 0.07
    CardSpawner.spawn(standardCards, position, rot, callback)

    position.y = position.y + (#standardCards + #miniCards) * 0.07
    CardSpawner.spawn(miniCards, position, rot, callback)
  end

  function CardSpawner.spawnCardSpread(cardList, startPos, maxCols, rot, sort, callback)
    if sort then
      table.sort(cardList, CardSpawner.cardComparator)
    end

    local position = startPos:copy()

    -- Special handle the first row if we have less than a full single row, but only if there's a
    -- reasonable max column count. Single-row spreads will send a large value for maxCols
    if maxCols < 100 and #cardList < maxCols then
      position.z = startPos.z + ((maxCols - #cardList) / 2 * SPREAD_Z_SHIFT)
    end

    local cardsInRow = 0
    local rows = 0
    for _, card in ipairs(cardList) do
      -- special handling for investigators to take up two spots (like Hank in the bonded list)
      if card.metadata and card.metadata.type == "Investigator" then
        position.z = position.z + SPREAD_Z_SHIFT
        cardsInRow = cardsInRow + 1
      end

      CardSpawner.spawn({ card }, position, rot, callback)
      position.z = position.z + SPREAD_Z_SHIFT
      cardsInRow = cardsInRow + 1

      if cardsInRow >= maxCols then
        rows = rows + 1
        local cardsForRow = math.min(#cardList - rows * maxCols, maxCols)
        position.z = startPos.z + ((maxCols - cardsForRow) / 2 * SPREAD_Z_SHIFT)
        position.x = position.x + SPREAD_X_SHIFT
        cardsInRow = 0
      end
    end
  end

  -- Spawn a specific list of cards. This method is for internal use and should not be called
  -- directly, use spawnCards instead.
  ---@param cardList table A list of Player Card data structures (data/metadata)
  ---@param pos table Position where the cards should be spawned (global)
  ---@param rot table Rotation for the orientation of the spawned cards (global)
  ---@param callback? function callback to be called after the card/deck spawns.
  function CardSpawner.spawn(cardList, pos, rot, callback)
    if #cardList == 0 then return end

    -- Spawn a single card directly
    if #cardList == 1 then
      -- handle sideways card
      if cardList[1].data.SidewaysCard then
        local replaced = false
        for _, tag in ipairs(cardList[1].data.Tags or {}) do
          if tag == "Replaced" then
            replaced = true
            break
          end
        end

        if not replaced then
          rot = Vector(rot) - Vector(0, 90, 0)
        end
      end

      return spawnObjectData({
        data              = cardList[1].data,
        position          = pos,
        rotation          = rot,
        callback_function = callback
      })
    end

    -- For multiple cards, construct a deck and spawn that
    local deckScaleX = cardList[1].data.Transform.scaleX
    local deckScaleZ = cardList[1].data.Transform.scaleZ
    local deck = CardSpawner.buildDeckDataTemplate(deckScaleX, deckScaleZ)

    local sidewaysDeck = true
    for _, spawnCard in ipairs(cardList) do
      CardSpawner.addCardToDeck(deck, spawnCard.data)
      -- set sidewaysDeck to false if any card is not a sideways card
      sidewaysDeck = (sidewaysDeck and spawnCard.data.SidewaysCard)
    end

    -- set the alt view angle for sideways decks
    if sidewaysDeck then
      deck.AltLookAngle = { x = 0, y = 180, z = 90 }
      rot = Vector(rot) - Vector(0, 90, 0)
    end

    return spawnObjectData({
      data              = deck,
      position          = pos,
      rotation          = rot,
      callback_function = callback
    })
  end

  -- Inserts a card into the given deck. This does three things:
  --   1. Add the card's data to ContainedObjects
  --   2. Add the card's ID (the TTS CardID, not the Arkham ID) to the deck's
  --      ID list. Note that the deck's ID list is "DeckIDs" even though it
  --      contains a list of card Ids
  --   3. Extract the card's CustomDeck table and add it to the deck. The deck's
  --      "CustomDeck" field is a list of all CustomDecks used by cards within the
  --      deck, keyed by the DeckID and referencing the custom deck table
  ---@param deck table TTS deck data structure to add to
  ---@param cardData table Data for the card to be inserted
  function CardSpawner.addCardToDeck(deck, cardData)
    for customDeckId, customDeckData in pairs(cardData.CustomDeck) do
      if (deck.CustomDeck[customDeckId] == nil) then
        -- CustomDeck not added to deck yet, add it
        deck.CustomDeck[customDeckId] = customDeckData
      elseif (deck.CustomDeck[customDeckId].FaceURL == customDeckData.FaceURL) then
        -- CustomDeck for this card matches the current one for the deck, do nothing
      else
        -- CustomDeck data conflict
        local newDeckId = nil
        for deckId, customDeck in pairs(deck.CustomDeck) do
          if (customDeckData.FaceURL == customDeck.FaceURL) then
            newDeckId = deckId
          end
        end
        if (newDeckId == nil) then
          -- No non-conflicting custom deck for this card, add a new one
          newDeckId = CardSpawner.findNextAvailableId(deck.CustomDeck, "1000")
          deck.CustomDeck[newDeckId] = customDeckData
        end
        -- Update the card with the new CustomDeck info
        cardData.CardID = newDeckId .. string.sub(cardData.CardID, 5)
        cardData.CustomDeck[customDeckId] = nil
        cardData.CustomDeck[newDeckId] = customDeckData
        break
      end
    end
    table.insert(deck.ContainedObjects, cardData)
    table.insert(deck.DeckIDs, cardData.CardID)
  end

  -- Create an empty deck data table which can have cards added to it. This
  -- creates a new table on each call without using metatables or previous
  -- definitions because we can't be sure that TTS doesn't modify the structure
  ---@return table deck Table containing the minimal TTS deck data structure
  function CardSpawner.buildDeckDataTemplate(deckScaleX, deckScaleZ)
    local deck = {}
    deck.Name = "Deck"

    -- Card data. DeckIDs and CustomDeck entries will be built from the cards
    deck.ContainedObjects = {}
    deck.DeckIDs = {}
    deck.CustomDeck = {}

    -- Transform is required, Position and Rotation will be overridden by the spawn call so can be omitted here
    -- Decks won't inherently scale to the cards in them. The card list being spawned should be all
    -- the same type/size by this point, so use the first card to set the size
    deck.Transform = {
      scaleX = deckScaleX or 1,
      scaleY = 1,
      scaleZ = deckScaleZ or 1,
    }

    return deck
  end

  -- Returns the first ID which does not exist in the given table, starting at startId and increasing
  ---@param objectTable table keyed by strings which are numbers
  ---@param startId string possible ID.
  ---@return string id >= startId
  function CardSpawner.findNextAvailableId(objectTable, startId)
    local id = startId
    while objectTable[id] ~= nil do
      id = tostring(tonumber(id) + 1)
    end
    return id
  end

  -- Comparison function used to sort the cards in a deck in alphabetical order.
  function CardSpawner.cardComparator(card1, card2)
    if card1.data.Nickname ~= card2.data.Nickname then
      return card1.data.Nickname < card2.data.Nickname
    end
    return card1.data.Description < card2.data.Description
  end

  return CardSpawner
end
