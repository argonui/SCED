local CoroutineLib           = require("util/CoroutineLib")
local DeckImporterApi        = require("deckbuilder/DeckImporterApi")
local GUIDReferenceApi       = require("core/GUIDReferenceApi")
local TableLib               = require("util/TableLib")

local debugSpawnData         = {
  --{ id = "11050", pos = { -55.21, 1.6, 14.96 }, rot = { 0, 270, 0 }, moveCam = true }
}

-- card index and sub-indices
local cardIdIndex            = {}
local classAndLevelIndex     = {}
local customInvestigatorData = {}
local customSignatureDict    = {}

local basicWeaknessList      = {}
local uniqueWeaknessList     = {}
local evolvedWeaknessList    = {}
local bondedList             = {}
local upgradeSheetList       = {}

local cycleIndex             = {}

local indexingDone           = false
local otherCardsDetected     = false
local indexedCustomCycles    = {}
local necessaryCustomCycles  = {}

-- helper data for class sorting
local CLASS_TO_VALUE         = {
  Guardian = 1,
  Seeker   = 2,
  Rogue    = 3,
  Mystic   = 4,
  Survivor = 5,
  Neutral  = 99998,
  Mythos   = 99999
}
local CLASS_LIST             = {
  "Guardian",
  "Seeker",
  "Rogue",
  "Mystic",
  "Survivor",
  "Neutral"
}
local OFFICIAL_CYCLE_MAP     = {
  -- campaigns
  ["investigator packs"]                = true,
  ["core"]                              = true,
  ["the dunwich legacy"]                = true,
  ["the path to carcosa"]               = true,
  ["the forgotten age"]                 = true,
  ["the circle undone"]                 = true,
  ["the dream-eaters"]                  = true,
  ["the innsmouth conspiracy"]          = true,
  ["edge of the earth"]                 = true,
  ["the scarlet keys"]                  = true,
  ["the feast of hemlock vale"]         = true,
  ["the drowned city"]                  = true,
  -- standalones / parallels etc.
  ["standalone"]                        = true,
  ["the blob that ate everything else"] = true,
  ["all or nothing"]                    = true,
  ["bad blood"]                         = true,
  ["read or die"]                       = true,
  ["by the book"]                       = true,
  ["red tide rising"]                   = true,
  ["on the road again"]                 = true,
  ["laid to rest"]                      = true,
  ["path of the righteous"]             = true,
  ["relics of the past"]                = true,
  ["hunting for answers"]               = true,
  ["pistols and pearls"]                = true,
  ["aura of faith"]                     = true,
  ["beta"]                              = true,
  ["promo"]                             = true
}
-- conversion tables to simplify type sorting
local TYPE_TO_VALUE          = {
  Investigator = 1,
  Minicard     = 2,
  Asset        = 3,
  Event        = 4,
  Skill        = 5,
  Enemy        = 6,
  Treachery    = 7,
  Location     = 8
}

function onLoad()
  self.addContextMenuItem("Rebuild Index", startIndexBuild)
  Wait.frames(startIndexBuild, 30)
end

-- Called by Hotfix bags when they load. If we are still loading indexes, then
-- the all cards and hotfix bags are being loaded together, and we can ignore
-- this call as the hotfix will be included in the initial indexing. If it is
-- called once indexing is complete it means the hotfix bag has been added
-- later, and we should rebuild the index to integrate the hotfix bag.
function rebuildIndexForHotfix()
  if indexingDone then
    startIndexBuild()
  end
end

-- Resets all current bag indexes
function clearIndexes()
  indexingDone           = false
  cardIdIndex            = {}
  classAndLevelIndex     = {}
  cycleIndex             = {}
  customInvestigatorData = {}
  customSignatureDict    = {}
  basicWeaknessList      = {}
  uniqueWeaknessList     = {}
  evolvedWeaknessList    = {}
  bondedList             = {}
  upgradeSheetList       = {}
end

-- Clears the bag indexes and starts the coroutine to rebuild the indexes
function startIndexBuild()
  clearIndexes()
  CoroutineLib.start(buildIndex)
end

function onObjectLeaveContainer(container, _)
  if container == self then
    broadcastToAll("Removing cards from the All Player Cards bag may break some functions.", "Red")
  end
end

-- Create the card indexes by iterating all cards in the bag, parsing their metadata
-- and creating the keyed lookup tables for the cards. This is a coroutine which will
-- spread the workload by processing 20 cards before yielding.
function buildIndex()
  cardCount = 0
  indexingDone = false
  otherCardsDetected = false
  indexedCustomCycles = {}

  -- process the allcardsbag itself
  local selfData = self.getData()
  if selfData.ContainedObjects then
    processContainedObjects(selfData.ContainedObjects)
  end

  -- process hotfix bags (and the additional playercards bag)
  for _, hotfixBag in ipairs(getObjectsWithTag("AllCardsHotfix")) do
    local hotfixData = hotfixBag.getData()
    if hotfixData.ContainedObjects then
      processContainedObjects(hotfixData.ContainedObjects, hotfixData.CustomDeck)
    end
  end

  buildSupplementalIndexes()
  collectSortingData()
  sortIndexes()
  updatePlayerCardPanel()
  indexingDone = true

  -- maybe spawn cards for debugging
  if not didDebugSpawn then
    debugSpawn()
    didDebugSpawn = true
  end

  -- check if all necessary cycles are loaded and then notify Deck Importer
  local allNecessaryCyclesLoaded = false
  for cycleId, state in pairs(necessaryCustomCycles) do
    -- this is set to true here to indicate that there is at least one custom cycle requested
    allNecessaryCyclesLoaded = true
    if state == true and not indexedCustomCycles[cycleId] then
      allNecessaryCyclesLoaded = false
      break
    end
  end

  if allNecessaryCyclesLoaded then
    necessaryCustomCycles = {}
    DeckImporterApi.loadDecks()
  end
end

function debugSpawn()
  for _, data in ipairs(debugSpawnData) do
    local card = cardIdIndex[data.id]
    if card then
      spawnObjectData({ data = card.data, position = data.pos, rotation = data.rot })
      if data.moveCam then
        Player.getPlayers()[1].lookAt({ position = data.pos, distance = 25, pitch = 75, yaw = 90 })
      end
    end
  end
end

-- Processes the contained objects for cards to add to the index
function processContainedObjects(containedObjects, customDeck)
  for _, objData in ipairs(containedObjects) do
    if objData.ContainedObjects then
      -- this is a container, so check if it has a memo to mark it as custom content pack
      if objData.Memo and objData.Memo ~= "" then
        indexedCustomCycles[objData.Memo] = true
      end

      -- recursively process nested containers
      processContainedObjects(objData.ContainedObjects, objData.CustomDeck)
    elseif objData.Name == "Card" or objData.Name == "CardCustom" then
      if customDeck then
        -- we might need to fix the "CustomDeck" entry for cards inside decks since TTS doesn't update it while they are in bags
        local wantedCustomDeckIdStr = tostring(objData.CardID):sub(1, -3)
        local presentCustomDeckIdNum = next(objData.CustomDeck)

        -- type conversion (TTS seems to store these as strings, but reads them as numbers)
        local wantedCustomDeckIdNum = tonumber(wantedCustomDeckIdStr)
        if wantedCustomDeckIdNum ~= presentCustomDeckIdNum then
          if customDeck[wantedCustomDeckIdNum] then
            objData.CustomDeck = {}
            objData.CustomDeck[wantedCustomDeckIdStr] = customDeck[wantedCustomDeckIdNum]
            log("Corrected CustomDeckData for " .. objData.Nickname)
          else
            log("Could not correct CustomDeckData for " .. objData.Nickname)
            return
          end
        end
      end

      addCardToIndex(objData)
      cardCount = cardCount + 1
      if cardCount > 19 then
        cardCount = 0
        CoroutineLib.yieldFrames()
      end
    end
  end
end

-- Adds a card to any indexes it should be a part of, based on its metadata
---@param cardData table TTS object data for the card
function addCardToIndex(cardData)
  -- using the more efficient 'json.parse()' to speed this process up
  local status, cardMetadata = pcall(function() return json.parse(cardData.GMNotes) end)

  -- if an error happens, fallback to the regular parser
  if status ~= true or cardMetadata == nil then
    log("Fast parser failed for " .. cardData.Nickname .. ", using old parser instead.")
    cardMetadata = JSON.decode(cardData.GMNotes)
  end

  -- if metadata was not valid JSON or empty, don't add the card
  if not cardMetadata or type(cardMetadata) ~= "table" then
    log("Error parsing " .. cardData.Nickname)
    return
  end

  -- use the ZoopGuid as fallback if no id present
  cardMetadata.id = cardMetadata.id or cardMetadata.TtsZoopGuid

  if not cardMetadata.id then
    log("No ID or ZoopGUID found for " .. cardData.Nickname)
    return
  end

  local indexData = { data = cardData, metadata = cardMetadata }

  -- The following code handles data combining:
  -- If a card has the same ID as another card, this will check the `type` field
  -- no type:  original metadata will be used and card data will be combined
  -- has type: new card will fully replace the existing card
  -- This is intended to be used by"optional replacements" (like alt art) via "Additional Cards" bag,
  -- while still allowing "Hotfix" cards to patch existing metadata issues.
  if cardIdIndex[cardMetadata.id] ~= nil and cardMetadata.type == nil then
    -- take the existing metadata, but combine the card data
    local existingData       = cardIdIndex[cardMetadata.id]

    indexData.metadata       = existingData.metadata
    indexData.data.GMNotes   = existingData.data.GMNotes
    indexData.data.Tags      = existingData.data.Tags
    indexData.data.Transform = existingData.data.Transform

    -- The following fields are only copied if empty to allow localization
    for _, field in ipairs({ "Nickname", "Description", "LuaScript", "LuaScriptState", "XmlUI" }) do
      if indexData.data[field] == nil or indexData.data[field] == "" then
        indexData.data[field] = existingData.data[field]
      end
    end
  end

  cardIdIndex[cardMetadata.id] = indexData

  -- also add data for alternate ids
  if cardMetadata.alternate_ids then
    for _, alternateId in ipairs(cardMetadata.alternate_ids) do
      cardIdIndex[alternateId] = indexData
    end
  end
end

-- Creates the supplemental indexes for classes, weaknesses etc.
function buildSupplementalIndexes()
  for cardId, card in pairs(cardIdIndex) do
    -- If the ID key and the metadata ID don't match this is a duplicate card created by an alternate_id, and we should skip it
    if cardId == card.metadata.id then
      -- Add card to the basic weakness list, if appropriate. Some weaknesses have multiple copies, and are added multiple times
      if card.metadata.weakness then
        table.insert(uniqueWeaknessList, cardId)

        if card.metadata.basicWeaknessCount ~= nil then
          for i = 1, card.metadata.basicWeaknessCount do
            table.insert(basicWeaknessList, cardId)
          end
        end

        if card.metadata.evolvedWeakness then
          table.insert(evolvedWeaknessList, cardId)
        end
      end

      -- Add bonded cards to bondedList
      if card.metadata.bonded then
        for _, bondedData in ipairs(card.metadata.bonded) do
          table.insert(bondedList, bondedData.id)

          -- Maybe add tabooed version of bonded card
          if cardIdIndex[bondedData.id .. "-t"] then
            table.insert(bondedList, bondedData.id .. "-t")
          end
        end
      end

      -- Add upgradesheets to upgradeSheetList
      if card.metadata.type == "UpgradeSheet" then
        table.insert(upgradeSheetList, card.metadata.id)
      end

      -- Excludes signature cards and story assets for official cycles (which have no class or level)
      if card.metadata.class and card.metadata.level then
        local upgradeKey = "-level0"
        if card.metadata.level > 0 then
          upgradeKey = "-upgrade"
        end

        -- parse classes (separated by "|") and add the card to the appropriate class and level indices
        for str in card.metadata.class:gmatch("([^|]+)") do
          writeToNestedTable(classAndLevelIndex, str .. upgradeKey, cardId)
        end
      end

      -- start parsing the cycle data
      local cycleName = card.metadata.cycle

      -- if this is a minicard without cycle, check the parent card for cycle data
      if not cycleName and card.metadata.type == "Minicard" then
        local parentId = getParentId(cardId)
        local parent = cardIdIndex[parentId]
        if parent and parent.metadata.cycle then
          cycleName = parent.metadata.cycle
        end
      end

      if cycleName then
        cycleName = string.lower(cycleName)

        -- remove "return to " from cycle names
        cycleName = cycleName:gsub("return to ", "")

        -- override cycle name for night of the zealot
        cycleName = cycleName:gsub("the night of the zealot", "core")
      else
        -- track cards without defined cycle (should only be fan-made cards)
        cycleName = "other"
      end

      -- check if card is not from an official cycle
      if OFFICIAL_CYCLE_MAP[cycleName] ~= true then
        otherCardsDetected = true

        -- overwrite the cycle for easier handling by the playercard panel
        cycleName = "other"

        -- maybe add to special investigator / minicard index
        if card.metadata.type == "Investigator" then
          writeToNestedTable(customInvestigatorData, "InvestigatorGroup", cardId)
          writeToNestedTable(customInvestigatorData, "InvestigatorSubdata", cardId, "cards", cardId)

          -- read the signatures
          if card.metadata.signatures and type(card.metadata.signatures) == "table" then
            for sigId, sigCount in pairs(card.metadata.signatures[1] or {}) do
              customSignatureDict[sigId] = true
              for i = 1, sigCount do
                writeToNestedTable(customInvestigatorData, "InvestigatorSubdata", cardId, "signatures", sigId)
              end
            end
          end
        elseif card.metadata.type == "Minicard" then
          local parentId = getParentId(cardId)
          writeToNestedTable(customInvestigatorData, "InvestigatorSubdata", parentId, "minicards", cardId)
        end
      end

      -- add to cycle index
      writeToNestedTable(cycleIndex, cycleName, cardId)
    end
  end
end

-- collect the sorting data and cache it
function collectSortingData()
  for _, card in pairs(cardIdIndex) do
    card.sortingData = {
      class    = getClassValue(card.metadata.class),
      cardType = TYPE_TO_VALUE[card.metadata.type] or 99,
      level    = card.metadata.level or 6,
      name     = card.data.Nickname
    }
  end
end

-- generalized comparison function for table.sort() with customizable criteria
function generalizedCardComparator(id1, id2, criteria)
  local card1 = cardIdIndex[id1]
  local card2 = cardIdIndex[id2]

  for _, key in ipairs(criteria) do
    if card1.sortingData[key] ~= card2.sortingData[key] then
      return card1.sortingData[key] < card2.sortingData[key]
    end
  end

  return id1 < id2
end

-- sorts by level and then name
function generalSortFunction(id1, id2)
  return generalizedCardComparator(id1, id2, { "level", "name" })
end

-- sort by class, cardType, level and then name
function metadataSortFunction(id1, id2)
  -- if these cards have manually assigned IDs (5 digit length) instead of Zoop GUIDs, use them for sorting
  if string.len(id1) == 5 and string.len(id2) == 5 then
    return id1 < id2
  end
  return generalizedCardComparator(id1, id2, { "class", "cardType", "level", "name" })
end

function sortIndexes()
  -- sort class and level indices
  for _, indexTable in pairs(classAndLevelIndex) do
    table.sort(indexTable, generalSortFunction)
  end

  -- sort cycle indices
  for _, indexTable in pairs(cycleIndex) do
    table.sort(indexTable)
  end

  -- sort weakness indices
  table.sort(basicWeaknessList)
  table.sort(uniqueWeaknessList)
  table.sort(evolvedWeaknessList)

  -- remove duplicates and sort bonded list
  bondedList = TableLib.removeDuplicates(bondedList)
  table.sort(bondedList)

  -- sort upgradesheet index
  table.sort(upgradeSheetList)

  -- sort custom investigator / minicard data
  for _, indexTable in pairs(customInvestigatorData) do
    table.sort(indexTable, metadataSortFunction)
  end
end

-- get the parent id for minicards by removing the last two characters
function getParentId(miniId)
  return string.sub(miniId, 1, -3)
end

-- helper function to ensure nested tables are initialized - last argument will be used as table element
function writeToNestedTable(rootTable, ...)
  local args = { ... }
  local currentTable = rootTable

  for i = 1, #args - 1 do
    local key = args[i]
    if not currentTable[key] then
      currentTable[key] = {}
    end
    currentTable = currentTable[key]
  end
  table.insert(currentTable, args[#args])
end

-- inform the player card panel about the presence of other cards (no cycle -> fan-made)
function updatePlayerCardPanel()
  local panel = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "PlayerCardPanel")
  panel.call("createXML", otherCardsDetected)
end

---@return boolean: If true, the bag is currently not indexing and ready to be accessed
function isIndexReady()
  if not indexingDone then
    broadcastToAll("Still loading player cards, please try again in a few seconds", { 0.9, 0.2, 0.2 })
  end
  return indexingDone
end

function isCustomCycleIndexed(cycleId)
  return indexedCustomCycles[cycleId] == true
end

function addCustomCycleToQueueForDeckImporting(cycleId)
  necessaryCustomCycles[cycleId] = true
end

-- Returns a specific card from the bag, based on ArkhamDB ID
---@param params table ID of the card to retrieve
---@return table: If the indexes are still being constructed, returns an empty table.
--  Otherwise, a single table with the following fields
--    data: TTS object data, suitable for spawning the card
--    metadata: Table of parsed metadata
function getCardById(params)
  if not isIndexReady() then return {} end
  return cardIdIndex[params.id]
end

-- Returns a list of cards from the bag matching a class and level (0 or upgraded)
---@param params table
--  class: String class to retrieve ("Guardian", "Seeker", etc)
--  isUpgraded: true for upgraded cards (Level 1-5), false for Level 0
---@return table: If the indexes are still being constructed, returns an empty table.
--  Otherwise, a list of tables, each with the following fields
--    data: TTS object data, suitable for spawning the card
--    metadata: Table of parsed metadata
function getCardsByClassAndLevel(params)
  if not isIndexReady() then return {} end

  local upgradeKey = "-level0"
  if params.upgraded then
    upgradeKey = "-upgrade"
  end
  return classAndLevelIndex[params.class .. upgradeKey]
end

-- Returns a list of cards from the bag matching a cycle
---@param params table
--  cycle: string Name of the cycle to retrieve ("The Scarlet Keys" etc.)
--  sortByMetadata: boolean If true, sorts the table by metadata instead of ID
--  includeNoLevelCards: boolean If true, includes cards without level
---@return table: If the indexes are still being constructed, returns an empty table.
--  Otherwise, a list of tables, each with the following fields
--    data: TTS object data, suitable for spawning the card
--    metadata: Table of parsed metadata
function getCardsByCycle(params)
  if not isIndexReady() then return {} end

  local cycleData = cycleIndex[string.lower(params.cycle)] or {}

  -- create a copy of the data to not change the source
  local cardList = {}
  for _, id in ipairs(cycleData) do
    local md = cardIdIndex[id].metadata
    -- only include cards without level if requested (don't include investigators / minicards / signatures though)
    if (md.level or params.includeNoLevelCards) and md.type ~= "Investigator" and md.type ~= "Minicard" and customSignatureDict[id] ~= true then
      table.insert(cardList, id)
    end
  end

  -- sort list by metadata (useful for custom cards without proper IDs)
  if params.sortByMetadata and #cardList > 0 then
    table.sort(cardList, metadataSortFunction)
  end
  return cardList
end

-- helper function to calculate the class value for sorting from the "|" separated string
function getClassValue(s)
  -- make sure cards without class (e.g. weaknesses) get sorted last
  if not s then return 99999 end

  -- split the "|" separated string and remove whitespace
  local splitClasses = {}
  for str in s:gmatch("([^|]+)") do
    str = str:gsub("%s", "")
    splitClasses[str] = true
  end

  -- sort multiclass cards (outputs 12 for "Guardian|Seeker")
  local classValue = 0
  local multiplier = 1
  for _, class in pairs(CLASS_LIST) do
    if splitClasses[class] then
      classValue = classValue + CLASS_TO_VALUE[class] * multiplier
      multiplier = multiplier * 10
    end
  end

  return classValue
end

function getCustomInvestigatorData()
  if not isIndexReady() then return {} end

  return {
    InvestigatorGroup = customInvestigatorData.InvestigatorGroup or {},
    InvestigatorSubdata = customInvestigatorData.InvestigatorSubdata or {}
  }
end

-- Searches the bag for cards which match the given filter criteria and returns a list
function getCardsByFilter(params)
  local filters    = params.filters
  local exact      = params.exact
  if exact == nil then exact = true end

  local results    = {}

  -- track cards (by ID) that we've added to avoid duplicates that may come from alternate IDs
  local addedCards = {}
  for _, cardData in pairs(cardIdIndex) do
    local cardMatches = true
    if addedCards[cardData.metadata.id] then cardMatches = false end

    -- compare the name
    if filters.search and cardMatches then
      local searchname = string.lower(filters.search)
      local cardname   = string.lower(cardData.data.Nickname)
      if (exact and cardname ~= searchname) or not string.find(cardname, searchname, 1, true) then
        cardMatches = false
      end
    end

    -- compare trait (k)
    if filters.k and cardMatches then
      if not cardData.metadata.traits then
        cardMatches = false
      else
        local searchTraits = parseSearchValue(filters.k.value)
        local cardTraits   = string.lower(cardData.metadata.traits)
        local operator     = filters.k.operator
        for _, searchTrait in ipairs(searchTraits) do
          local containsTrait = string.find(cardTraits, searchTrait, 1, true)
          if (operator == ":" and not containsTrait) or (operator == "!" and containsTrait) then
            cardMatches = false
            break
          end
        end
      end
    end

    -- compare level (p)
    if filters.p and cardMatches then
      if not cardData.metadata.level then
        cardMatches = false
      else
        local searchLevel = tonumber(filters.p.value)
        local cardLevel   = cardData.metadata.level
        local operator    = filters.p.operator
        if (operator == ":" and cardLevel ~= searchLevel) or
            (operator == "<" and cardLevel >= searchLevel) or
            (operator == ">" and cardLevel <= searchLevel) or
            (operator == "!" and cardLevel == searchLevel) then
          cardMatches = false
        end
      end
    end

    -- compare cost (o)
    if filters.o and cardMatches then
      if not cardData.metadata.cost then
        cardMatches = false
      else
        local searchCost = tonumber(filters.o.value)
        local cardCost   = cardData.metadata.cost
        local operator   = filters.o.operator
        if (operator == ":" and cardCost ~= searchCost) or
            (operator == "<" and cardCost >= searchCost) or
            (operator == ">" and cardCost <= searchCost) or
            (operator == "!" and cardCost == searchCost) then
          cardMatches = false
        end
      end
    end

    -- compare slot (z)
    if filters.z and cardMatches then
      if not cardData.metadata.slot then
        cardMatches = false
      else
        local searchSlot   = string.lower(filters.z.value)
        local cardSlot     = string.lower(cardData.metadata.slot)
        local operator     = filters.z.operator
        local containsSlot = string.find(cardSlot, searchSlot, 1, true)
        if (operator == ":" and not containsSlot) or (operator == "!" and containsSlot) then
          cardMatches = false
        end
      end
    end

    -- compare class (f)
    if filters.f and cardMatches then
      if not cardData.metadata.class then
        cardMatches = false
      else
        local searchClass   = string.lower(filters.f.value)
        local cardClass     = string.lower(cardData.metadata.class)
        local operator      = filters.f.operator
        local containsClass = string.find(cardClass, searchClass, 1, true)
        if (operator == ":" and not containsClass) or (operator == "!" and containsClass) then
          cardMatches = false
        end
      end
    end

    -- compare cycle (c)
    if filters.c and cardMatches then
      if not cardData.metadata.cycle then
        cardMatches = false
      else
        local searchCycle  = string.lower(filters.c.value)
        local cardCycle    = string.lower(cardData.metadata.cycle or "")
        local operator     = filters.c.operator
        local cycleMatches = searchCycle == cardCycle
        if (operator == ":" and not cycleMatches) or (operator == "!" and cycleMatches) then
          cardMatches = false
        end
      end
    end

    -- compare type (t)
    if filters.t and cardMatches then
      if not cardData.metadata.type then
        cardMatches = false
      else
        local searchType = string.lower(filters.t.value)
        local cardType   = string.lower(cardData.metadata.type)
        local operator   = filters.t.operator
        if (operator == ":" and cardType ~= searchType) or (operator == "!" and cardType == searchType) then
          cardMatches = false
        end
      end
    end

    -- card has passed all filters and thus gets added
    if cardMatches then
      table.insert(results, cardData)
      addedCards[cardData.metadata.id] = true
    end
  end
  return results
end

-- get parts of the search value (separated by |)
function parseSearchValue(searchValue)
  local tbl = {}
  for str in searchValue:gmatch("([^|]+)") do
    table.insert(tbl, string.lower(str))
  end
  return tbl
end

-- Gets a random basic weakness from the bag. Once a given ID has been returned it will be
-- removed from the list and cannot be selected again until a reload occurs or the indexes
-- are rebuilt, which will refresh the list to include all weaknesses.
---@param params table Bundled parameters:
---  count number Number of weaknesses
---  restrictions table Additional restrictions:
---    class string Class to restrict weakness to
---    standalone boolean Whether 'Campaign only' weaknesses should be exluded
---    traits? string Trait(s) to use as filter
---@return table: Table with IDs of the selected weaknesses
function getRandomWeaknessIds(params)
  params.count = params.count or 1
  local availableWeaknesses = buildAvailableWeaknesses(params.restrictions)

  -- check if enough weaknesses are available
  local missingWeaknesses = params.count - #availableWeaknesses
  if missingWeaknesses > 0 then
    broadcastToAll("Not enough basic weaknesses available! (" .. missingWeaknesses .. " missing)", { 0.9, 0.2, 0.2 })
  end

  local drawnWeaknesses = {}

  -- Fisher-Yates shuffle algorithm
  local n = #availableWeaknesses
  for i = 1, math.min(params.count, n) do
    local index = math.random(i, n)
    table.insert(drawnWeaknesses, availableWeaknesses[index])
    availableWeaknesses[index], availableWeaknesses[i] = availableWeaknesses[i], availableWeaknesses[index]
  end

  return drawnWeaknesses
end

-- Constructs a list of available basic weaknesses by starting with the full pool of basic
-- weaknesses then removing any which are currently in the play or deck construction areas
---@param restrictions? table Additional restrictions:
---  class string Class to restrict weakness to
---  standalone boolean Whether 'Campaign only' weaknesses should be exluded
---  traits? string Trait(s) to use as filter
---@return table: Array of weakness IDs which are valid to choose from
function buildAvailableWeaknesses(restrictions)
  restrictions = restrictions or {}
  local weaknessesInPlay = {}
  local allObjects = getAllObjects()
  for _, object in ipairs(allObjects) do
    if object.type == "Deck" then
      for _, cardData in ipairs(object.getData().ContainedObjects) do
        incrementWeaknessCount(weaknessesInPlay, JSON.decode(cardData.GMNotes))
      end
    elseif object.type == "Card" then
      incrementWeaknessCount(weaknessesInPlay, JSON.decode(object.getGMNotes()))
    end
  end

  local availableWeaknesses = {}
  for _, weaknessId in ipairs(basicWeaknessList) do
    if (weaknessesInPlay[weaknessId] ~= nil and weaknessesInPlay[weaknessId] > 0) then
      weaknessesInPlay[weaknessId] = weaknessesInPlay[weaknessId] - 1
    else
      local eligible = true

      -- disable 'Campaign only' weaknesses in standalone mode
      if restrictions.standalone then
        local card = cardIdIndex[weaknessId]
        if card.metadata.modeRestriction == "Campaign" then
          eligible = false
        end
      end

      -- disable class restricted weaknesses
      if restrictions.class then
        local card = cardIdIndex[weaknessId]
        if card.metadata.classRestriction and card.metadata.classRestriction ~= restrictions.class then
          eligible = false
        end
      end

      -- disable non-matching traits
      if restrictions.traits then
        -- split the string into separate traits (separated by "|")
        local allowedTraits = {}
        for str in restrictions.traits:gmatch("([^|]+)") do
          -- remove dots
          str = str:gsub("[%.]", "")

          -- remove leading and trailing whitespace
          str = str:match("^%s*(.-)%s*$")

          -- make sure string ends with a dot
          str = string.lower(str .. ".")
          table.insert(allowedTraits, str)
        end

        local match = false

        -- make sure the trait is present on the weakness
        local card = cardIdIndex[weaknessId]
        for _, allowedTrait in ipairs(allowedTraits) do
          if string.contains(string.lower(card.metadata.traits), allowedTrait) then
            match = true
            break
          end
        end

        if not match then
          eligible = false
        end
      end

      -- add weakness to list if eligible
      if eligible then
        table.insert(availableWeaknesses, weaknessId)
      end
    end
  end
  return availableWeaknesses
end

function getBasicWeaknesses()
  return basicWeaknessList
end

function getUniqueWeaknesses()
  return uniqueWeaknessList
end

function getEvolvedWeaknesses()
  return evolvedWeaknessList
end

function getBondedCardList()
  return bondedList
end

function getUpgradeSheetList()
  return upgradeSheetList
end

-- Helper function that adds one to the table entry for the number of weaknesses in play
function incrementWeaknessCount(table, cardMetadata)
  if isBasicWeakness(cardMetadata) then
    if table[cardMetadata.id] == nil then
      table[cardMetadata.id] = 1
    else
      table[cardMetadata.id] = table[cardMetadata.id] + 1
    end
  end
end

function isBasicWeakness(cardMetadata)
  return cardMetadata ~= nil
      and cardMetadata.weakness
      and cardMetadata.basicWeaknessCount ~= nil
      and cardMetadata.basicWeaknessCount > 0
end
