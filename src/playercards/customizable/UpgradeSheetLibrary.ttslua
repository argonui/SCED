-- Common code for handling customizable card upgrade sheets
-- Define UI elements in the base card file, then include this
-- UI element definition is an array of tables, each with this structure. A row may include
-- checkboxes (number defined by count), a text field, both, or neither (if the row has custom
-- handling, as Living Ink does)
-- {
--   checkboxes = {
--     posZ = -0.71,
--     count = 1
--   },
--   textField = {
--     position =  { 0.005, 0.25, -0.58 },
--     width = 875
--   }
-- }
-- Fields should also be defined for xInitial (left edge of the checkboxes) and xOffset (amount to
-- shift X from one box to the next) as well as boxSize (checkboxes) and inputFontSize.
--
-- selectedUpgrades holds the state of checkboxes and text input, each element being:
-- selectedUpgrades[row] = { xp = #, text = "" }

local MathLib                        = require("util/MathLib")
local PlayermatApi                   = require("playermat/PlayermatApi")

-- Y position for UI elements
local Y_VISIBLE                      = 0.25

-- Variable to check whether UI finished loading
local isLoading                      = true

-- Used for Summoned Servitor and Living Ink
local VECTOR_COLOR                   = {
  unselected = { 0.5, 0.5, 0.5, 0.75 },
  mystic     = { 0.597, 0.195, 0.796 }
}

-- These match with ArkhamDB's way of storing the data in the dropdown menu
local SUMMONED_SERVITOR_SLOT_INDICES = { arcane = "1", ally = "0", none = "" }

-- Unicode Characters used for the checkboxes
local CHECKBOX_CHARS                 = { 10007, 10008 }

local selectedUpgrades               = {}

function updateSave()
  self.script_state = JSON.encode({ selections = selectedUpgrades })
end

-- Startup procedure
function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    if loadedData.selections ~= nil then
      selectedUpgrades = loadedData.selections
    end
  end

  selfId = getSelfId()
  maybeLoadLivingInkSkills()
  createUi()
  maybeUpdateLivingInkSkillDisplay()
  maybeUpdateServitorSlotDisplay()

  self.addContextMenuItem("Clear Selections", function() resetSelections() end)
  self.addContextMenuItem("Scale: 1x", function() self.setScale({ 1, 1, 1 }) end)
  self.addContextMenuItem("Scale: 2x", function() self.setScale({ 2, 1, 2 }) end)
  self.addContextMenuItem("Scale: 3x", function() self.setScale({ 3, 1, 3 }) end)
end

-- Grabs the ID from the metadata for special functions (Living Ink, Summoned Servitor)
function getSelfId()
  local metadata = JSON.decode(self.getGMNotes()) or {}
  return metadata.id
end

function isUpgradeActive(row)
  return customizations[row] ~= nil
      and customizations[row].checkboxes ~= nil
      and customizations[row].checkboxes.count ~= nil
      and customizations[row].checkboxes.count > 0
      and selectedUpgrades[row] ~= nil
      and selectedUpgrades[row].xp ~= nil
      and selectedUpgrades[row].xp >= customizations[row].checkboxes.count
end

function resetSelections()
  selectedUpgrades = {}
  updateSave()
  updateDisplay()
end

function createUi()
  xmlTable = {}

  if customizations == nil then return end
  for i = 1, #customizations do
    if customizations[i].checkboxes ~= nil then
      createRowCheckboxes(i)
    end

    if customizations[i].textField ~= nil then
      createRowTextField(i)
    end
  end

  self.UI.setXmlTable(xmlTable)
  maybeMakeLivingInkSkillSelectionButtons()
  maybeMakeServitorSlotSelectionButtons()
  updateDisplay()
end

function createRowCheckboxes(rowIndex)
  local checkboxes = customizations[rowIndex].checkboxes

  for col = 1, checkboxes.count do
    -- set up click function
    local funcName = "checkboxRow" .. rowIndex .. "Col" .. col
    local func = function() clickCheckbox(rowIndex, col) end
    self.setVar(funcName, func)

    local cbPos = getCheckboxPosition(rowIndex, col)
    local checkboxXml = {
      tag = "Button",
      attributes = {
        onClick  = funcName,
        position = cbPos,
        height   = 75,
        width    = 75,
        scale    = "0.1 0.1 1",
        color    = "#00000000"
      }
    }
    table.insert(xmlTable, checkboxXml)

    -- put a text element on top of the invisible buttons for the crosses
    local cbId = "cb_" .. rowIndex .. "_" .. col
    local cbData = getCheckboxData(cbId)
    local labelXml = {
      tag = "Text",
      attributes = {
        id        = cbId,
        position  = cbPos,
        rotation  = "0 0 " .. cbData.angle,
        height    = 165,
        width     = 165,
        scale     = "0.1 0.1 1",
        fontSize  = cbData.size,
        text      = cbData.symbol,
        textColor = "#000000FF"
      }
    }
    table.insert(xmlTable, labelXml)
  end
end

function getCheckboxPosition(row, col)
  return translatePosition(xInitial + col * xOffset, customizations[row].checkboxes.posZ)
end

-- gets randomized data for a checkbox
function getCheckboxData(cbId)
  checkboxData = checkboxData or {}

  -- generate data if not present
  if not checkboxData[cbId] then
    checkboxData[cbId] = {
      angle  = math.random(-12, 12) + 180,
      size   = MathLib.round(math.random(85, 115) / 100 * 125),
      symbol = string.char(CHECKBOX_CHARS[math.random(#CHECKBOX_CHARS)])
    }
  end
  return checkboxData[cbId]
end

function createRowTextField(rowIndex)
  local textField = customizations[rowIndex].textField
  local funcName = "textbox" .. rowIndex
  local func = function(_, value) clickTextbox(rowIndex, value) end
  self.setVar(funcName, func)

  local actualPosition = translatePosition(textField.position[1], textField.position[3])
  local newTextbox = {
    tag = "InputField",
    attributes = {
      onEndEdit            = funcName,
      id                   = rowIndex,
      placeholder          = "Click to type",
      position             = actualPosition,
      alignment            = "MiddleLeft",
      width                = textField.width * 1.04,
      height               = (inputFontsize + 20),
      fontSize             = inputFontsize,
      resizeTextForBestFit = true,
      fontStyle            = "Bold",
      rotation             = "0 0 180",
      scale                = "0.2 0.2 0.2",
      color                = "#FFFFFF"
    }
  }
  table.insert(xmlTable, newTextbox)
end

function translatePosition(posX, posZ)
  -- position values are converted for XML
  return (posX * -100) .. " " .. (posZ * 100) .. " -40"
end

function updateDisplay()
  for i = 1, #customizations do
    updateRowDisplay(i)
  end
  maybeUpdateLivingInkSkillDisplay()
  maybeUpdateServitorSlotDisplay()
end

function updateRowDisplay(rowIndex)
  if customizations[rowIndex].checkboxes ~= nil then
    updateCheckboxes(rowIndex)
  end
  if customizations[rowIndex].textField ~= nil then
    updateTextField(rowIndex)
  end
end

function updateCheckboxes(rowIndex)
  local checkboxCount = customizations[rowIndex].checkboxes.count
  local selected = 0
  if selectedUpgrades[rowIndex] ~= nil and selectedUpgrades[rowIndex].xp ~= nil then
    selected = selectedUpgrades[rowIndex].xp
  end

  for col = 1, checkboxCount do
    waitForUILoad("cb_" .. rowIndex .. "_" .. col, "active", col <= selected)
  end
end

function updateTextField(rowIndex)
  if selectedUpgrades[rowIndex] ~= nil and selectedUpgrades[rowIndex].text ~= nil then
    waitForUILoad(rowIndex, "text", selectedUpgrades[rowIndex].text)
  end
end

function waitForUILoad(id, attribute, value)
  if isLoading then
    Wait.condition(
      function()
        Wait.frames(
          function()
            isLoading = false
            self.UI.setAttribute(id, attribute, value)
          end,
          1
        )
      end,
      function() return not self.UI.loading end
    )
  else
    self.UI.setAttribute(id, attribute, value)
  end
end

function clickCheckbox(row, col)
  selectedUpgrades[row] = selectedUpgrades[row] or {}
  selectedUpgrades[row].xp = selectedUpgrades[row].xp or 0

  if selectedUpgrades[row].xp == col then
    selectedUpgrades[row].xp = col - 1
  else
    selectedUpgrades[row].xp = col
  end

  updateCheckboxes(row)
  updateSave()
  PlayermatApi.syncAllCustomizableCards()
end

-- Updates saved value for given text box when it loses focus
function clickTextbox(rowIndex, value)
  selectedUpgrades[rowIndex] = selectedUpgrades[rowIndex] or {}
  selectedUpgrades[rowIndex].text = value:gsub("^%s*(.-)%s*$", "%1")
  updateSave()
  -- Editing isn't actually done yet, and will block the update. Wait a frame so it's finished
  Wait.frames(function() updateRowDisplay(rowIndex) end, 1)
end

---------------------------------------------------------
-- Living Ink related functions
---------------------------------------------------------

-- Builds the list of boolean skill selections from the Row 1 text field
function maybeLoadLivingInkSkills()
  if selfId ~= "09079-c" then return end
  selectedSkills = {
    willpower = false,
    intellect = false,
    combat    = false,
    agility   = false
  }

  if selectedUpgrades[1] and selectedUpgrades[1].text then
    for skill in string.gmatch(selectedUpgrades[1].text, "([^,]+)") do
      selectedSkills[skill] = true
    end
  end
end

function clickSkill(skillname)
  selectedSkills[skillname] = not selectedSkills[skillname]
  maybeUpdateLivingInkSkillDisplay()
  updateSelectedLivingInkSkillText()
end

-- Creates the invisible buttons overlaying the skill icons
function maybeMakeLivingInkSkillSelectionButtons()
  if selfId ~= "09079-c" then return end

  local buttonData = {
    function_owner = self,
    position       = { y = 0.2 },
    height         = 130,
    width          = 130,
    color          = { 0, 0, 0, 0 }
  }

  for skillname, _ in pairs(selectedSkills) do
    local funcName = "clickSkill" .. skillname
    self.setVar(funcName, function() clickSkill(skillname) end)

    buttonData.click_function = funcName
    buttonData.position.x = -1 * SKILL_ICON_POSITIONS[skillname].x
    buttonData.position.z = SKILL_ICON_POSITIONS[skillname].z
    self.createButton(buttonData)
  end
end

-- Builds a comma-delimited string of skills and places it in the Row 1 text field
function updateSelectedLivingInkSkillText()
  local skillString = ""

  for _, skill in pairs({ "willpower", "intellect", "combat", "agility" }) do
    if selectedSkills[skill] then
      skillString = skillString .. skill .. ","
    end
  end

  selectedUpgrades[1] = selectedUpgrades[1] or {}
  selectedUpgrades[1].text = skillString
  updateSave()
end

-- Refresh the vector circles indicating a skill is selected.
-- Since we can only have one table of vectors set, have to refresh all 4 at once.
function maybeUpdateLivingInkSkillDisplay()
  if selfId ~= "09079-c" then return end
  local circles = {}
  for skill, isSelected in pairs(selectedSkills) do
    if isSelected then
      local circle = getCircleLines(SKILL_ICON_POSITIONS[skill])
      if circle ~= nil then
        table.insert(circles, circle)
      end
    end
  end
  self.setVectorLines(circles)
end

function getCircleLines(center)
  local diameter      = Vector(0, 0, 0.1)
  local pointOfOrigin = Vector(center.x, Y_VISIBLE, center.z)
  local vecList       = {}
  local arcStep       = 5
  for i = 0, 360, arcStep do
    table.insert(vecList, pointOfOrigin + diameter:rotateOver('y', arcStep))
  end

  return {
    points    = vecList,
    color     = VECTOR_COLOR.mystic,
    thickness = 0.02
  }
end

---------------------------------------------------------
-- Summoned Servitor related functions
---------------------------------------------------------

-- Creates the invisible buttons overlaying the slot words
function maybeMakeServitorSlotSelectionButtons()
  if selfId ~= "09080-c" then return end

  local buttonData = {
    click_function = "clickArcane",
    function_owner = self,
    position       = { x = -1 * SLOT_ICON_POSITIONS.arcane.x, y = 0.2, z = SLOT_ICON_POSITIONS.arcane.z },
    height         = 130,
    width          = SLOT_ICON_POSITIONS["arcane"].width * 1000 + 5,
    color          = { 0, 0, 0, 0 }
  }
  self.createButton(buttonData)

  buttonData.click_function = "clickAlly"
  buttonData.position.x = -1 * SLOT_ICON_POSITIONS.ally.x
  buttonData.width = SLOT_ICON_POSITIONS["ally"].width * 1000 + 5
  self.createButton(buttonData)
end

function clickArcane()
  servitorSlotClick("arcane")
end

function clickAlly()
  servitorSlotClick("ally")
end

-- toggles the clicked slot
function servitorSlotClick(slotType)
  selectedUpgrades[6] = selectedUpgrades[6] or {}

  if selectedUpgrades[6].text == SUMMONED_SERVITOR_SLOT_INDICES[slotType] then
    selectedUpgrades[6].text = SUMMONED_SERVITOR_SLOT_INDICES.none
  else
    selectedUpgrades[6].text = SUMMONED_SERVITOR_SLOT_INDICES[slotType]
  end

  updateSave()
  maybeUpdateServitorSlotDisplay()
end

-- Refresh the vector circles indicating a slot is selected.
function maybeUpdateServitorSlotDisplay()
  if selfId ~= "09080-c" then return end

  local center         = SLOT_ICON_POSITIONS["arcane"]
  local arcaneVecList  = {
    Vector(center.x + center.width, Y_VISIBLE, center.z + 0.05),
    Vector(center.x - center.width, Y_VISIBLE, center.z + 0.05),
    Vector(center.x - center.width, Y_VISIBLE, center.z - 0.05),
    Vector(center.x + center.width, Y_VISIBLE, center.z - 0.05),
    Vector(center.x + center.width, Y_VISIBLE, center.z + 0.05)
  }

  center               = SLOT_ICON_POSITIONS["ally"]
  local allyVecList    = {
    Vector(center.x + center.width, Y_VISIBLE, center.z + 0.05),
    Vector(center.x - center.width, Y_VISIBLE, center.z + 0.05),
    Vector(center.x - center.width, Y_VISIBLE, center.z - 0.05),
    Vector(center.x + center.width, Y_VISIBLE, center.z - 0.05),
    Vector(center.x + center.width, Y_VISIBLE, center.z + 0.05)
  }

  local arcaneVecColor = VECTOR_COLOR.unselected
  local allyVecColor   = VECTOR_COLOR.unselected

  if selectedUpgrades[6] ~= nil and selectedUpgrades[6].text == SUMMONED_SERVITOR_SLOT_INDICES.arcane then
    arcaneVecColor = VECTOR_COLOR.mystic
  elseif selectedUpgrades[6] ~= nil and selectedUpgrades[6].text == SUMMONED_SERVITOR_SLOT_INDICES.ally then
    allyVecColor = VECTOR_COLOR.mystic
  end

  self.setVectorLines({
    {
      points    = arcaneVecList,
      color     = arcaneVecColor,
      thickness = 0.02
    },
    {
      points    = allyVecList,
      color     = allyVecColor,
      thickness = 0.02
    }
  })
end
