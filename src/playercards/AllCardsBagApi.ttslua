do
  local AllCardsBagApi   = {}
  local GUIDReferenceApi = require("core/GUIDReferenceApi")
  local TableLib         = require("util/TableLib")

  local function getAllCardsBag()
    return GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "AllCardsBag")
  end

  -- Returns a specific card from the bag, based on ArkhamDB ID
  ---@param id string ID of the card to retrieve
  ---@return table: If the indexes are still being constructed, returns an empty table.
  --  Otherwise, a single table with the following fields
  --    data: TTS object data, suitable for spawning the card
  --    metadata: Table of parsed metadata
  function AllCardsBagApi.getCardById(id)
    return getAllCardsBag().call("getCardById", { id = id })
  end

  -- Gets a random basic weakness from the bag. Once a given ID has been returned it
  -- will be removed from the list and cannot be selected again until a reload occurs
  -- or the indexes are rebuilt, which will refresh the list to include all weaknesses.
  ---@param count number Number of weaknesses
  ---@param restrictions table Additional restrictions:
  ---  class string Class to restrict weakness to
  ---  standalone boolean Whether 'Campaign only' weaknesses should be exluded
  ---  traits? string Trait(s) to use as filter
  ---@return table: Table with IDs of the selected weaknesses
  function AllCardsBagApi.getRandomWeaknessIds(count, restrictions)
    return TableLib.copy(getAllCardsBag().call("getRandomWeaknessIds", { count = count, restrictions = restrictions }))
  end

  function AllCardsBagApi.isIndexReady()
    return getAllCardsBag().call("isIndexReady")
  end

  function AllCardsBagApi.isBagPresent()
    return getAllCardsBag() ~= nil
  end

  function AllCardsBagApi.isCustomCycleIndexed(cycleId)
    return getAllCardsBag().call("isCustomCycleIndexed", cycleId)
  end

  function AllCardsBagApi.addCustomCycleToQueueForDeckImporting(cycleId)
    return getAllCardsBag().call("addCustomCycleToQueueForDeckImporting", cycleId)
  end

  -- Called by Hotfix bags when they load. If we are still loading indexes, then
  -- the all cards and hotfix bags are being loaded together, and we can ignore
  -- this call as the hotfix will be included in the initial indexing. If it is
  -- called once indexing is complete it means the hotfix bag has been added
  -- later, and we should rebuild the index to integrate the hotfix bag.
  function AllCardsBagApi.rebuildIndexForHotfix()
    getAllCardsBag().call("rebuildIndexForHotfix")
  end

  -- Searches the bag for cards which match the given filters.
  ---@param filters table Contains the filters
  ---@param exact? boolean Whether the name match should be exact
  function AllCardsBagApi.getCardsByFilter(filters, exact)
    return TableLib.copy(getAllCardsBag().call("getCardsByFilter", { filters = filters, exact = exact }))
  end

  -- Returns a list of cards from the bag matching a class and level (0 or upgraded)
  ---@param class string class to retrieve ("Guardian", "Seeker", etc)
  ---@param upgraded boolean True for upgraded cards (Level 1-5), false for Level 0
  ---@return table: If the indexes are still being constructed, returns an empty table.
  --  Otherwise, a list of tables, each with the following fields
  --    data: TTS object data, suitable for spawning the card
  --    metadata: Table of parsed metadata
  function AllCardsBagApi.getCardsByClassAndLevel(class, upgraded)
    return TableLib.copy(getAllCardsBag().call("getCardsByClassAndLevel", { class = class, upgraded = upgraded }))
  end

  -- Returns a list of cards from the bag matching a cycle
  ---@param cycle string Cycle to retrieve ("The Scarlet Keys" etc.)
  ---@param sortByMetadata boolean If true, sorts the table by metadata instead of ID
  ---@param includeNoLevelCards boolean If true, includes cards without level
  ---@return table: If the indexes are still being constructed, returns an empty table.
  --  Otherwise, a list of tables, each with the following fields
  --    data: TTS object data, suitable for spawning the card
  --    metadata: Table of parsed metadata
  function AllCardsBagApi.getCardsByCycle(cycle, sortByMetadata, includeNoLevelCards)
    return TableLib.copy(getAllCardsBag().call("getCardsByCycle", {
      cycle = cycle,
      sortByMetadata = sortByMetadata,
      includeNoLevelCards = includeNoLevelCards
    }))
  end

  -- Returns the data for custom investigators for the PlayerCardPanel
  function AllCardsBagApi.getCustomInvestigatorData()
    return TableLib.copy(getAllCardsBag().call("getCustomInvestigatorData"))
  end

  -- Constructs a list of available basic weaknesses by starting with the full pool of basic
  -- weaknesses then removing any which are currently in the play or deck construction areas
  ---@param restrictions table Additional restrictions:
  ---  class string Class to restrict weakness to
  ---  standalone boolean Whether 'Campaign only' weaknesses should be exluded
  ---  traits? string Trait(s) to use as filter
  ---@return table: Array of weakness IDs which are valid to choose from
  function AllCardsBagApi.buildAvailableWeaknesses(restrictions)
    return TableLib.copy(getAllCardsBag().call("buildAvailableWeaknesses", restrictions))
  end

  function AllCardsBagApi.getUniqueWeaknesses()
    return TableLib.copy(getAllCardsBag().call("getUniqueWeaknesses"))
  end

  function AllCardsBagApi.getEvolvedWeaknesses()
    return TableLib.copy(getAllCardsBag().call("getEvolvedWeaknesses"))
  end

  function AllCardsBagApi.getBondedCardList()
    return TableLib.copy(getAllCardsBag().call("getBondedCardList"))
  end

  function AllCardsBagApi.getUpgradeSheetList()
    return TableLib.copy(getAllCardsBag().call("getUpgradeSheetList"))
  end

  return AllCardsBagApi
end
