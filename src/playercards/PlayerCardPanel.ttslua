---@diagnostic disable: param-type-mismatch
require("playercards/PlayerCardPanelData")

local AllCardsBagApi                   = require("playercards/AllCardsBagApi")
local SpawnBag                         = require("playercards/SpawnBag")
local WebInterface                     = require("deckbuilder/WebInterface")

local lastWeaknessTrait                = "Madness"

-- Size and position information for the three rows of class buttons
local CIRCLE_BUTTON_SIZE               = 250
local CLASS_BUTTONS_X_OFFSET           = 0.1325
local INVESTIGATOR_ROW_START           = Vector(0.125, 0.1, -0.447)
local LEVEL_ZERO_ROW_START             = Vector(0.125, 0.1, -0.007)
local UPGRADED_ROW_START               = Vector(0.125, 0.1, 0.333)

-- Size and position information for the two blocks of other buttons
local MISC_BUTTONS_X_OFFSET            = 0.155
local WEAKNESS_ROW_START               = Vector(0.157, 0.1, 0.666)
local OTHER_ROW_START                  = Vector(0.605, 0.1, 0.666)

-- Size and position information for the Cycle (box) buttons
local CYCLE_BUTTON_SIZE                = 468
local CYCLE_BUTTON_START               = Vector(-0.716, 0.1, -0.39)
local CYCLE_COLUMN_COUNT               = 3
local CYCLE_BUTTONS_X_OFFSET           = 0.267
local CYCLE_BUTTONS_Z_OFFSET           = 0.2665

local STARTER_DECK_MODE_SELECTED_COLOR = { 0.2, 0.2, 0.2, 0.8 }
local TRANSPARENT                      = { 0, 0, 0, 0 }

local FACE_UP_ROTATION                 = { x = 0, y = 270, z = 0 }
local FACE_DOWN_ROTATION               = { x = 0, y = 270, z = 180 }

-- ----------  IMPORTANT  ----------
-- Coordinates defined below are in global dimensions relative to the panel - DO NOT USE THESE
-- DIRECTLY. Call scalePositions() before use, and reference the variables below

-- Layout width for a single card, in global coordinate space
local CARD_WIDTH                       = 2.3

-- Coordinates to begin laying out cards. These vary based on the cards that are being placed by
-- considering the width of the cards, number of cards, and desired spread intervals.
-- IMPORTANT! Because of the mix of global card sizes and relative-to-scale positions, the X and Y
-- coordinates on these provide global disances while the Z is local.
local START_POSITIONS                  = {
  classCards     = Vector(CARD_WIDTH * 9.5, 2, 1.4),
  investigator   = Vector(7 * 2.5, 2, 1.3),
  cycle          = Vector(CARD_WIDTH * 9.5, 2, 2.4),
  other          = Vector(CARD_WIDTH * 9.5, 2, 1.4),
  randomWeakness = Vector(0, 2, 1.4)
}

-- Shifts to move rows of cards, and groups of rows, as different groupings are laid out
local CARD_ROW_OFFSET                  = 3.7
local CARD_GROUP_OFFSET                = 2
local CARD_MAX_ROWS                    = 15
local CARD_MAX_COLS                    = 20

-- Position offsets for investigator decks in investigator mode, defines the spacing for how the
-- rows and columns are laid out
local INVESTIGATOR_POSITION_SHIFT_ROW  = Vector(0, 0, 10)
local INVESTIGATOR_POSITION_SHIFT_COL  = Vector(-6, 0, 0)
local INVESTIGATOR_MAX_COLS            = 7

-- Positions relative to the minicard to place other stacks. Both signature card piles and starter
-- decks use SIGNATURE_OFFSET
local INVESTIGATOR_CARD_OFFSET         = Vector(0, 0, 2.55)
local INVESTIGATOR_SIGNATURE_OFFSET    = Vector(0, 0, 5.75)

-- USE THESE! Positions and offset shifts accounting for the scale of the panel
local startPositions
local cardRowOffset
local cardGroupOffset
local investigatorPositionShiftRow
local investigatorPositionShiftCol
local investigatorCardOffset
local investigatorSignatureOffset

local CLASS_LIST                       = {
  "Guardian",
  "Seeker",
  "Rogue",
  "Mystic",
  "Survivor",
  "Neutral"
}
local CYCLE_LIST                       = {
  "Core",
  "The Dunwich Legacy",
  "The Path to Carcosa",
  "The Forgotten Age",
  "The Circle Undone",
  "The Dream-Eaters",
  "The Innsmouth Conspiracy",
  "Edge of the Earth",
  "The Scarlet Keys",
  "The Feast of Hemlock Vale",
  --"The Drowned City", (not included because button is added via XML currently)
  "Investigator Packs"
}

local excludedNonBasicWeaknesses
local spawnStarterDecks                = false
local helpVisibleToPlayers             = {}

function onSave()
  return JSON.encode({ spawnBagState = SpawnBag.getStateForSave() })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local saveState = JSON.decode(savedData) or {}
    if saveState.spawnBagState ~= nil then
      SpawnBag.loadFromSave(saveState.spawnBagState)
    end
  end
  buildExcludedWeaknessList()
  createButtons()
end

-- Build a list of non-basic weaknesses which should be excluded from the last weakness set,
-- including all signature cards and evolved weaknesses.
function buildExcludedWeaknessList()
  excludedNonBasicWeaknesses = {}
  for _, investigator in pairs(INVESTIGATORS) do
    for _, signatureId in ipairs(investigator.signatures or {}) do
      excludedNonBasicWeaknesses[signatureId] = true
    end
  end
  for _, weaknessId in ipairs(AllCardsBagApi.getEvolvedWeaknesses()) do
    excludedNonBasicWeaknesses[weaknessId] = true
  end
end

function createButtons()
  createHelpButton()
  createInvestigatorButtons()
  createLevelZeroButtons()
  createUpgradedButtons()
  createWeaknessButtons()
  createOtherButtons()
  createCycleButtons()
  createClearButton()
  -- Create investigator mode buttons last so the indexes are set when we need to update them
  createInvestigatorModeButtons()
end

function createHelpButton()
  self.createButton({
    function_owner = self,
    click_function = "toggleHelp",
    position       = Vector(0.845, 0.1, -0.855),
    height         = 180,
    width          = 180,
    scale          = Vector(0.25, 1, 0.25),
    color          = TRANSPARENT
  })
end

function createInvestigatorButtons()
  local invButtonParams = {
    function_owner = self,
    height         = CIRCLE_BUTTON_SIZE,
    width          = CIRCLE_BUTTON_SIZE,
    scale          = Vector(0.25, 1, 0.25),
    color          = TRANSPARENT
  }
  local buttonPos = INVESTIGATOR_ROW_START:copy()
  for _, class in ipairs(CLASS_LIST) do
    invButtonParams.click_function = "spawnInvestigators" .. class
    invButtonParams.position = buttonPos
    self.createButton(invButtonParams)
    buttonPos.x = buttonPos.x + CLASS_BUTTONS_X_OFFSET
    self.setVar(invButtonParams.click_function, function() spawnInvestigatorGroup(class) end)
  end
end

function createLevelZeroButtons()
  local l0ButtonParams = {
    function_owner = self,
    height         = CIRCLE_BUTTON_SIZE,
    width          = CIRCLE_BUTTON_SIZE,
    scale          = Vector(0.25, 1, 0.25),
    color          = TRANSPARENT
  }
  local buttonPos = LEVEL_ZERO_ROW_START:copy()
  for _, class in ipairs(CLASS_LIST) do
    l0ButtonParams.click_function = "spawnBasic" .. class
    l0ButtonParams.position = buttonPos
    self.createButton(l0ButtonParams)
    buttonPos.x = buttonPos.x + CLASS_BUTTONS_X_OFFSET
    self.setVar(l0ButtonParams.click_function, function(_, _, _) spawnClassCards(class, false) end)
  end
end

function createUpgradedButtons()
  local upgradedButtonParams = {
    function_owner = self,
    height         = CIRCLE_BUTTON_SIZE,
    width          = CIRCLE_BUTTON_SIZE,
    scale          = Vector(0.25, 1, 0.25),
    color          = TRANSPARENT
  }
  local buttonPos = UPGRADED_ROW_START:copy()
  for _, class in ipairs(CLASS_LIST) do
    upgradedButtonParams.click_function = "spawnUpgraded" .. class
    upgradedButtonParams.position = buttonPos
    self.createButton(upgradedButtonParams)
    buttonPos.x = buttonPos.x + CLASS_BUTTONS_X_OFFSET
    self.setVar(upgradedButtonParams.click_function, function(_, _, _) spawnClassCards(class, true) end)
  end
end

function createWeaknessButtons()
  local weaknessButtonParams = {
    function_owner = self,
    height = CIRCLE_BUTTON_SIZE,
    width = CIRCLE_BUTTON_SIZE,
    scale = Vector(0.25, 1, 0.25),
    color = TRANSPARENT
  }
  local buttonPos = WEAKNESS_ROW_START:copy()
  weaknessButtonParams.click_function = "spawnWeaknesses"
  weaknessButtonParams.tooltip = "All Weaknesses"
  weaknessButtonParams.position = buttonPos
  self.createButton(weaknessButtonParams)

  buttonPos.x = buttonPos.x + MISC_BUTTONS_X_OFFSET
  weaknessButtonParams.click_function = "spawnRandomWeakness"
  weaknessButtonParams.tooltip = "Random Basic Weakness\nRight-click to specify a trait"
  weaknessButtonParams.position = buttonPos
  self.createButton(weaknessButtonParams)
end

function createOtherButtons()
  local otherButtonParams = {
    function_owner = self,
    height = CIRCLE_BUTTON_SIZE,
    width = CIRCLE_BUTTON_SIZE,
    scale = Vector(0.25, 1, 0.25),
    color = TRANSPARENT
  }
  local buttonPos = OTHER_ROW_START:copy()
  otherButtonParams.click_function = "spawnBonded"
  otherButtonParams.tooltip = "Bonded Cards"
  otherButtonParams.position = buttonPos
  self.createButton(otherButtonParams)
  buttonPos.x = buttonPos.x + MISC_BUTTONS_X_OFFSET
  otherButtonParams.click_function = "spawnUpgradeSheets"
  otherButtonParams.tooltip = "Customization Upgrade Sheets"
  otherButtonParams.position = buttonPos
  self.createButton(otherButtonParams)
end

function createCycleButtons()
  local cycleButtonParams = {
    function_owner = self,
    height = CYCLE_BUTTON_SIZE,
    width = CYCLE_BUTTON_SIZE,
    scale = Vector(0.25, 1, 0.25),
    color = TRANSPARENT
  }
  local buttonPos = CYCLE_BUTTON_START:copy()
  local rowCount = 0
  local colCount = 0
  for _, cycle in ipairs(CYCLE_LIST) do
    cycleButtonParams.click_function = "spawnCycle" .. cycle
    cycleButtonParams.position = buttonPos
    cycleButtonParams.tooltip = cycle
    self.createButton(cycleButtonParams)
    self.setVar(cycleButtonParams.click_function, function(_, _, _) spawnCycle(cycle) end)
    colCount = colCount + 1
    -- If we've reached the end of a row, shift down and back to the first column
    if colCount >= CYCLE_COLUMN_COUNT then
      buttonPos = CYCLE_BUTTON_START:copy()
      rowCount = rowCount + 1
      colCount = 0
      buttonPos.z = buttonPos.z + CYCLE_BUTTONS_Z_OFFSET * rowCount
      if rowCount == 3 then
        -- Account for two centered buttons on the final row
        buttonPos.x = buttonPos.x + CYCLE_BUTTONS_X_OFFSET / 2
        -- Account for centered button on the final row
        -- buttonPos.x = buttonPos.x + CYCLE_BUTTONS_X_OFFSET
      end
    else
      buttonPos.x = buttonPos.x + CYCLE_BUTTONS_X_OFFSET
    end
  end
end

function createClearButton()
  self.createButton({
    function_owner = self,
    click_function = "deleteAll",
    position       = Vector(0, 0.1, 0.852),
    height         = 170,
    width          = 750,
    scale          = Vector(0.25, 1, 0.25),
    color          = TRANSPARENT
  })
end

function createInvestigatorModeButtons()
  self.createButton({
    function_owner = self,
    click_function = "setCardsOnlyMode",
    position       = Vector(0.251, 0.1, -0.322),
    height         = 170,
    width          = 760,
    scale          = Vector(0.25, 1, 0.25),
    color          = spawnStarterDecks and TRANSPARENT or STARTER_DECK_MODE_SELECTED_COLOR
  })
  self.createButton({
    function_owner = self,
    click_function = "setspawnStarterDecks",
    position       = Vector(0.66, 0.1, -0.322),
    height         = 170,
    width          = 760,
    scale          = Vector(0.25, 1, 0.25),
    color          = spawnStarterDecks and STARTER_DECK_MODE_SELECTED_COLOR or TRANSPARENT
  })
  local checkX = spawnStarterDecks and 0.52 or 0.11
  self.createButton({
    function_owner = self,
    label          = "✓",
    click_function = "doNothing",
    position       = Vector(checkX, 0.11, -0.317),
    height         = 0,
    width          = 0,
    font_size      = 300,
    scale          = Vector(0.1, 1, 0.1),
    font_color     = { 0, 0, 0 },
    color          = { 1, 1, 1 }
  })
end

-- this will be called by the AllCardsBag after indexing
function createXML(showOtherCardsButton)
  -- basic XML for the help button
  local xmlTable = {
    {
      tag = "Panel",
      attributes = {
        active   = "false",
        id       = "helpPanel",
        position = "-165 -70 -2",
        rotation = "0 0 180",
        height   = "50",
        width    = "107",
        color    = "#00000099"
      },
      children = {
        tag = "Text",
        attributes = {
          id                 = "helpText",
          rectAlignment      = "MiddleCenter",
          height             = "480",
          width              = "1000",
          scale              = "0.1 0.1 1",
          fontSize           = "66",
          color              = "#F5F5F5",
          backgroundColor    = "#FF0000",
          alignment          = "MiddleLeft",
          horizontalOverflow = "wrap",
          text               = "• Select a group to place cards\n" ..
              "• Copy the cards you want for your deck\n" ..
              "• Select a new group to clear the placed cards and see new ones\n" ..
              "• Clear to remove all cards"
        }
      }
    }
  }

  -- add "The Drowned City" cycle button
  local TDCButtonXml = {
    tag = "Panel",
    attributes = {
      position = "58.1 65.5 -11",
      rotation = "0 0 180",
      height   = "225",
      width    = "225",
      scale    = "0.1 0.1 1",
      onClick  = "spawnTDC"
    },
    children = {
      tag = "Image",
      attributes = { image = "TheDrownedCity" }
    }
  }

  -- center the button if it's the only one
  if not showOtherCardsButton then
    TDCButtonXml.attributes.position = "44.25 65.5 -11"
  end
  table.insert(xmlTable, TDCButtonXml)

  -- add the "Additional Cards" button if cards without cycle were detected
  if showOtherCardsButton then
    local otherCardsButtonXml = {
      tag = "Panel",
      attributes = {
        position = "31.45 65.5 -11",
        rotation = "0 0 180",
        height   = "225",
        width    = "225",
        scale    = "0.1 0.1 1",
        onClick  = "spawnOtherCards"
      },
      children = {
        tag = "Image",
        attributes = { image = "OtherCards" }
      }
    }
    table.insert(xmlTable, otherCardsButtonXml)
  end
  helpVisibleToPlayers = {}
  self.UI.setXmlTable(xmlTable)
end

-- click function for the XML button for the additional player cards
function spawnOtherCards()
  spawnCycle("Other")
end

function spawnTDC()
  spawnCycle("The Drowned City")
end

function toggleHelp(_, playerColor, _)
  if helpVisibleToPlayers[playerColor] then
    helpVisibleToPlayers[playerColor] = nil
  else
    helpVisibleToPlayers[playerColor] = true
  end
  updateHelpVisibility()
end

function updateHelpVisibility()
  local visibility = ""
  for player, _ in pairs(helpVisibleToPlayers) do
    if string.len(visibility) > 0 then
      visibility = visibility .. "|" .. player
    else
      visibility = player
    end
  end
  self.UI.setAttribute("helpText", "visibility", visibility)
  self.UI.setAttribute("helpPanel", "visibility", visibility)
  self.UI.setAttribute("helpPanel", "active", string.len(visibility) > 0)
end

function setspawnStarterDecks()
  spawnStarterDecks = true
  updateStarterModeButtons()
end

function setCardsOnlyMode()
  spawnStarterDecks = false
  updateStarterModeButtons()
end

function updateStarterModeButtons()
  local buttonCount = #self.getButtons()
  -- Buttons are 0-indexed, so the last three are -1, -2, and -3 from the size
  self.removeButton(buttonCount - 1)
  self.removeButton(buttonCount - 2)
  self.removeButton(buttonCount - 3)
  createInvestigatorModeButtons()
end

-- Clears the table and updates positions based on scale (should be called before ANY card placement)
function prepareToPlaceCards()
  deleteAll()
  scalePositions()
end

-- Updates the positions based on the current object scale to ensure the relative layout functions
-- properly at different scales.
function scalePositions()
  -- Assume scaling is consistent in X and Z dimensions
  local scale = 1 / self.getScale().x
  startPositions = {}
  for key, pos in pairs(START_POSITIONS) do
    -- Because a scaled object means a different global size, using global distance for Z results in
    -- the cards being closer or farther depending on the scale. Leave the Z values and only scale X and Y
    startPositions[key] = Vector(pos):scale(Vector(scale, scale, 1))
  end
  cardRowOffset                = CARD_ROW_OFFSET * scale
  cardGroupOffset              = CARD_GROUP_OFFSET * scale
  investigatorPositionShiftRow = Vector(INVESTIGATOR_POSITION_SHIFT_ROW):scale(scale)
  investigatorPositionShiftCol = Vector(INVESTIGATOR_POSITION_SHIFT_COL):scale(scale)
  investigatorCardOffset       = Vector(INVESTIGATOR_CARD_OFFSET):scale(scale)
  investigatorSignatureOffset  = Vector(INVESTIGATOR_SIGNATURE_OFFSET):scale(scale)
end

-- Deletes all cards currently placed on the table
function deleteAll()
  SpawnBag.recall(true)
end

-- Spawn an investigator group, based on the current UI setting for either investigators or starter decks
---@param groupName string Name of the group to spawn, matching a key in InvestigatorPanelData
function spawnInvestigatorGroup(groupName)
  prepareToPlaceCards()
  Wait.frames(function()
    if spawnStarterDecks then
      spawnStarters(groupName)
    else
      spawnInvestigators(groupName)
    end
  end, 2)
end

function tableContains(t, val)
  for k, v in ipairs(t) do
    if v == val then
      return true
    end
  end
  return false
end

-- Spawn cards for all investigators in the given group. This creates piles for all defined
-- investigator cards and minicards as well as the signature cards.
---@param groupName string Name of the group to spawn, matching a key in InvestigatorPanelData
function spawnInvestigators(groupName)
  local cycle, class

  -- determine whether it's a cycle or class
  if tableContains(CLASS_LIST, groupName) then
    class = groupName
  else
    cycle = groupName
  end

  local invData = AllCardsBagApi.getInvestigatorData(cycle, class)

  local col = 0
  local row = 1
  local investigatorCount = #invData.InvestigatorGroup
  local position = getInvestigatorRowStartPos(investigatorCount, row)

  for _, investigatorName in ipairs(invData.InvestigatorGroup) do
    col = col + 1
    if col > INVESTIGATOR_MAX_COLS then
      col      = 0
      row      = row + 1
      position = getInvestigatorRowStartPos(investigatorCount, row)
    end

    for _, spawnSpec in ipairs(buildInvestigatorSpawnSpec(investigatorName, invData.InvestigatorSubdata[investigatorName], position)) do
      SpawnBag.spawn(spawnSpec)
    end
    position:add(investigatorPositionShiftCol)
  end
  return row
end

function getInvestigatorRowStartPos(investigatorCount, row)
  local rowOffset = Vector(investigatorPositionShiftRow):scale(row - 1)
  local investigatorsInRow = math.min(investigatorCount - INVESTIGATOR_MAX_COLS * (row - 1), INVESTIGATOR_MAX_COLS)
  local colOffset = Vector(investigatorPositionShiftCol):scale((INVESTIGATOR_MAX_COLS - investigatorsInRow) / 2)

  local rowStart = Vector(startPositions.investigator)
  rowStart:add(rowOffset)
  rowStart:add(colOffset)
  return rowStart
end

-- Creates the spawn spec for the investigator's signature cards.
---@param investigatorName string Name of the investigator, matching a key in InvestigatorPanelData
---@param investigatorData table Spawn definition for the investigator, retrieved from INVESTIGATORS
---@param position tts__Vector Where to spawn the minicard; investigagor cards will be placed below
function buildInvestigatorSpawnSpec(investigatorName, investigatorData, position)
  local sigPos = Vector(position):add(investigatorSignatureOffset)
  local spawns = buildCommonSpawnSpec(investigatorName, investigatorData, position)
  table.insert(spawns, {
    name      = investigatorName .. "signatures",
    cards     = investigatorData.signatures,
    globalPos = self.positionToWorld(sigPos),
    rotation  = FACE_UP_ROTATION
  })
  return spawns
end

-- Builds the spawn specs for minicards and investigator cards. These are common enough to be
-- shared, and will only differ in whether they spawn the full stack of possible investigator and
-- minicards, or only the first of each.
---@param investigatorName string Name of the investigator, matching a key in InvestigatorPanelData
---@param investigatorData table Spawn definition for the investigator, retrieved from INVESTIGATORS
---@param position tts__Vector Where to spawn the minicard; investigagor cards will be placed below
---@param index? number If true, will spawn only that card from the investigator card
---    and minicard lists. Otherwise, spawn them all in a deck.
function buildCommonSpawnSpec(investigatorName, investigatorData, position, index)
  local cardPos = Vector(position):add(investigatorCardOffset)
  return {
    {
      name      = investigatorName .. "minicards",
      cards     = index and { investigatorData.minicards[index] } or investigatorData.minicards,
      globalPos = self.positionToWorld(position),
      rotation  = FACE_UP_ROTATION
    },
    {
      name      = investigatorName .. "cards",
      cards     = index and { investigatorData.cards[index] } or investigatorData.cards,
      globalPos = self.positionToWorld(cardPos),
      rotation  = FACE_UP_ROTATION
    }
  }
end

-- Spawns all starter decks (single minicard and investigator card, plus the starter deck) for
-- investigators in the given group.
---@param class string Name of the group to spawn, matching a key in InvestigatorPanelData
function spawnStarters(class)
  local col = 1
  local row = 1
  local investigatorCount = #INVESTIGATOR_GROUPS[class]
  local position = getInvestigatorRowStartPos(investigatorCount, row)
  for _, investigatorName in ipairs(INVESTIGATOR_GROUPS[class]) do
    spawnStarterDeck(investigatorName, INVESTIGATORS[investigatorName], position, class)
    position:add(investigatorPositionShiftCol)
    col = col + 1
    if col > INVESTIGATOR_MAX_COLS then
      col      = 1
      row      = row + 1
      position = getInvestigatorRowStartPos(investigatorCount, row)
    end
  end
end

-- Spawns the defined starter deck for the given investigator
function spawnStarterDeck(investigatorName, investigatorData, position, class)
  -- determine investigator ID (in case there are multiple, take the first that matches class to handle Agatha)
  local index, starterDeck

  for i, id in ipairs(investigatorData.cards) do
    local card = AllCardsBagApi.getCardById(id)
    if card and card.metadata and card.metadata.class and card.metadata.class == class then
      index = i
      starterDeck = card.metadata.starterDeck
      break
    end
  end

  if not index then return end

  for _, spawnSpec in ipairs(buildCommonSpawnSpec(investigatorName, investigatorData, position, index)) do
    SpawnBag.spawn(spawnSpec)
  end

  local deckPos = Vector(position):add(investigatorSignatureOffset)

  -- early exit if this investigator does not have a starter deck
  if not starterDeck then return end

  WebInterface.getDecklist("None", starterDeck, true, false, false, function(slots)
    local cardIdList = {}
    for id, count in pairs(slots) do
      for i = 1, count do
        -- don't include mini-cards and investigators
        local card = AllCardsBagApi.getCardById(id)
        if card and card.metadata and card.metadata.type ~= "Investigator" and card.metadata.type ~= "Minicard" then
          table.insert(cardIdList, id)
        end
      end
    end

    SpawnBag.spawn({
      name      = investigatorName .. "starter",
      cards     = cardIdList,
      globalPos = self.positionToWorld(deckPos),
      rotation  = FACE_DOWN_ROTATION
    })
  end)
end

-- Clears the currently placed cards, then places cards for the given class and level spread
---@param cardClass string Class to place ("Guardian", "Seeker", etc)
---@param isUpgraded boolean If true, spawn the Level 1-5 cards. Otherwise, Level 0.
function spawnClassCards(cardClass, isUpgraded)
  prepareToPlaceCards()
  Wait.frames(function() placeClassCards(cardClass, isUpgraded) end, 2)
end

-- Spawn the class cards.
---@param cardClass string Class to place ("Guardian", "Seeker", etc)
---@param isUpgraded boolean If true, spawn the Level 1-5 cards. Otherwise, Level 0.
function placeClassCards(cardClass, isUpgraded)
  if not AllCardsBagApi.isIndexReady() then return end

  local cardIdList = AllCardsBagApi.getCardsByClassAndLevel(cardClass, isUpgraded)

  local skillList = {}
  local eventList = {}
  local assetList = {}
  for _, cardId in ipairs(cardIdList) do
    local cardMetadata = AllCardsBagApi.getCardById(cardId).metadata
    if (cardMetadata.type == "Skill") then
      table.insert(skillList, cardId)
    elseif (cardMetadata.type == "Event") then
      table.insert(eventList, cardId)
    elseif (cardMetadata.type == "Asset") then
      table.insert(assetList, cardId)
    end
  end
  local groupPos = Vector(startPositions.classCards)
  if #skillList > 0 then
    SpawnBag.spawn({
      name       = cardClass .. (isUpgraded and "upgraded" or "basic"),
      cards      = skillList,
      globalPos  = self.positionToWorld(groupPos),
      rotation   = FACE_UP_ROTATION,
      spread     = true,
      spreadCols = CARD_MAX_COLS
    })
    groupPos.z = groupPos.z + math.ceil(#skillList / CARD_MAX_COLS) * cardRowOffset + cardGroupOffset
  end
  if #eventList > 0 then
    SpawnBag.spawn({
      name       = cardClass .. "event" .. (isUpgraded and "upgraded" or "basic"),
      cards      = eventList,
      globalPos  = self.positionToWorld(groupPos),
      rotation   = FACE_UP_ROTATION,
      spread     = true,
      spreadCols = CARD_MAX_COLS
    })
    groupPos.z = groupPos.z + math.ceil(#eventList / CARD_MAX_COLS) * cardRowOffset + cardGroupOffset
  end
  if #assetList > 0 then
    SpawnBag.spawn({
      name       = cardClass .. "asset" .. (isUpgraded and "upgraded" or "basic"),
      cards      = assetList,
      globalPos  = self.positionToWorld(groupPos),
      rotation   = FACE_UP_ROTATION,
      spread     = true,
      spreadCols = CARD_MAX_COLS
    })
  end
end

-- Spawns the investigator sets and all cards for the given cycle
---@param cycle string Name of a cycle, should match the standard used in card metadata
function spawnCycle(cycle)
  if not AllCardsBagApi.isIndexReady() then return end

  -- sort custom cards and include cards without level
  local sortByMetadata = false
  local includeNoLevelCards = false
  if cycle == "Other" then
    sortByMetadata = true
    includeNoLevelCards = true
  end
  local cardList = AllCardsBagApi.getCardsByCycle(cycle, sortByMetadata, includeNoLevelCards)

  prepareToPlaceCards()
  local rowCount = spawnInvestigators(cycle)

  if #cardList == 0 then
    printToAll("Didn't find any cards for '" .. cycle .. "'.")
    return
  end

  -- need to shift the start position for cycle down if there are multiple rows of investigators
  local rowOffset = Vector((rowCount - 1) * investigatorPositionShiftRow)
  local cycleStartPos = Vector(startPositions.cycle):add(rowOffset)

  -- potentially don't spawn all cards if there are too many
  local maxCardCount = (CARD_MAX_ROWS - rowCount * 3) * CARD_MAX_COLS
  if #cardList > maxCardCount then
    printToAll("Only spawning the first " .. maxCardCount .. " cards from " .. #cardList .. " total cards.")
    cardList = table.pack(table.unpack(cardList, 1, maxCardCount))
  end

  SpawnBag.spawn({
    name       = "cycle" .. cycle,
    cards      = cardList,
    globalPos  = self.positionToWorld(cycleStartPos),
    rotation   = FACE_UP_ROTATION,
    spread     = true,
    spreadCols = CARD_MAX_COLS
  })
end

function spawnBonded()
  if not AllCardsBagApi.isIndexReady() then return end

  prepareToPlaceCards()
  SpawnBag.spawn({
    name       = "bonded",
    cards      = AllCardsBagApi.getBondedCardList(),
    globalPos  = self.positionToWorld(startPositions.classCards),
    rotation   = FACE_UP_ROTATION,
    spread     = true,
    spreadCols = CARD_MAX_COLS
  })
end

function spawnUpgradeSheets()
  if not AllCardsBagApi.isIndexReady() then return end

  prepareToPlaceCards()
  local upgradeSheetList = AllCardsBagApi.getUpgradeSheetList()
  SpawnBag.spawn({
    name       = "upgradeSheets",
    cards      = upgradeSheetList,
    globalPos  = self.positionToWorld(startPositions.classCards),
    rotation   = FACE_UP_ROTATION,
    spread     = true,
    spreadCols = CARD_MAX_COLS
  })

  -- special handling for Summoned Servitor
  local index
  for i, id in ipairs(upgradeSheetList) do
    if id == "09080-c" then
      index = i
    end
  end

  -- if upgradesheet is missing for some reason
  if not index then return end

  -- get the position above the Summoned Servitor Upgradesheet
  local firstRowLength = math.min(#upgradeSheetList, CARD_MAX_COLS)
  local scale = 1 / self.getScale().x
  local ssPos = Vector(CARD_WIDTH * (firstRowLength / 2 - index + 0.5), 2, 1.14)
  ssPos:scale(Vector(scale, scale, 1))

  SpawnBag.spawn({
    name      = "servitor",
    cards     = { "09080-m" },
    globalPos = self.positionToWorld(ssPos),
    rotation  = FACE_UP_ROTATION
  })
end

-- Clears the current cards, and places all basic weaknesses on the table.
function spawnWeaknesses()
  if not AllCardsBagApi.isIndexReady() then return end

  prepareToPlaceCards()

  -- exclude custom signature weaknesses
  local customExcludeList = {}
  local customInvestigatorData = AllCardsBagApi.getCustomInvestigatorData()
  for investigatorId, invdata in pairs(customInvestigatorData.InvestigatorSubdata or {}) do
    for _, cardId in ipairs(invdata.signatures or {}) do
      customExcludeList[cardId] = true
    end
  end

  local basicWeaknessList = {}
  local otherWeaknessList = {}
  for _, id in ipairs(AllCardsBagApi.getUniqueWeaknesses()) do
    local cardMetadata = AllCardsBagApi.getCardById(id).metadata
    if cardMetadata.basicWeaknessCount ~= nil and cardMetadata.basicWeaknessCount > 0 then
      table.insert(basicWeaknessList, id)
    elseif excludedNonBasicWeaknesses[id] == nil and customExcludeList[id] == nil then
      table.insert(otherWeaknessList, id)
    end
  end
  local groupPos = Vector(startPositions.classCards)
  SpawnBag.spawn({
    name       = "basicWeaknesses",
    cards      = basicWeaknessList,
    globalPos  = self.positionToWorld(groupPos),
    rotation   = FACE_UP_ROTATION,
    spread     = true,
    spreadCols = CARD_MAX_COLS
  })
  groupPos.z = groupPos.z + math.ceil(#basicWeaknessList / CARD_MAX_COLS) * cardRowOffset + cardGroupOffset

  local evolvedWeaknessList = AllCardsBagApi.getEvolvedWeaknesses()
  SpawnBag.spawn({
    name       = "evolvedWeaknesses",
    cards      = evolvedWeaknessList,
    globalPos  = self.positionToWorld(groupPos),
    rotation   = FACE_UP_ROTATION,
    spread     = true,
    spreadCols = CARD_MAX_COLS
  })
  groupPos.z = groupPos.z + math.ceil(#evolvedWeaknessList / CARD_MAX_COLS) * cardRowOffset + cardGroupOffset
  SpawnBag.spawn({
    name       = "otherWeaknesses",
    cards      = otherWeaknessList,
    globalPos  = self.positionToWorld(groupPos),
    rotation   = FACE_UP_ROTATION,
    spread     = true,
    spreadCols = CARD_MAX_COLS
  })
end

function spawnRandomWeakness(_, playerColor, isRightClick)
  prepareToPlaceCards()

  if not isRightClick then
    local weaknessIds = AllCardsBagApi.getRandomWeaknessIds(1)
    if weaknessIds[1] then
      spawnSingleWeakness(weaknessIds[1])
    end
  else
    Player[playerColor].showInputDialog("Specify a trait for the weakness (split multiple eligible traits with '|'):",
      lastWeaknessTrait,
      function(text)
        lastWeaknessTrait = text
        local weaknessIds = AllCardsBagApi.getRandomWeaknessIds(1, { traits = text })
        if weaknessIds[1] then
          spawnSingleWeakness(weaknessIds[1])
        end
      end)
  end
end

-- spawn the random weakness
function spawnSingleWeakness(weaknessId)
  SpawnBag.spawn({
    name = "randomWeakness",
    cards = { weaknessId },
    globalPos = self.positionToWorld(startPositions.randomWeakness),
    rotation = FACE_UP_ROTATION
  })
end
