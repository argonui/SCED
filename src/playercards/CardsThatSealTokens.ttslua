--[[ Library for cards that seal tokens
This file is used to add sealing option to cards' context menu.
NOTE: all cards are allowed to release a single token to enable Hallow and A Watchful Peace,
and to release all sealed tokens to allow for cards that might leave play with sealed tokens on them.
Valid options (set before requiring this file):

MAX_SEALED          --@type: number (maximum number of tokens allowable by the card to be sealed)
  - required for all cards
  - if MAX_SEALED is more than 1, then an XML label is created for the topmost token indicating the number of sealed tokens
  - gives an error if user tries to seal additional tokens on the card
  - example usage: "The Chthonian Stone"
    > MAX_SEALED = 1

UPDATE_ON_HOVER     --@type: boolean
  - automatically updates the context menu options when the card is hovered
  - the "Read Bag" function reads the content of the chaos bag to update the context menu
  - example usage: "Unrelenting" (to only display valid tokens)

KEEP_OPEN           --@type: boolean
- meant for cards that seal single tokens multiple times (one by one)
- makes the context menu stay open after selecting an option
- example usage: "Unrelenting"

SHOW_MULTI_RELEASE  --@type: number (maximum amount of tokens to release at once)
  - enables an entry in the context menu
  - this entry allows releasing of multiple tokens at once, to the maximum number
  - does not fail if there are fewer than the maximum sealed
  - example usage: "Nephthys" (to release up to 3 bless tokens at once)

SHOW_MULTI_RETURN   --@type: number (amount of tokens to return to pool at once)
  - enables an entry in the context menu
  - this entry allows returning tokens to the token pool
  - fails if not enough tokens are sealed
  - example usage: "Nephthys" (to return 3 bless tokens at once)

SHOW_RETURN_ALL   --@boolean:
  - enables an entry in the context menu
  - this entry allows returning all sealed tokens to the token pool
  - example usage: "Radiant Smite" (to return whatever number of bless tokens that are sealed at once)

SHOW_MULTI_SEAL     --@type: number (amount of tokens to seal at once)
  - enables an entry in the context menu
  - this entry allows sealing of multiple tokens at once
  - example usage: "Holy Spear" (to seal two bless tokens at once)

VALID_TOKENS        --@type: table ([tokenName] = true)
  - this table defines which tokens should be abled to be sealed
  - needs to be defined for each card -> even if empty
  - example usage: "The Chthonian Stone"
    > VALID_TOKENS = {
    >   ["Skull"]       = true,
    >   ["Cultist"]     = true,
    >   ["Tablet"]      = true,
    >   ["Elder Thing"] = true,
    > }

INVALID_TOKENS      --@type: table ([tokenName] = true)
  - this table defines which tokens are invalid for sealing
  - only needs to be defined if needed
  - usually combined with empty "VALID_TOKENS" table
  - example usage: "Protective Incantation" (not allowed to seal Auto-fail)

----------------------------------------------------------
Example 1: Crystalline Elder Sign
This card can only seal the "+1" or "Elder Sign" token,
it does not need specific options for multi-sealing or releasing.
Thus it should be implemented like this:
  > VALID_TOKENS = {
  >   ["+1"] = true,
  >   ["Elder Sign"] = true
  > }
  > MAX_SEALED = 1
  > require...
----------------------------------------------------------
Example 2: Holy Spear
This card features the following abilities (just listing the relevant parts):
- releasing a single bless token
- sealing two bless tokens
Thus it should be implemented like this:
  > VALID_TOKENS = {
  >   ["Bless"] = true
  > }
  > SHOW_MULTI_SEAL = 2
  > MAX_SEALED = 10
  > require...
----------------------------------------------------------]]

local BlessCurseManagerApi = require("chaosbag/BlessCurseManagerApi")
local ChaosBagApi          = require("chaosbag/ChaosBagApi")
local PlayermatApi         = require("playermat/PlayermatApi")
local TokenArrangerApi     = require("tokens/TokenArrangerApi")

local sealedTokens         = {}
local ID_URL_MAP           = {}
local tokensInBag          = {}

-- XML background color for each token for label when stacked
local tokenColor           = {
  ["Skull"]       = "#4A0400E6",
  ["Cultist"]     = "#173B0BE6",
  ["Tablet"]      = "#1D2238E6",
  ["Elder Thing"] = "#4D2331E6",
  ["Auto-fail"]   = "#9B0004E6",
  ["Bless"]       = "#9D702CE6",
  ["Curse"]       = "#633A84E6",
  ["Frost"]       = "#4A487BE6",
  ["Elder Sign"]  = "#50A8CEE6",
  [""]            = "#77674DE6"
}

function updateSave()
  updateStackSize()
  self.script_state = JSON.encode(sealedTokens)
end

function onLoad(savedData)
  -- if MAX_SEALED is not set, default to 99
  MAX_SEALED = MAX_SEALED or 99

  -- verify sealed tokens
  for _, guid in ipairs(JSON.decode(savedData) or {}) do
    local token = getObjectFromGUID(guid)
    if token ~= nil then
      table.insert(sealedTokens, guid)
    end
  end

  ID_URL_MAP = ChaosBagApi.getIdUrlMap()
  generateContextMenu()
  updateStackSize()
  self.addTag("CardThatSeals")
end

-- builds the context menu
function generateContextMenu()
  self.addContextMenuItem("Release one token", releaseOneToken)

  -- conditional release options
  if MAX_SEALED > 1 then
    self.addContextMenuItem("Release all tokens", releaseAllTokens)
  end

  if SHOW_MULTI_RELEASE then
    self.addContextMenuItem("Release " .. SHOW_MULTI_RELEASE .. " token(s)", releaseMultipleTokens)
  end

  if RESOLVE_TOKEN then
    local label
    for tokenType, val in pairs(VALID_TOKENS) do
      if label and label ~= tokenType then
        label = "sealed token"
        break
      else
        label = tokenType
      end
    end
    self.addContextMenuItem("Resolve " .. label, resolveSealed)
  end

  if SHOW_MULTI_RETURN then
    self.addContextMenuItem("Return " .. SHOW_MULTI_RETURN .. " token(s)", returnMultipleTokens)
  end

  if SHOW_RETURN_ALL then
    self.addContextMenuItem("Return all tokens", returnAllTokens)
  end

  -- main context menu options to seal tokens
  for _, map in pairs(ID_URL_MAP) do
    if (VALID_TOKENS[map.name] ~= nil) or (UPDATE_ON_HOVER and tokensInBag[map.name] and INVALID_TOKENS and not INVALID_TOKENS[map.name]) then
      if not SHOW_MULTI_SEAL then
        self.addContextMenuItem("Seal " .. map.name, function(playerColor)
          self.removeFromPlayerSelection(playerColor)
          if not ChaosBagApi.canTouchChaosTokens() then return end
          sealToken(map.name, playerColor)
        end, KEEP_OPEN)
      else
        self.addContextMenuItem("Seal " .. SHOW_MULTI_SEAL .. " " .. map.name, function(playerColor)
          self.removeFromPlayerSelection(playerColor)
          if not ChaosBagApi.canTouchChaosTokens() then return end
          readBag()
          local allowed = true
          local notFound

          for name, _ in pairs(VALID_TOKENS) do
            if (tokensInBag[name] or 0) < SHOW_MULTI_SEAL then
              allowed = false
              notFound = name
            end
          end

          if allowed then
            for i = SHOW_MULTI_SEAL, 1, -1 do
              sealToken(map.name, playerColor)
            end
          else
            printToColor("Not enough " .. notFound .. " tokens in the chaos bag.", playerColor)
          end
        end)
      end
    end
  end
end

-- generates a list of chaos tokens that is in the chaos bag
function readBag()
  local chaosbag = ChaosBagApi.findChaosBag()
  tokensInBag = {}

  for _, token in ipairs(chaosbag.getObjects()) do
    tokensInBag[token.name] = (tokensInBag[token.name] or 0) + 1
  end
end

function resetSealedTokens()
  sealedTokens = {}
  updateSave()
end

-- native event from TTS - used to update the context menu for cards like "Unrelenting"
function onHover()
  if UPDATE_ON_HOVER then
    readBag()
    self.clearContextMenu()
    generateContextMenu()
  end
end

-- seals the named token on this card
function sealToken(name, playerColor)
  if #sealedTokens >= MAX_SEALED then
    printToColor("Cannot seal any more tokens on this card", playerColor, "Red")
    return
  end
  if not ChaosBagApi.canTouchChaosTokens() then return end
  local chaosbag = ChaosBagApi.findChaosBag()
  for i, obj in ipairs(chaosbag.getObjects()) do
    if obj.name == name then
      return chaosbag.takeObject({
        position = self.getPosition() + Vector(0, 0.5 + 0.1 * #sealedTokens, 0),
        rotation = self.getRotation(),
        index = i - 1,
        smooth = false,
        callback_function = function(token)
          local guid = token.getGUID()
          table.insert(sealedTokens, guid)
          TokenArrangerApi.layout()
          if name == "Bless" or name == "Curse" then
            BlessCurseManagerApi.sealedToken(name, guid)
          end
          -- destroy XML on just covered token
          if #sealedTokens > 1 then
            local coveredToken = getObjectFromGUID(sealedTokens[#sealedTokens - 1])
            if coveredToken ~= nil then
              coveredToken.UI.setXml("")
            else
              table.remove(sealedTokens, #sealedTokens - 1)
            end
          end
          updateSave()
        end
      })
    end
  end
  printToColor(name .. " token not found in chaos bag", playerColor)
end

-- release the last sealed token
function releaseOneToken(playerColor)
  self.removeFromPlayerSelection(playerColor)
  if not ChaosBagApi.canTouchChaosTokens() then return end
  if #sealedTokens == 0 then
    printToColor("No sealed token(s) found", playerColor)
  else
    printToColor("Releasing token", playerColor)

    -- make list of token names
    local tokenNames = {}
    local differentNames = 0
    for _, guid in ipairs(sealedTokens) do
      local token = getObjectFromGUID(guid)
      if token ~= nil then
        local name = token.getName()
        if tokenNames[name] == nil then
          differentNames = differentNames + 1
        end
        tokenNames[name] = guid
      end
    end

    -- if there are multiple tokens, ask the player to choose
    if differentNames < 2 then
      putTokenAway(table.remove(sealedTokens))
      updateSave()
    else
      local choices = {}
      for name, _ in pairs(tokenNames) do
        table.insert(choices, name)
      end
      Player[playerColor].showOptionsDialog("Choose token to release:", choices, 1, function(optionText, optionIndex)
        for i = #sealedTokens, 1, -1 do
          local token = getObjectFromGUID(sealedTokens[i])
          if token ~= nil and token.getName() == optionText then
            putTokenAway(table.remove(sealedTokens, i))
            updateSave()
            break
          end
        end
      end)
    end
  end
  Player[playerColor].clearSelectedObjects()
end

-- release up to multiple tokens at once with no minimum
function releaseMultipleTokens(playerColor)
  self.removeFromPlayerSelection(playerColor)
  if not ChaosBagApi.canTouchChaosTokens() then return end
  if #sealedTokens == 0 then
    printToColor("Not enough tokens sealed.", playerColor)
    return
  end

  local numRemoved = SHOW_MULTI_RELEASE
  if #sealedTokens < SHOW_MULTI_RELEASE then
    numRemoved = #sealedTokens
  end

  for i = 1, numRemoved do
    putTokenAway(table.remove(sealedTokens))
  end
  updateSave()
  printToColor("Releasing " .. numRemoved .. " tokens", playerColor)
  Player[playerColor].clearSelectedObjects()
end

function releaseAllTokensWrapper(params)
  releaseAllTokens(params.playerColor, nil, nil, params.filterName, params.silent)
end

-- releases all sealed tokens
---@param filterName? string Name of the token that should be returned
---@param silent? boolean True if all messages should be surpressed
function releaseAllTokens(playerColor, _, _, filterName, silent)
  self.removeFromPlayerSelection(playerColor)
  if not ChaosBagApi.canTouchChaosTokens() then return end
  if #sealedTokens == 0 then
    if not silent then
      printToColor("No sealed token(s) found", playerColor)
    end
  else
    if not silent then
      printToColor("Releasing token(s)", playerColor)
    end

    for i = #sealedTokens, 1, -1 do
      local success = putTokenAway(sealedTokens[i], filterName, silent)
      if success then
        table.remove(sealedTokens, i)
      end
    end

    updateSave()
  end
  Player[playerColor].clearSelectedObjects()
end

-- returns multiple tokens at once to the token pool (with minimum)
function returnMultipleTokens(playerColor)
  self.removeFromPlayerSelection(playerColor)
  if not ChaosBagApi.canTouchChaosTokens() then return end
  if SHOW_MULTI_RETURN <= #sealedTokens then
    for i = 1, SHOW_MULTI_RETURN do
      returnToken(table.remove(sealedTokens))
    end
    updateSave()
    printToColor("Returning " .. SHOW_MULTI_RETURN .. " tokens to the token pool", playerColor)
  else
    printToColor("Not enough tokens sealed.", playerColor)
  end
  Player[playerColor].clearSelectedObjects()
end

-- returns all sealed tokens to the token pool
function returnAllTokens(playerColor)
  self.removeFromPlayerSelection(playerColor)
  if not ChaosBagApi.canTouchChaosTokens() then return end
  printToColor("Returning " .. #sealedTokens .. " tokens to the token pool", playerColor)
  for i = 1, #sealedTokens do
    returnToken(table.remove(sealedTokens))
  end
  updateSave()
  Player[playerColor].clearSelectedObjects()
end

-- returns the token (referenced by GUID) to the chaos bag
---@param filterName? string Name of the token that should be returned
---@param silent? boolean True if all messages should be surpressed
---@return boolean: True if a token was returned
function putTokenAway(guid, filterName, silent)
  local token = getObjectFromGUID(guid)
  if not token then return false end

  local name = token.getName()
  if filterName and filterName ~= name then return false end

  local chaosbag = ChaosBagApi.findChaosBag()
  chaosbag.putObject(token)

  TokenArrangerApi.layout()

  if name == "Bless" or name == "Curse" then
    BlessCurseManagerApi.releasedToken(name, guid, nil, silent)
  end

  return true
end

-- returns the token to the pool (== removes it)
function returnToken(guid)
  local token = getObjectFromGUID(guid)
  if not token then return end

  local name = token.getName()
  token.destruct()
  if name == "Bless" or name == "Curse" then
    BlessCurseManagerApi.returnedToken(name, guid)
  end
end

-- resolves sealed token as if it came from the chaos bag
function resolveSealed(playerColor)
  self.removeFromPlayerSelection(playerColor)
  if #sealedTokens == 0 then
    broadcastToAll("No tokens sealed.", "Red")
    return
  end

  -- make list of token names
  local tokenNames = {}
  local differentNames = 0
  for _, guid in ipairs(sealedTokens) do
    local token = getObjectFromGUID(guid)
    if token ~= nil then
      local name = token.getName()
      if tokenNames[name] == nil then
        differentNames = differentNames + 1
      end
      tokenNames[name] = guid
    end
  end

  -- if there are multiple tokens, ask the player to choose
  if differentNames < 2 then
    resolveTokenByGuid(playerColor, table.remove(sealedTokens))
    updateSave()
  else
    local choices = {}
    for name, _ in pairs(tokenNames) do
      table.insert(choices, name)
    end
    Player[playerColor].showOptionsDialog("Choose token to resolve:", choices, 1, function(optionText, optionIndex)
      for i = #sealedTokens, 1, -1 do
        local token = getObjectFromGUID(sealedTokens[i])
        if token ~= nil and token.getName() == optionText then
          resolveTokenByGuid(playerColor, table.remove(sealedTokens, i))
          updateSave()
          return
        end
      end
    end)
  end
end

function resolveTokenByGuid(playerColor, guidToBeResolved)
  local resolvedToken = getObjectFromGUID(guidToBeResolved)
  if resolvedToken ~= nil then
    resolvedToken.UI.setXml("")
  end

  local closestMatColor = PlayermatApi.getMatColorByPosition(self.getPosition())
  ChaosBagApi.drawChaosToken(closestMatColor, true, _, guidToBeResolved)
  Player[playerColor].clearSelectedObjects()
end

function updateStackSize()
  if MAX_SEALED == 1 then return end
  if #sealedTokens == 0 then return end

  -- get topmost sealed token
  local topToken = getObjectFromGUID(sealedTokens[#sealedTokens])
  if topToken == nil then return end

  -- handling for two-digit numbers
  local fontsize = 380
  if #sealedTokens > 9 then
    fontsize = 360
  end

  topToken.UI.setXmlTable({
    {
      tag = "Panel",
      attributes = {
        height = 380,
        width = 380,
        rotation = "0 0 180",
        scale = "0.2 0.2 1",
        position = "0 0 -12",
        color = tokenColor[topToken.getName()] or "#77674DE6"
      },
      children = {
        tag = "Text",
        attributes = {
          fontSize = fontsize,
          font = "font_teutonic-arkham",
          color = "#ffffff",
          outline = "#000000",
          outlineSize = "8 -8",
          text = "x" .. #sealedTokens
        }
      }
    }
  })
end
