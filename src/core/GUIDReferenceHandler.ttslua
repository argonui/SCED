local SearchLib = require("util/SearchLib")

local GuidReferences = {
  White = {
    ClueCounter              = "d86b7c",
    DamageCounter            = "eb08d6",
    HandZone                 = "a70eee",
    HorrorCounter            = "468e88",
    InvestigatorSkillTracker = "e598c2",
    Playermat                = "8b081b",
    ResourceCounter          = "4406f0",
    TokenDiscardZone         = "457de3",
    TokenDrawDummy           = "dummy1",
    Trash                    = "147e80"
  },
  Orange = {
    ClueCounter              = "1769ed",
    DamageCounter            = "e64eec",
    HandZone                 = "5fe087",
    HorrorCounter            = "0257d9",
    InvestigatorSkillTracker = "b4a5f7",
    Playermat                = "bd0ff4",
    ResourceCounter          = "816d84",
    TokenDiscardZone         = "457de4",
    TokenDrawDummy           = "dummy2",
    Trash                    = "f7b6c8"
  },
  Green = {
    ClueCounter              = "032300",
    DamageCounter            = "1f5a0a",
    HandZone                 = "0285cc",
    HorrorCounter            = "7b5729",
    InvestigatorSkillTracker = "af7ed7",
    ResourceTokenBag         = "0168ae",
    DamageTokenBag           = "b0ef6c",
    HorrorTokenBag           = "ae1a4e",
    ClueTokenBag             = "fae2f6",
    DoomTokenBag             = "16724b",
    DynamicTokenBag          = "340ff1",
    Playermat                = "383d8b",
    ResourceCounter          = "cd15ac",
    TokenDiscardZone         = "457de5",
    TokenDrawDummy           = "dummy3",
    TokenRemover             = "2ba7a5",
    Trash                    = "5f896a"
  },
  Red = {
    ClueCounter              = "37be78",
    DamageCounter            = "591a45",
    HandZone                 = "be2f17",
    HorrorCounter            = "beb964",
    InvestigatorSkillTracker = "e74881",
    ResourceTokenBag         = "fd617a",
    DamageTokenBag           = "93f4a0",
    HorrorTokenBag           = "7bd2a0",
    ClueTokenBag             = "3b2550",
    DoomTokenBag             = "16fcd6",
    DynamicTokenBag          = "340ec8",
    Playermat                = "0840d5",
    ResourceCounter          = "a4b60d",
    TokenDiscardZone         = "457de6",
    TokenDrawDummy           = "dummy4",
    TokenRemover             = "39b175",
    Trash                    = "4b8594"
  },
  Mythos = {
    AdditionalPlayerCardsBag = "2cba6b",
    AllCardsBag              = "15bb07",
    BlessCurseManager        = "5933fb",
    CampaignNotZ             = "64a613",
    ChaosBagReserve          = "106418",
    CleanUpHelper            = "26cf4b",
    ClueTokenBag             = "31fa39",
    DamageTokenBag           = "480bda",
    DeckImporter             = "a28140",
    DoomCounter              = "85c4c6",
    DoomInPlayCounter        = "652ff3",
    DoomTokenBag             = "47ffc3",
    DynamicTokenBag          = "a3efc9",
    HorrorTokenBag           = "c3ecf4",
    InvestigatorCounter      = "f182ee",
    MasterClueCounter        = "4a3aa4",
    MythosArea               = "9f334f",
    NavigationOverlayHandler = "797ede",
    ObjectSourceBag          = "830bd0",
    PlaceholderBoxDummy      = "a93466",
    PlayArea                 = "721ba2",
    PlayAreaImageSelector    = "b7b45b",
    PlayAreaZone             = "a2f932",
    PlayerCardPanel          = "2d30ee",
    ResourceTokenBag         = "9fadf9",
    RulesReference           = "d99993",
    SoundCube                = "3c988f",
    StatTracker              = "766620",
    TokenArranger            = "022907",
    TokenRemover             = "0a5a29",
    TokenSource              = "124381",
    TokenSpawnTracker        = "e3ffc9",
    TourStarter              = "0e5aa8",
    Trash                    = "70b9f6",
    VictoryDisplay           = "6ccd6d"
  }
}

local editsToIndex = {
  White  = {},
  Orange = {},
  Green  = {},
  Red    = {},
  Mythos = {}
}

-- save function to keep edits to the index
function updateSave()
  self.script_state = JSON.encode({ editsToIndex = editsToIndex })
end

-- load function to restore edits to the index
function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    editsToIndex = loadedData.editsToIndex
    updateMainIndex()
  end
end

-- merges the main index and the edits
function updateMainIndex()
  for owner, subTable in pairs(editsToIndex) do
    for type, guid in pairs(subTable) do
      GuidReferences[owner][type] = guid
    end
  end
end

-- returns an object reference for the requested owner and type
function getObjectByOwnerAndType(params)
  local owner = params.owner or "Mythos"
  local type = params.type
  return getObjectFromGUID(GuidReferences[owner][type])
end

-- returns a list of objects for the requested type
function getObjectsByType(type)
  local objList = {}
  for owner, objects in pairs(GuidReferences) do
    local obj = getObjectFromGUID(objects[type])
    if obj then
      objList[owner] = obj
    end
  end
  return objList
end

-- returns a list of objects for the requested owner
function getObjectsByOwner(owner)
  local objList = {}
  for type, guid in pairs(GuidReferences[owner]) do
    local obj = getObjectFromGUID(guid)
    if obj then
      objList[type] = obj
    end
  end
  return objList
end

-- makes an edit to the main index
function editIndex(params)
  if params.type then
    if not editsToIndex[params.owner] then
      editsToIndex[params.owner] = {}
    end
    editsToIndex[params.owner][params.type] = params.guid
  else
    editsToIndex[params.owner] = nil
  end
  updateSave()
  updateMainIndex()
end

-- Returns the owner of the provided object (either the matColor or "Mythos")
---@param object tts__GameObject Object to check
function getOwnerOfObject(object)
  if object == nil then return end

  -- use GUID to check owners instead of obtaining each as reference
  local objectGuid = object.getGUID()

  -- check if object is directly owned
  for owner, subtable in pairs(GuidReferences) do
    for type, guid in pairs(subtable) do
      if guid == objectGuid then
        return owner
      end
    end
  end

  -- check if the object is in a handzone
  for owner, subtable in pairs(GuidReferences) do
    for type, guid in pairs(subtable) do
      for _, zone in ipairs(object.getZones()) do
        if guid == zone.getGUID() then
          return owner
        end
      end
    end
  end

  -- check if it is on an owned object
  local result = SearchLib.belowObject(object, "isTileOrToken")

  for owner, subtable in pairs(GuidReferences) do
    for type, guid in pairs(subtable) do
      for _, searchObj in ipairs(result) do
        if guid == searchObj.getGUID() then
          return owner
        end
      end
    end
  end

  -- default to "Mythos"
  return "Mythos"
end

function removeObjectByOwnerAndType(params)
  local obj = getObjectByOwnerAndType(params)
  if obj ~= nil then obj.destruct() end
  editIndex(params)
end
