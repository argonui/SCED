do
  local NavigationOverlayApi = {}
  local GUIDReferenceApi     = require("core/GUIDReferenceApi")
  local TableLib             = require("util/TableLib")

  local function getNOHandler()
    return GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "NavigationOverlayHandler")
  end

  -- copies the visibility for the Navigation overlay
  ---@param startColor string Color of the player to copy from
  ---@param targetColor string Color of the targeted player
  function NavigationOverlayApi.copyVisibility(startColor, targetColor)
    getNOHandler().call("copyVisibility", {
      startColor  = startColor,
      targetColor = targetColor
    })
  end

  -- changes the Navigation Overlay view ("Full View" --> "Play Areas" --> "Closed" etc.)
  ---@param playerColor string Color of the player to update the visibility for
  function NavigationOverlayApi.cycleVisibility(playerColor)
    getNOHandler().call("cycleVisibility", playerColor)
  end

  -- reloads the visibility from stored data
  function NavigationOverlayApi.updateVisibility()
    getNOHandler().call("updateVisibility")
  end

  -- creates the XML buttons
  function NavigationOverlayApi.createXmlButtons()
    getNOHandler().call("createXmlButtons")
  end

  -- loads the specified camera for a player
  ---@param player tts__Player Player whose camera should be moved
  ---@param index? number Index of the camera view to load
  ---@param matColor? string Color of the playermat to swap to
  function NavigationOverlayApi.loadCamera(player, index, matColor)
    getNOHandler().call("loadCameraFromApi", {
      player   = player,
      index    = index,
      matColor = matColor
    })
  end

  function NavigationOverlayApi.getSaveData()
    return TableLib.copy(getNOHandler().call("getSaveData"))
  end

  function NavigationOverlayApi.loadData(loadedData)
    getNOHandler().call("loadData", loadedData)
  end

  return NavigationOverlayApi
end
