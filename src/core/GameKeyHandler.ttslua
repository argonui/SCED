local BlessCurseManagerApi = require("chaosbag/BlessCurseManagerApi")
local GlobalApi            = require("Global/GlobalApi")
local GUIDReferenceApi     = require("core/GUIDReferenceApi")
local MathLib              = require("util/MathLib")
local MythosAreaApi        = require("mythos/MythosAreaApi")
local NavigationOverlayApi = require("core/NavigationOverlayApi")
local PlayAreaApi          = require("playarea/PlayAreaApi")
local PlayermatApi         = require("playermat/PlayermatApi")
local SearchLib            = require("util/SearchLib")
local TokenChecker         = require("tokens/TokenChecker")
local VictoryDisplayApi    = require("mythos/VictoryDisplayApi")

local sentMessage          = false

local virtualColor         = {}

function onLoad()
  addHotkey("Add doom to agenda", addDoomToAgenda)
  addHotkey("Add Bless/Curse context menu", addBlurseSealingMenu)
  addHotkey("Discard object", discardObject)
  addHotkey("Discard top card", discardTopDeck)
  addHotkey("Display Bless/Curse status", showBlessCurseStatus)
  addHotkey("Get bottom card from deck", getBottomCardFromDeck)
  addHotkey("Move card to Victory Display", moveCardToVictoryDisplay)
  addHotkey("Place card into threat area", takeCardIntoThreatArea)
  addHotkey("Remove a use", removeOneUse)
  addHotkey("Reshuffle encounter deck", MythosAreaApi.reshuffleEncounterDeck)
  addHotkey("Set virtual color for next Hotkey", setVirtualColor)
  addHotkey("Switch seat clockwise", switchSeatClockwise)
  addHotkey("Switch seat counter-clockwise", switchSeatCounterClockwise)
  addHotkey("Take clue from location", takeClueFromLocation)
  addHotkey("Take clue from location (White)", takeClueFromLocationWhite)
  addHotkey("Take clue from location (Orange)", takeClueFromLocationOrange)
  addHotkey("Take clue from location (Green)", takeClueFromLocationGreen)
  addHotkey("Take clue from location (Red)", takeClueFromLocationRed)
  addHotkey("Upkeep", triggerUpkeep)
  addHotkey("View Mythos Area", viewMythosArea)
  addHotkey("View Playermat", viewPlayermat)
end

-- triggers the "Upkeep" function of the calling player's playermat
function triggerUpkeep(playerColor)
  local vColor = getVirtualColor(playerColor)

  if playerColor == "Black" and not sentMessage then
    broadcastToColor("It is recommended to sit on a player mat", playerColor, "Yellow")
    sentMessage = true
  end

  if #Player.getPlayers() == 1 then
    local usedMats = PlayermatApi.getUsedMatColors()
    for _, matColor in ipairs(usedMats) do
      PlayermatApi.doUpkeepFromHotkey(matColor, playerColor)
    end
    PlayAreaApi.readyCards()
    return
  end

  local matColor = PlayermatApi.getMatColor(vColor)
  PlayermatApi.doUpkeepFromHotkey(matColor, playerColor)
end

-- adds 1 doom to the agenda
function addDoomToAgenda()
  local doomCounter = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "DoomCounter")
  doomCounter.call("addVal", 1)
end

-- move the hovered object to the nearest empty slot on the playermat
function takeCardIntoThreatArea(playerColor, hoveredObject)
  local vColor = getVirtualColor(playerColor)

  -- only continue if an unlocked, non-location card is hovered
  if hoveredObject == nil
      or (hoveredObject.type ~= "Card" and hoveredObject.type ~= "Deck")
      or hoveredObject.hasTag("Location")
      or hoveredObject.locked then
    broadcastToColor("Hover a non-location card and try again.", playerColor, "Yellow")
    return
  end

  local matColor = PlayermatApi.getMatColor(vColor)
  local cardRot = hoveredObject.getRotation()

  -- do not continue if the threat area is already full
  local threatAreaPos = PlayermatApi.getEncounterCardDrawPosition(matColor, false)
  if threatAreaPos == PlayermatApi.getEncounterCardDrawPosition(matColor, true) then
    broadcastToColor("Threat area is full.", playerColor, "Yellow")
    return
  end

  -- get the rotation of the owning playermat (or Mythos)
  local cardOwner = GUIDReferenceApi.getOwnerOfObject(hoveredObject)
  local ownerRotation = Vector(0, 270, 0)
  if cardOwner ~= "Mythos" then
    ownerRotation = PlayermatApi.returnRotation(cardOwner)
  end

  -- work out the new rotation
  local matRotation = PlayermatApi.returnRotation(matColor)
  local newCardRot = cardRot:setAt("y", MathLib.roundToMultiple(matRotation.y + cardRot.y - ownerRotation.y, 45))

  -- move the main card to threat area
  GlobalApi.moveCardWithTokens(hoveredObject, threatAreaPos, newCardRot)

  -- contruct feedback message (hide name when face-down + enabled setting)
  local cardName = hoveredObject.getName()
  if cardName == "" or (hoveredObject.is_face_down and hoveredObject.hide_when_face_down) then
    cardName = "a card"
  end

  local playerName = GlobalApi.getColoredName(vColor)
  broadcastToAll("Moved " .. cardName .. " to " .. playerName .. "'s threat area.", "White")
end

-- discard the hovered or selected objects to the respective trashcan and discard tokens on it if it was a card
function discardObject(playerColor, hoveredObject)
  -- if more than one object is selected, discard them all, one at a time
  local selectedObjects = Player[playerColor].getSelectedObjects()

  local vColor = getVirtualColor(playerColor)

  if #selectedObjects > 0 then
    discardGroup(vColor, selectedObjects)
    return

    -- only continue if an unlocked card, deck or tile was hovered
  elseif hoveredObject == nil
      or (hoveredObject.type ~= "Card" and hoveredObject.type ~= "Deck" and hoveredObject.type ~= "Tile")
      or hoveredObject.locked then
    broadcastToColor("Hover a token/tile or a card/deck and try again.", playerColor, "Yellow")
    return
  end

  -- these should probably not be discarded normally: ask player for confirmation
  local tokenData = MythosAreaApi.returnTokenData()
  local scenarioName = tokenData.currentScenario
  if scenarioName ~= "Lost in Time and Space" and scenarioName ~= "The Secret Name" then
    if hoveredObject.type == "Deck" or hoveredObject.hasTag("Location") then
      local suspect = (hoveredObject.type == "Deck") and "Deck" or "Location"
      Player[playerColor].showConfirmDialog("Discard " .. suspect .. "?",
        function() performDiscard(vColor, hoveredObject) end)
      return
    end
  end

  performDiscard(vColor, hoveredObject)
end

-- actually performs the discarding of the object and tokens / tiles on it
function performDiscard(playerColor, targetObject)
  -- destroy temporary chaos tokens instead
  if targetObject.hasTag("tempToken") then
    targetObject.destruct()
    return
  end

  -- initialize list of objects to discard
  local discardTheseObjects = { targetObject }

  -- discard tokens / tiles on cards / decks
  if targetObject.type ~= "Tile" then
    for _, obj in ipairs(SearchLib.onObject(targetObject, "isTileOrToken")) do
      table.insert(discardTheseObjects, obj)
    end
  end

  -- update playarea connections
  if targetObject.type == "Card" then
    PlayAreaApi.maybeUntrackLocation(targetObject)
  end

  local discardForMatColor = getColorToDiscardFor(targetObject, playerColor)
  PlayermatApi.discardListOfObjects(discardForMatColor, discardTheseObjects)
end

function discardGroup(playerColor, selectedObjects)
  local count = #selectedObjects
  -- discarding one at a time avoids an error with cards in the discard pile losing the 'hands' toggle and uses multiple mats
  for i = count, 1, -1 do
    Wait.time(function()
      if (selectedObjects[i].type == "Card" or selectedObjects[i].type ~= "Deck" or selectedObjects[i].type == "Tile") then
        performDiscard(playerColor, selectedObjects[i])
      end
    end, (count - i + 1) * 0.1)
  end
end

-- discard the top card of hovered deck, calling discardObject function
function discardTopDeck(playerColor, hoveredObject)
  local vColor = getVirtualColor(playerColor)

  -- only continue if an unlocked card or deck was hovered
  if hoveredObject == nil
      or (hoveredObject.type ~= "Card" and hoveredObject.type ~= "Deck")
      or hoveredObject.locked then
    broadcastToColor("Hover a deck/card and try again.", playerColor, "Yellow")
    return
  end

  -- take top card from deck (unless it is already a single card)
  local takenCard = hoveredObject
  if hoveredObject.type == "Deck" then
    local offset = hoveredObject.getBounds().size.y / 2 + 0.3
    takenCard = hoveredObject.takeObject({ position = hoveredObject.getPosition() + Vector(0, offset, 0) })
  else
    -- check if this card was the topCard of a deck (and then flip the next one)
    local owner = GUIDReferenceApi.getOwnerOfObject(hoveredObject)
    if owner == "Mythos" then
      local encounterDeckObjects = MythosAreaApi.getEncounterDeckObjects()
      if hoveredObject == encounterDeckObjects.topCard then
        Wait.frames(function() MythosAreaApi.flipTopCardFromDeck() end, 3)
      end
    else
      local deckAreaObjects = PlayermatApi.getDeckAreaObjects(owner)
      if hoveredObject == deckAreaObjects.topCard then
        Wait.frames(function() PlayermatApi.flipTopCardFromDeck(owner) end, 3)
      end
    end
  end
  performDiscard(vColor, takenCard)
end

-- helper function to get the player to trigger the discard function for
function getColorToDiscardFor(hoveredObject, playerColor)
  local pos = hoveredObject.getPosition()
  local closestMatColor = PlayermatApi.getMatColorByPosition(pos)

  -- check if actually on the closest playermat
  local closestMat = GUIDReferenceApi.getObjectByOwnerAndType(closestMatColor, "Playermat")
  local bounds = closestMat.getBounds()

  -- define the area "near" the playermat
  local bufferAroundPlayermat = 2
  local areaNearPlayermat = {}
  areaNearPlayermat.minX = bounds.center.x - bounds.size.x / 2 - bufferAroundPlayermat
  areaNearPlayermat.maxX = bounds.center.x + bounds.size.x / 2 + bufferAroundPlayermat
  areaNearPlayermat.minZ = bounds.center.z - bounds.size.z / 2 - bufferAroundPlayermat
  areaNearPlayermat.maxZ = bounds.center.z + bounds.size.z / 2 + bufferAroundPlayermat

  -- discard to closest mat if near it
  if inArea(pos, areaNearPlayermat) then
    return closestMatColor
  end

  -- discard to closest mat if card is in a hand
  local handZone = GUIDReferenceApi.getObjectByOwnerAndType(closestMatColor, "HandZone")
  for _, zone in ipairs(hoveredObject.getZones()) do
    if zone == handZone then
      return closestMatColor
    end
  end

  -- discard to triggering mat if previous conditions weren't met
  if playerColor == "Black" then
    return closestMatColor
  else
    return PlayermatApi.getMatColor(playerColor)
  end
end

-- moves the hovered card to the victory display
function moveCardToVictoryDisplay(playerColor, hoveredObject)
  if hoveredObject then
    if hoveredObject.hasTag("CardThatSeals") then
      hoveredObject.call("releaseAllTokensWrapper", { playerColor = playerColor })
    end

    PlayAreaApi.maybeUntrackLocation(hoveredObject)
    VictoryDisplayApi.placeCard(hoveredObject)
  end
end

-- removes a use from a card (or a token if hovered)
function removeOneUse(playerColor, hoveredObject)
  local vColor = getVirtualColor(playerColor)

  -- only continue if an unlocked card or tile was hovered
  if hoveredObject == nil
      or (hoveredObject.type ~= "Card" and hoveredObject.type ~= "Tile")
      or hoveredObject.locked then
    broadcastToColor("Hover a token/tile or a card and try again.", playerColor, "Yellow")
    return
  end

  local targetObject = nil

  -- discard hovered token / tile
  if hoveredObject.type == "Tile" then
    targetObject = hoveredObject
  elseif hoveredObject.type == "Card" then
    local cardPos = hoveredObject.getPosition()
    local searchRot = hoveredObject.getRotation()
    local searchSize = hoveredObject.getBounds().size:scale(0.8):setAt("y", 1)

    -- if this card is on a playermat, search an upright box
    local owner = GUIDReferenceApi.getOwnerOfObject(hoveredObject)
    if owner ~= "Mythos" then
      searchRot = PlayermatApi.returnRotation(owner)

      -- we're only searching 90% of the cards area to avoid matching tokens on other cards
      searchSize = Vector(2, 1, 3.2) * 0.9
    end

    local searchResult = SearchLib.inArea(cardPos, searchRot, searchSize, "isTileOrToken")

    if #searchResult == 0 then
      broadcastToColor("No tokens found!", playerColor, "Yellow")
      return
    end

    -- index the found tokens by memo (store the token furthest to the card for each memo)
    local indexByMemo = {}
    local distanceByMemo = {}
    for _, obj in ipairs(searchResult) do
      if not obj.locked then
        local objPos = obj.getPosition()
        local distance = Vector.between(cardPos, objPos):magnitude()
        local memo = obj.memo or "NO_MEMO"
        if distanceByMemo[memo] == nil or distanceByMemo[memo] < distance then
          indexByMemo[memo] = obj
          distanceByMemo[memo] = distance
        end
      end
    end

    -- use metadata (if present) to determine targetObject
    local usesAreTypeOfResource = false
    local notes = JSON.decode(hoveredObject.getGMNotes()) or {}
    for _, useInfo in ipairs(notes.uses or {}) do
      if useInfo.type then
        local discardMemo = useInfo.type:lower()
        if indexByMemo[discardMemo] then
          targetObject = indexByMemo[discardMemo]
          break
        end
      end
      if useInfo.token == "resource" then
        usesAreTypeOfResource = true
      end
    end

    -- check for alternatives (check resources first if tokens are a type of resource)
    if not targetObject then
      if usesAreTypeOfResource and indexByMemo["resource"] then
        targetObject = indexByMemo["resource"]
      else
        for memo, obj in pairs(indexByMemo) do
          if memo ~= "resourceCounter" and memo ~= "NO_MEMO" then
            targetObject = obj
            break
          end
        end
      end
    end

    -- if there's still not a target check for clickable counter and token without memo
    if not targetObject then
      if indexByMemo["resourceCounter"] then
        indexByMemo["resourceCounter"].call("modifyValue", -1)
        return
      elseif indexByMemo["NO_MEMO"] then
        targetObject = indexByMemo["NO_MEMO"]
      end
    end
  end

  if not targetObject then
    broadcastToColor("No tokens found!", playerColor, "Yellow")
    return
  end

  -- release sealed token if card has one and no uses
  if TokenChecker.isChaosToken(targetObject) and hoveredObject.hasTag("CardThatSeals") then
    local func = hoveredObject.getVar("releaseOneToken") -- check if function exists
    if func ~= nil then
      hoveredObject.call("releaseOneToken", playerColor)
      return
    end
  end

  -- handling for stacked tokens
  if targetObject.getQuantity() > 1 then
    targetObject = targetObject.takeObject()
  end

  -- feedback message
  local card, cardName
  if hoveredObject.type == "Card" then
    card = hoveredObject
    cardName = hoveredObject.getName()
  else
    local searchResult = SearchLib.belowPosition(targetObject.getPosition(), "isCard")
    if #searchResult > 0 then
      card = searchResult[1]
      cardName = searchResult[1].getName()
    end
  end

  local tokenName = targetObject.getName()
  if tokenName == "" then
    if targetObject.memo ~= "" then
      -- name handling for clue / doom
      if targetObject.memo == "clueDoom" then
        if targetObject.is_face_down then
          tokenName = "Doom"
        else
          tokenName = "Clue"
        end
      elseif targetObject.memo == "resourceCounter" then
        tokenName = "Resource Counter"
      else
        tokenName = titleCase(targetObject.memo)
      end
    else
      tokenName = "unknown token"
    end
  end

  -- construct feedback message
  local playerName = GlobalApi.getColoredName(vColor)
  local cardInfo = ""
  if cardName and cardName ~= "" and not (card and card.is_face_down and card.hide_when_face_down) then
    cardInfo = " from " .. cardName
  end
  broadcastToAll(playerName .. " removed a token (" .. tokenName .. ")" .. cardInfo .. ".", "White")

  local discardForMatColor = getColorToDiscardFor(hoveredObject, vColor)
  PlayermatApi.discardListOfObjects(discardForMatColor, { targetObject })
end

-- sets the virtual player color for the next playerColor-based hotkey-press
function setVirtualColor(playerColor)
  local searchPos = Player[playerColor].getPointerPosition()
  local matColor = PlayermatApi.getMatColorByPosition(searchPos)
  local handColor = PlayermatApi.getPlayerColor(matColor)

  if handColor == playerColor then
    if virtualColor[playerColor] then
      virtualColor[playerColor] = nil
      broadcastToColor("Virtual player color for your next hotkey was reset.", playerColor)
    else
      broadcastToColor("Hover a different playermat and try again.", playerColor, "Orange")
    end
    return
  end

  virtualColor[playerColor] = handColor
  local msgString = GlobalApi.getColoredName(handColor)
  broadcastToColor("Set the virtual player color for your next hotkey to: " .. msgString, playerColor)
end

function getVirtualColor(playerColor)
  local vColor = virtualColor[playerColor] or playerColor

  -- reset the virtual color after 1 second (and reset timer if hotkey is used)
  if virtualColor["wait_" .. playerColor] then
    Wait.stop(virtualColor["wait_" .. playerColor])
  end

  if playerColor ~= vColor then
    virtualColor["wait_" .. playerColor] = Wait.time(function()
      virtualColor[playerColor] = nil
      broadcastToColor("Virtual player color for your next hotkey was reset.", playerColor)
    end, 1)
  end

  return vColor
end

-- switches the triggering player to the next seat (clockwise)
function switchSeatClockwise(playerColor)
  switchSeat(playerColor, "clockwise")
end

-- switches the triggering player to the next seat (counter-clockwise)
function switchSeatCounterClockwise(playerColor)
  switchSeat(playerColor, "counter-clockwise")
end

-- handles seat switching in the given direction
function switchSeat(playerColor, direction)
  local vColor = getVirtualColor(playerColor)
  if playerColor == "Black" or playerColor == "Grey" then
    broadcastToColor("This hotkey is only available to seated players.", playerColor, "Orange")
    return
  end

  -- sort function for matcolors based on predefined order (Green, White, Orange, Red)
  local colorOrder = {
    Green  = 1,
    White  = 2,
    Orange = 3,
    Red    = 4
  }

  local function sortByFixedOrder(color1, color2)
    return colorOrder[color1] < colorOrder[color2]
  end

  -- get used playermats
  local usedColors = PlayermatApi.getUsedMatColors()
  table.sort(usedColors, sortByFixedOrder)

  -- get current seat index
  local index
  for i, color in ipairs(usedColors) do
    if color == vColor then
      index = i
      break
    end
  end
  if not index then
    broadcastToColor("Couldn't detect investigator.", playerColor, "Orange")
    return
  end

  -- get next color
  index = index + ((direction == "clockwise") and -1 or 1)
  if index == 0 then
    index = #usedColors
  elseif index > #usedColors then
    index = 1
  end

  -- swap color
  NavigationOverlayApi.loadCamera(Player[vColor] or Player[playerColor], _, usedColors[index])
end

function takeClueFromLocationWhite(_, hoveredObject)
  takeClueFromLocation(PlayermatApi.getPlayerColor("White"), hoveredObject)
end

function takeClueFromLocationOrange(_, hoveredObject)
  takeClueFromLocation(PlayermatApi.getPlayerColor("Orange"), hoveredObject)
end

function takeClueFromLocationGreen(_, hoveredObject)
  takeClueFromLocation(PlayermatApi.getPlayerColor("Green"), hoveredObject)
end

function takeClueFromLocationRed(_, hoveredObject)
  takeClueFromLocation(PlayermatApi.getPlayerColor("Red"), hoveredObject)
end

-- takes a clue from a location, player needs to hover the clue directly or the location
function takeClueFromLocation(playerColor, hoveredObject)
  local vColor = getVirtualColor(playerColor)

  -- use different color for messages if player is not seated (because this hotkey is called for a different mat)
  local messageColor = playerColor
  if not Player[playerColor] or not Player[playerColor].seated then
    messageColor = getFirstSeatedPlayer()
  end

  local card, cardName, clue

  if hoveredObject == nil then
    broadcastToColor("Hover a clue or card with clues and try again.", messageColor, "Yellow")
    return
  elseif hoveredObject.type == "Card" then
    card = hoveredObject
    cardName = hoveredObject.getName()
    local searchResult = SearchLib.onObject(hoveredObject, "isClue")

    if #searchResult == 0 then
      broadcastToColor("This card does not have any clues on it.", messageColor, "Yellow")
      return
    else
      clue = searchResult[1]
    end
  elseif hoveredObject.memo == "clueDoom" then
    if hoveredObject.is_face_down then
      broadcastToColor("This is a doom token and not a clue.", messageColor, "Yellow")
      return
    end

    clue = hoveredObject
    local searchResult = SearchLib.belowPosition(clue.getPosition(), "isCard")

    if #searchResult ~= 0 then
      card = searchResult[1]
      cardName = searchResult[1].getName()
    end
  elseif hoveredObject.type == "Infinite" and hoveredObject.getName() == "Clue tokens" then
    clue = hoveredObject.takeObject()
    cardName = "the token pool"
  else
    broadcastToColor("Hover a clue or card with clues and try again.", messageColor, "Yellow")
    return
  end

  -- determine the matColor and position
  local clickableClues = GlobalApi.getOptionPanelState()["useClueClickers"]
  local matColor = PlayermatApi.getMatColor(vColor)
  local pos

  if clickableClues then
    local trash = GUIDReferenceApi.getObjectByOwnerAndType(matColor, "Trash")
    pos = trash.getPosition():setAt("y", 2)
    PlayermatApi.updateCounter(matColor, "ClickableClueCounter", _, 1)
  else
    pos = PlayermatApi.transformLocalPosition({ x = -1.12, y = 0.2, z = 0.7 }, matColor)
  end

  local rot = PlayermatApi.returnRotation(matColor)

  -- check if found clue is a stack or single token
  local tempPos = clue.getPosition() + Vector(0, 0.15, 0)
  if clue.getQuantity() > 1 then
    clue = clue.takeObject({ position = tempPos })
  else
    clue.setPosition(tempPos)
  end

  clue.setPositionSmooth(pos)
  clue.setRotation(rot)

  -- construct feedback message
  local playerName = GlobalApi.getColoredName(vColor)
  local cardInfo = ""
  if cardName and cardName ~= "" and not (card and card.is_face_down and card.hide_when_face_down) then
    cardInfo = " from " .. cardName
  end
  broadcastToAll(playerName .. " took one clue" .. cardInfo .. ".", "White")

  VictoryDisplayApi.update()
end

-- broadcasts the bless/curse status to the calling player
function showBlessCurseStatus(playerColor)
  BlessCurseManagerApi.broadcastStatus(playerColor)
end

-- adds Wendy's menu to the hovered card
function addBlurseSealingMenu(playerColor, hoveredObject)
  BlessCurseManagerApi.addBlurseSealingMenu(playerColor, hoveredObject)
end

function getBottomCardFromDeck(playerColor, hoverObject)
  if not hoverObject or hoverObject.type ~= "Deck" then
    broadcastToColor("Hover a deck and try again.", playerColor, "Orange")
    return
  end

  local deckPos = hoverObject.getPosition()
  local deckRot = hoverObject.getRotation()

  -- place the card 3.5 units offset from the deck
  local cardPos = deckPos + Vector(0, 1, -3.5):rotateOver("y", deckRot.y)
  hoverObject.takeObject({ position = cardPos, top = false, smooth = false })
  broadcastToColor("Placed card from the bottom of the deck north of it.", playerColor, "White")
end

function viewMythosArea(playerColor)
  local vColor = getVirtualColor(playerColor)
  NavigationOverlayApi.loadCamera(Player[vColor] or Player[playerColor], 1)
end

function viewPlayermat(playerColor)
  local vColor = getVirtualColor(playerColor)
  local matColor = PlayermatApi.getMatColor(vColor)
  if not matColor then
    broadcastToColor("Couldn't find playermat.", playerColor, "Red")
  end
  NavigationOverlayApi.loadCamera(Player[vColor] or Player[playerColor], _, matColor)
end

-- Simple method to check if the given point is in a specified area
---@param point tts__Vector Point to check, only x and z values are relevant
---@param bounds table Defined area to see if the point is within
function inArea(point, bounds)
  return (point.x > bounds.minX
    and point.x < bounds.maxX
    and point.z > bounds.minZ
    and point.z < bounds.maxZ)
end

-- capitalizes the first letter
function titleCase(str)
  local first = str:sub(1, 1)
  local rest = str:sub(2)
  return first:upper() .. rest:lower()
end

-- returns the color of the first seated player
function getFirstSeatedPlayer()
  for _, color in ipairs(getSeatedPlayers()) do
    return color
  end
end
