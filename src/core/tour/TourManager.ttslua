do
  require("core/tour/TourScript")
  require("core/tour/TourCard")
  local TourManager = {}
  local internal = {}
  local GUIDReferenceApi = require("core/GUIDReferenceApi")

  -- Base IDs for various tour card UI elements. Actual IDs will have _[playerColor] appended
  local CARD_ID = "tourCard"
  local LEFT_NARRATOR_ID = "tourNarratorImageLeft"
  local RIGHT_NARRATOR_ID = "tourNarratorImageRight"
  local BUBBLE_ID = "tourSpeechBubble"
  local TEXT_ID = "tourText"
  local NEXT_BUTTON_ID = "tourNext"
  local PREVIOUS_BUTTON_ID = "tourPrevious"
  local STOP_BUTTON_ID = "tourStop"

  -- Table centerpoint for the camera hook object. Camera handling is a bit erratic so it doesn't
  -- always land right where you think it's going to, but it's close
  local HOOK_CAMERA_HOME = {
    x = -30.2,
    y = 60,
    z = 0,
  }

  -- Default (0) position for the camera, as defined in the mod. If we don't recreate this position
  -- EXACTLY when exiting the tour then camera controls get weird
  local DEFAULT_CAMERA_POS = {
    position = { x = -22.26, y = -2.5, z = 5.26 },
    pitch = 64.34,
    yaw = 90,
    distance = 104
  }

  -- relative XML coordinates where we can present a card
  local SCREEN_POSITIONS = {
    -- Center is intentionally slightly above the center
    center = "0.5 0.6",
    belowcenter = "0.5 0.4",
    north = "0.5 0.75",
    east = "0.75 0.5",
    west = "0.25 0.5",
    south = "0.5 0.25",

    -- Northwest is only used by the Mandy card, move it a little right than standard so it's
    -- closer to the importer
    northwest = "0.3 0.75",
    northeast = "0.75 0.75",
    southwest = "0.25 0.25",

    -- Used by the cards referencing the bottom-right panel, moved a little closer to them
    southeast = "0.85 0.23"
  }

  -- Tracks the current state of the tours. Keyed by player color to keep each player's tour
  -- separate, will hold the camera hook and current card.
  local tourState = {}

  -- Kicks off the tour by initializing the card and camera hook. A callback on the hook creation
  -- will then show the first card.
  ---@param playerColor string Player color to start the tour for
  TourManager.startTour = function(playerColor)
    tourState[playerColor] = { currentCardIndex = 1 }

    -- Camera gets really screwy when we finalize if we don't start settled in ThirdPerson at the
    -- default position before attaching to the hook. Unfortunately there are no callbacks for when
    -- the movement is done, but the delay seems to handle it
    Player[playerColor].setCameraMode("ThirdPerson")
    Player[playerColor].lookAt(DEFAULT_CAMERA_POS)

    -- Initial camera rotation is painfully slow. White and Orange players are likely oriented
    -- correctly, but need a longer start delay for Green and Red
    local delay = 0.5
    if playerColor ~= "White" and playerColor ~= "Orange" then
      delay = 2
      broadcastToColor("Starting the tour, please wait...", playerColor)
    end
    Wait.time(function()
      internal.createTourCard(playerColor)
      -- XML update to add the new card takes a few frames to load, wait for it to finish then create the hook
      Wait.condition(function() internal.createCameraHook(playerColor) end, function() return not Global.UI.loading end)
    end, delay)
  end

  -- Shows the next card in the tour script. This method is exposed (rather than being part of
  -- internal) because the XMLUI callbacks expect the method to be on the object directly.
  ---@param player tts__Player Player to show the next card for, provided by XMLUI callback
  function nextCard(player)
    internal.hideCard(player.color)
    Wait.time(function()
      tourState[player.color].currentCardIndex = tourState[player.color].currentCardIndex + 1
      if tourState[player.color].currentCardIndex > #TOUR_SCRIPT then
        internal.finalizeTour(player.color)
      else
        internal.showCurrentCard(player.color)
      end
    end, 0.3)
  end

  -- Shows the previous card in the tour script. This method is exposed (rather than being part of
  -- internal) because the XMLUI callbacks expect the method to be on the object directly.
  ---@param player tts__Player Player to show the previous card for, provided by XMLUI callback
  function previousCard(player)
    internal.hideCard(player.color)
    Wait.time(function()
      tourState[player.color].currentCardIndex = tourState[player.color].currentCardIndex - 1
      internal.showCurrentCard(player.color)
    end, 0.3)
  end

  -- Ends the tour and cleans up the camera. This method is exposed (rather than being part of
  -- internal) because the XMLUI callbacks expect the method to be on the object directly.
  ---@param player tts__Player object to end the tour for, provided by XMLUI callback
  function stopTour(player)
    internal.hideCard(player.color)
    Wait.time(function()
      internal.finalizeTour(player.color)
    end, 0.3)
  end

  -- Ends the tour for all players
  function TourManager.stopTourForAll()
    for playerColor, data in pairs(tourState) do
      stopTour(Player[playerColor])
    end
  end

  -- Updates the card UI for the script at the current index, moves the camera to the proper
  -- position, and shows the card.
  ---@param playerColor string Player color to show the current card for
  internal.showCurrentCard = function(playerColor)
    internal.updateCardDisplay(playerColor)
    local delay = 0
    local cardIndex = tourState[playerColor].currentCardIndex
    local hook = getObjectFromGUID(tourState[playerColor].cameraHookGuid)

    if not TOUR_SCRIPT[cardIndex].skipCentering then
      hook.setPositionSmooth(HOOK_CAMERA_HOME, false, false)
      delay = delay + 0.5
    end
    local lookPos
    local objReferenceData = TOUR_SCRIPT[cardIndex].objReferenceData
    if objReferenceData ~= nil then
      local lookAtObj = GUIDReferenceApi.getObjectByOwnerAndType(objReferenceData.owner, objReferenceData.type)
      if lookAtObj ~= nil then
        lookPos = lookAtObj.getPosition()
        lookPos.y = TOUR_SCRIPT[cardIndex].distanceFromObj or 0
        -- Since camera isn't directly above the hook, changing the Y affects the visual position of
        -- whatever object we're trying to look at. This is an approximation, but close enough to
        -- keep the object more centered
        lookPos.x = lookPos.x - lookPos.y / 2
      end
    elseif TOUR_SCRIPT[cardIndex].showPos ~= nil then
      lookPos = TOUR_SCRIPT[cardIndex].showPos
    end
    if lookPos ~= nil then
      Wait.time(function()
        hook.setPositionSmooth(lookPos, false, false)
      end, delay)
      delay = delay + 0.5
    end
    Wait.time(function() Global.UI.show(internal.getUiId(CARD_ID, playerColor)) end, delay)
  end

  -- Hides the current card being shown to a player. This can be in preparation for showing the
  -- next card, or ending the tour.
  ---@param playerColor string Player color to hide the current card for
  internal.hideCard = function(playerColor)
    Global.UI.hide(internal.getUiId(CARD_ID, playerColor))
  end

  -- Cleans up all the various resources associated with the tour, and (hopefully) resets the
  -- camera to the default position. Camera handling is erratic, the final card in the script
  -- should include instructions for the player to fix it.
  ---@param playerColor string Player color to clean up
  internal.finalizeTour = function(playerColor)
    local cameraHook = getObjectFromGUID(tourState[playerColor].cameraHookGuid)
    cameraHook.destruct()
    Player[playerColor].setCameraMode("ThirdPerson")
    tourState[playerColor] = nil
    Wait.frames(function()
      Player[playerColor].lookAt(DEFAULT_CAMERA_POS)
    end, 3)
  end

  -- Updates the card UI to show the appropriate card configuration.
  ---@param playerColor string Player color to update card for
  internal.updateCardDisplay = function(playerColor)
    local index = tourState[playerColor].currentCardIndex
    Global.UI.setAttribute(internal.getUiId(LEFT_NARRATOR_ID, playerColor), "image", "Inv-" .. TOUR_SCRIPT[index].narrator)
    Global.UI.setAttribute(internal.getUiId(RIGHT_NARRATOR_ID, playerColor), "image", "Inv-" .. TOUR_SCRIPT[index].narrator)
    Global.UI.setAttribute(internal.getUiId(TEXT_ID, playerColor), "text", "\"" .. TOUR_SCRIPT[index].text .. "\"")

    local cardPos = TOUR_SCRIPT[index].position or "north"
    Global.UI.setAttribute(internal.getUiId(CARD_ID, playerColor), "anchorMin", SCREEN_POSITIONS[cardPos])
    Global.UI.setAttribute(internal.getUiId(CARD_ID, playerColor), "anchorMax", SCREEN_POSITIONS[cardPos])
    Global.UI.setAttribute(internal.getUiId(NEXT_BUTTON_ID, playerColor), "active", index < #TOUR_SCRIPT)
    Global.UI.setAttribute(internal.getUiId(PREVIOUS_BUTTON_ID, playerColor), "active", index > 1)

    -- Adjust images so the narrator is on the left or right, as defined by the card
    if TOUR_SCRIPT[index].speakerSide == "right" then
      Global.UI.setAttribute(internal.getUiId(LEFT_NARRATOR_ID, playerColor), "active", false)
      Global.UI.setAttribute(internal.getUiId(RIGHT_NARRATOR_ID, playerColor), "active", true)
      Global.UI.setAttribute(internal.getUiId(BUBBLE_ID, playerColor), "rotation", "0 180 0")
      Global.UI.setAttribute(internal.getUiId(TEXT_ID, playerColor), "offsetXY", "-15 -15")
      Global.UI.setAttribute(internal.getUiId(NEXT_BUTTON_ID, playerColor), "offsetXY", "-35 -45")
      Global.UI.setAttribute(internal.getUiId(PREVIOUS_BUTTON_ID, playerColor), "offsetXY", "50 -45")
      Global.UI.setAttribute(internal.getUiId(STOP_BUTTON_ID, playerColor), "offsetXY", "5 -45")
    else
      Global.UI.setAttribute(internal.getUiId(LEFT_NARRATOR_ID, playerColor), "active", true)
      Global.UI.setAttribute(internal.getUiId(RIGHT_NARRATOR_ID, playerColor), "active", false)
      Global.UI.setAttribute(internal.getUiId(BUBBLE_ID, playerColor), "rotation", "0 0 0")
      Global.UI.setAttribute(internal.getUiId(TEXT_ID, playerColor), "offsetXY", "15 -15")
      Global.UI.setAttribute(internal.getUiId(NEXT_BUTTON_ID, playerColor), "offsetXY", "-5 -45")
      Global.UI.setAttribute(internal.getUiId(PREVIOUS_BUTTON_ID, playerColor), "offsetXY", "80 -45")
      Global.UI.setAttribute(internal.getUiId(STOP_BUTTON_ID, playerColor), "offsetXY", "35 -45")
    end
  end

  -- Creates a small, transparent object which the camera will be attached to in order to move the user's view
  -- around the table. This should be called only at the beginning of the tour. Once creation is complete
  -- the user's camera will be attached to the hook and the first card will be shown.
  ---@param playerColor string Player color to create the hook for
  internal.createCameraHook = function(playerColor)
    local hookData = {
      Name = "BlockSquare",
      Transform = {
        posX = HOOK_CAMERA_HOME.x,
        posY = HOOK_CAMERA_HOME.y,
        posZ = HOOK_CAMERA_HOME.z,
        rotX = 0,
        rotY = 270,
        rotZ = 0,
        scaleX = 0.1,
        scaleY = 0.1,
        scaleZ = 0.1,
      },
      ColorDiffuse = {
        r = 0,
        g = 0,
        b = 0,
        a = 0,
      },
      Locked = true,
      GMNotes = playerColor
    }

    spawnObjectData({ data = hookData, callback_function = internal.onHookCreated })
  end

  -- Callback for creation of the camera hook object. Will attach the camera and show the current
  -- (presumably first) card.
  ---@param hook tts__Object Created object
  internal.onHookCreated = function(hook)
    local playerColor = hook.getGMNotes()
    tourState[playerColor].cameraHookGuid = hook.getGUID()
    Player[playerColor].attachCameraToObject({
      object = hook,
      offset = { x = -20, y = 30, z = 0 }
    })
    internal.showCurrentCard(playerColor)
  end

  -- Creates an XMLUI entry in Global for a player-specific tour card. Dynamically creating this
  -- is somewhat complex, but ensures we can properly handle any player color.
  ---@param playerColor string Player color to create the card for
  internal.createTourCard = function(playerColor)
    -- Make sure the card doesn't exist before we create a new one
    if Global.UI.getAttributes(internal.getUiId(CARD_ID, playerColor)) ~= nil then return end

    tourCardTemplate.attributes.id = internal.getUiId(CARD_ID, playerColor)
    tourCardTemplate.children[1].attributes.id = internal.getUiId(LEFT_NARRATOR_ID, playerColor)
    tourCardTemplate.children[2].attributes.id = internal.getUiId(RIGHT_NARRATOR_ID, playerColor)
    tourCardTemplate.children[3].attributes.id = internal.getUiId(BUBBLE_ID, playerColor)
    tourCardTemplate.children[4].attributes.id = internal.getUiId(TEXT_ID, playerColor)
    tourCardTemplate.children[5].attributes.id = internal.getUiId(NEXT_BUTTON_ID, playerColor)
    tourCardTemplate.children[5].attributes.onClick = self.getGUID() .. "/nextCard"
    tourCardTemplate.children[6].attributes.id = internal.getUiId(PREVIOUS_BUTTON_ID, playerColor)
    tourCardTemplate.children[6].attributes.onClick = self.getGUID() .. "/previousCard"
    tourCardTemplate.children[7].attributes.id = internal.getUiId(STOP_BUTTON_ID, playerColor)
    tourCardTemplate.children[7].attributes.onClick = self.getGUID() .. "/stopTour"
    internal.setDeepVisibility(tourCardTemplate, playerColor)

    local globalXml = Global.UI.getXmlTable() or {}
    table.insert(globalXml, tourCardTemplate)
    Global.UI.setXmlTable(globalXml)
  end

  -- Panels don't cause their children to inherit their visibility value, so this recurses down the
  -- XML table to set all children to the same visibility.
  ---@param xmlUi table Lua table describing the XML
  ---@param playerColor string String color of the player to make this visible for
  internal.setDeepVisibility = function(xmlUi, playerColor)
    xmlUi.attributes.visibility = "" .. playerColor
    if xmlUi.children ~= nil then
      for _, child in ipairs(xmlUi.children) do
        internal.setDeepVisibility(child, playerColor)
      end
    end
  end

  internal.getUiId = function(baseId, playerColor)
    return baseId .. "_" .. playerColor
  end

  return TourManager
end
