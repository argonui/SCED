do
  local GlobalApi = {}

  -- downloads an object from the library and optionally replaces an existing object
  ---@param filename string Path to JSON file (without .json extension) in the library
  ---@param player tts__Player Player that initiated this
  ---@param replace string GUID of the object to replace
  function GlobalApi.placeholderDownload(filename, player, replace)
    Global.call("placeholder_download", {
      filename = filename,
      player   = player,
      replace  = replace
    })
  end

  -- splashes the scenario title (used when placing a scenario) and plays a sound
  ---@param scenarioName string Name of the scenario
  function GlobalApi.titleSplash(scenarioName)
    Global.call("titleSplash", scenarioName)
  end

  -- toggles the visibility of the specific window for the specified color
  ---@param playerColor string Player color to toggle the visibility for
  ---@param windowId string ID of the XML element
  ---@param overrideState? boolean Forcefully sets the new visibility
  ---@param owner? tts__Object Object that owns the XML (or nil if Global)
  ---@return boolean visible Returns the new state of the visibility
  function GlobalApi.changeWindowVisibility(playerColor, windowId, overrideState, owner)
    return Global.call("changeWindowVisibilityForColorWrapper", {
      color         = playerColor,
      windowId      = windowId,
      overrideState = overrideState,
      owner         = owner
    })
  end

  -- Fades out an XML element and its children
  ---@param id string ID of the XML element
  ---@param owner? tts__Object Object that owns the XML (or nil if Global)
  ---@param time? number Time in seconds for the fade-out (defaults to 2)
  function GlobalApi.fadeOutXml(id, owner, time)
    return Global.call("fadeOutXml", { id = id, owner = owner, time = time })
  end

  -- Stops the currently ongoing fadeout
  function GlobalApi.stopFadeOutXml()
    return Global.call("stopFadeOutXml")
  end

  -- this helper function updates the global XML while preserving the visibility of windows
  ---@param newXml table Complete new XmlTable for the Global UI
  function GlobalApi.updateGlobalXml(newXml)
    Global.call("updateGlobalXml", newXml)
  end

  -- returns the colored steam name or color
  ---@param playerColor string Color of the player
  function GlobalApi.getColoredName(playerColor)
    return Global.call("getColoredName", playerColor)
  end

  -- toggles the hand visibility of a hand for a specific player
  ---@param playerColor string Color of the player that needs the visibility toggled
  ---@param handColor string Color of the hand to toggle the visibility for
  function GlobalApi.handVisibilityToggle(playerColor, handColor)
    Global.call("handVisibilityToggle", { playerColor = playerColor, handColor = handColor })
  end

  function GlobalApi.downloadCustomCycle(cycleId)
    return Global.call("downloadCustomCycle", cycleId)
  end

  -- discards tokens from an object
  ---@param object tts__Object Object that should get tokens removed
  ---@param owner string Owner of this object (for discarding)
  function GlobalApi.removeTokensFromObject(object, owner)
    Global.call("removeTokensFromObject", { object = object, owner = owner })
  end

  -- moves a card with tokens on it
  ---@param card tts__Object Card that should get moved
  ---@param position? tts__Vector Target position
  ---@param rotation? tts__Vector Target rotation
  function GlobalApi.moveCardWithTokens(card, position, rotation)
    Global.call("moveCardWithTokens", { card = card, position = position, rotation = rotation })
  end

  -- handles token detaching for cards
  ---@param card tts__Object Card that should get tokens detached
  function GlobalApi.handleTokenDetaching(card)
    Global.call("handleTokenDetaching", { card = card })
  end

  -- readies a card respective to its owner
  ---@param card tts__Object Card to ready
  ---@param ownerRotation? tts__Vector Rotation of the owner
  ---@param smooth? boolean Should the card be rotated smoothly?
  ---@param forceReady? boolean True if this card should be readied regardless of "DoNoReady" tag
  ---@return boolean success Whether the card was readied
  function GlobalApi.maybeReadyCard(card, ownerRotation, smooth, forceReady)
    return Global.call("maybeReadyCard", {
      card          = card,
      ownerRotation = ownerRotation,
      smooth        = smooth,
      forceReady    = forceReady
    })
  end

  -- handles discarding for a list of objects
  ---@param objectList table|tts__Object List of objects to discard (or a single object)
  ---@param owner string Owner of the objects (determines trash can)
  function GlobalApi.discardObjects(objectList, owner)
    return Global.call("discardObjects", { objectList = objectList, owner = owner })
  end

  -- loads saved options
  ---@param options table Set a new state for the option table
  function GlobalApi.loadOptionPanelState(options)
    Global.call("loadOptionPanelState", options)
  end

  -- gets the current state of the option panel
  ---@return table: option panel state
  function GlobalApi.getOptionPanelState()
    return Global.getTable("optionPanel")
  end

  -- updates the action tracker tokens for a specific matColor
  ---@param matColor string Color of the playermat that is getting updates
  function GlobalApi.updateActionTrackerTokens(matColor)
    Global.call("updateActionTrackerTokens", matColor)
  end

  -- updates the action tracker (specifically, the player names) for a specific matColor
  ---@param matColor string Color of the playermat that is getting updates
  function GlobalApi.updateActionTrackerName(matColor)
    Global.call("updateActionTrackerName", matColor)
  end

  return GlobalApi
end
