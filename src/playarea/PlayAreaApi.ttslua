do
  local PlayAreaApi = {}
  local GUIDReferenceApi = require("core/GUIDReferenceApi")

  local function getPlayArea()
    return GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "PlayArea")
  end

  local function getPlayAreaImageSelector()
    return GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaImageSelector")
  end

  local function getInvestigatorCounter()
    return GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "InvestigatorCounter")
  end

  -- Returns the current value of the investigator counter from the playermat
  ---@return number: Number of investigators currently set on the counter
  function PlayAreaApi.getInvestigatorCount()
    return getInvestigatorCounter().getVar("val")
  end

  -- Updates the current value of the investigator counter from the playermat
  ---@param count number Number of investigators to set on the counter
  function PlayAreaApi.setInvestigatorCount(count)
    getInvestigatorCounter().call("updateVal", count)
  end

  -- Updates the play area iamge gallery
  function PlayAreaApi.updatePlayAreaGallery()
    getPlayAreaImageSelector().call("updatePlayAreaGallery")
  end

  -- Move all contents on the play area (cards, tokens, etc) one slot in the given direction. Certain
  -- fixed objects will be ignored, as will anything the player has tagged with 'displacement_excluded'
  ---@param playerColor string Color of the player requesting the shift for messages
  function PlayAreaApi.shiftContentsUp(playerColor)
    getPlayArea().call("shiftContentsUp", playerColor)
  end

  function PlayAreaApi.shiftContentsDown(playerColor)
    getPlayArea().call("shiftContentsDown", playerColor)
  end

  function PlayAreaApi.shiftContentsLeft(playerColor)
    getPlayArea().call("shiftContentsLeft", playerColor)
  end

  function PlayAreaApi.shiftContentsRight(playerColor)
    getPlayArea().call("shiftContentsRight", playerColor)
  end

  ---@param state boolean This controls whether location connections should be drawn
  function PlayAreaApi.setConnectionDrawState(state)
    getPlayArea().call("setConnectionDrawState", state)
  end

  ---@param color string Connection color to be used for location connections
  function PlayAreaApi.setConnectionColor(color)
    getPlayArea().call("setConnectionColor", color)
  end

  -- triggers an update
  function PlayAreaApi.rebuildConnectionList()
    getPlayArea().call("rebuildConnectionList")
  end

  -- Event to be called when the current scenario has changed
  ---@param temporaryDisable boolean True if connections are disabled for this scenario
  function PlayAreaApi.onScenarioChanged(temporaryDisable)
    getPlayArea().call("onScenarioChanged", temporaryDisable)
  end

  -- Sets this playermat's snap points to limit snapping to locations or not.
  -- If matchTypes is false, snap points will be reset to snap all cards.
  ---@param matchCardTypes boolean Whether snap points should only snap for the matching card types
  function PlayAreaApi.setLimitSnapsByType(matchCardTypes)
    getPlayArea().call("setLimitSnapsByType", matchCardTypes)
  end

  -- Receiver for the Global tryObjectEnterContainer event.  Used to clear vector lines from dragged
  -- cards before they're destroyed by entering the container
  function PlayAreaApi.tryObjectEnterContainer(container, object)
    getPlayArea().call("tryObjectEnterContainer", { container = container, object = object })
  end

  -- Stop tracking a location for connection drawing / VP calculation
  ---@param card tts__Object Card to (maybe) stop tracking
  function PlayAreaApi.maybeUntrackLocation(card)
    getPlayArea().call("maybeUntrackLocation", card)
  end

  -- Counts the VP on locations in the play area
  function PlayAreaApi.countVP()
    return getPlayArea().call("countVP")
  end

  -- Highlights all locations in the play area without metadata
  ---@param state boolean True if highlighting should be enabled
  function PlayAreaApi.highlightMissingData(state)
    return getPlayArea().call("highlightMissingData", state)
  end

  -- Highlights all locations in the play area with VP
  ---@param state boolean True if highlighting should be enabled
  function PlayAreaApi.highlightCountedVP(state)
    return getPlayArea().call("countVP", state)
  end

  -- Checks if an object is in the play area (returns true or false)
  function PlayAreaApi.isInPlayArea(object)
    return getPlayArea().call("isInPlayArea", object)
  end

  -- Returns the current surface of the play area
  function PlayAreaApi.getSurface()
    return getPlayArea().getCustomObject().image
  end

  -- Updates the surface of the play area
  function PlayAreaApi.updateSurface(url)
    getPlayArea().call("updateSurface", url)
  end

  -- Readies cards in the PlayArea
  function PlayAreaApi.readyCards()
    getPlayArea().call("readyCards")
  end

  -- Returns the rotation of the PlayArea
  function PlayAreaApi.returnRotation()
    return getPlayArea().getRotation()
  end

  -- Converts world position to grid coordinates (e.g., {x=-30.5, z=8})
  function PlayAreaApi.worldToGrid(pos)
    local grid = getPlayArea().call("worldToGrid", pos)
    return { x = grid.x, y = grid.y }
  end

  -- Converts grid coordinates (e.g., {x=1.5, y=-2}) back to world position
  function PlayAreaApi.gridToWorld(grid)
    return Vector(getPlayArea().call("gridToWorld", grid))
  end

  -- Returns a deep copy of the currently tracked locations
  function PlayAreaApi.getTrackedLocations()
    local t = {}
    for k, v in pairs(getPlayArea().call("getTrackedLocations", {})) do
      t[k] = v
    end
    return t
  end

  return PlayAreaApi
end
