local GlobalApi            = require("Global/GlobalApi")
local GUIDReferenceApi     = require("core/GUIDReferenceApi")
local MathLib              = require("util/MathLib")
local SearchLib            = require("util/SearchLib")
local TokenManagerApi      = require("tokens/TokenManagerApi")

-- Location connection directional options
local BIDIRECTIONAL        = 0
local ONE_WAY              = 1
local INCOMING_ONE_WAY     = 2

-- Connector draw parameters
local CONNECTION_THICKNESS = 0.015
local DRAGGING_THICKNESS   = 0.15
local DRAGGING_COLOR       = { 0.8, 0.8, 0.8, 1 }
local ARROW_DISTANCE       = 3.5
local ARROW_ARM_LENGTH     = 0.9
local ARROW_ANGLE          = 25

-- Height to draw the connector lines, places them just above the table and always below cards
local CONNECTION_LINE_Y    = 1.529

-- Data for grid coordinates / snap points
local UPPER_LEFT_SNAP      = { x = 1.53, z = -1.09 }
local LOWER_RIGHT_SNAP     = { x = -1.53, z = 1.55 }

local STEP_X               = (LOWER_RIGHT_SNAP.x - UPPER_LEFT_SNAP.x) / 8 -- = -0.765
local STEP_Z               = (LOWER_RIGHT_SNAP.z - UPPER_LEFT_SNAP.z) / 8 -- = 0.82

local CENTER_X             = (UPPER_LEFT_SNAP.x + LOWER_RIGHT_SNAP.x) / 2 -- = 0
local CENTER_Z             = (UPPER_LEFT_SNAP.z + LOWER_RIGHT_SNAP.z) / 2 -- = 0.23

local DEFAULT_URL          = "https://steamusercontent-a.akamaihd.net/ugc/998015670465071049/FFAE162920D67CF38045EFBD3B85AD0F916147B2/"

local SHIFT_OFFSETS        = {
  left  = { x = 0.00, y = 0, z = 7.67 },
  right = { x = 0.00, y = 0, z = -7.67 },
  up    = { x = 6.54, y = 0, z = 0.00 },
  down  = { x = -6.54, y = 0, z = 0.00 }
}

local locations            = {}
local locationConnections  = {}
local draggingGuids        = {}
local missingData          = {}
local collisionEnabled     = false
local connectionsEnabled, excludedScenario

---------------------------------------------------------
-- general code
---------------------------------------------------------

function updateSave()
  self.script_state = JSON.encode({
    trackedLocations   = locations,
    connectionColor    = connectionColor,
    connectionsEnabled = connectionsEnabled,
    excludedScenario   = excludedScenario
  })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData   = JSON.decode(savedData) or {}
    locations          = loadedData.trackedLocations or {}
    connectionColor    = loadedData.connectionColor or { 0.4, 0.4, 0.4, 1 }
    connectionsEnabled = loadedData.connectionsEnabled
    excludedScenario   = loadedData.excludedScenario
  end

  Wait.time(function() collisionEnabled = true end, 0.1)
end

---------------------------------------------------------
-- TTS event handling
---------------------------------------------------------

function onCollisionEnter(collisionInfo)
  if not collisionEnabled then return end

  local object = collisionInfo.collision_object

  if object.type == "Deck" then
    table.insert(missingData, object)
  end

  -- only continue for cards
  if object.type ~= "Card" then return end

  -- check if we should spawn clues here and do so according to playercount
  if shouldSpawnTokens(object) then
    TokenManagerApi.spawnForCard(object)
  end

  -- If this card was being dragged, clear the dragging connections. A multi-drag/drop may send
  -- the dropped card immediately into a deck, so this has to be done here
  if draggingGuids[object.getGUID()] ~= nil then
    object.setVectorLines({})
    draggingGuids[object.getGUID()] = nil
  end

  maybeTrackLocation(object)
end

function onCollisionExit(collisionInfo)
  if not collisionEnabled then return end

  local object = collisionInfo.collision_object

  -- only continue for cards
  if object.type ~= "Card" then return end

  maybeUntrackLocation(object)
end

-- Destroyed objects don't trigger onCollisionExit(), so check on destruction to untrack as well
function onObjectDestroy(object)
  if object.type ~= "Card" then return end
  maybeUntrackLocation(object)
end

function onObjectPickUp(_, object)
  if object.type ~= "Card" then return end

  -- onCollisionExit USUALLY fires first, so we have to check the card to see if it's a location we should be tracking
  if showLocationLinks() and isInPlayArea(object) then
    local metadata = JSON.decode(object.getGMNotes()) or {}
    if metadata.type == "Location" then
      -- onCollisionExit sometimes comes 1 frame after onObjectPickUp (rather than before it or in
      -- the same frame). This causes a mismatch in the data between dragging the on-table, and
      -- that one frame draws connectors on the card which then show up as shadows for snap points.
      -- Waiting ensures we always do thing in the expected Exit->PickUp order
      local pickedUpGuid = object.getGUID()
      Wait.frames(function()
        if object.is_face_down then
          draggingGuids[pickedUpGuid] = metadata.locationBack
        else
          draggingGuids[pickedUpGuid] = metadata.locationFront
        end
        rebuildConnectionList()
      end, 2)
    end
  end
end

-- Due to the frequence of onUpdate calls, ensure that we only process any changes once
function onUpdate()
  local needsConnectionRebuild = false
  local needsConnectionDraw = false
  for guid, _ in pairs(draggingGuids) do
    local obj = getObjectFromGUID(guid)
    if obj == nil or not isInPlayArea(obj) then
      draggingGuids[guid] = nil
      needsConnectionRebuild = true
      -- If object still exists then it's outside the area and needs to lose the lines attached to it
      if obj ~= nil then
        obj.setVectorLines({})
      end
    end
    -- Even if the last location left the play area, need one last draw to clear the lines
    needsConnectionDraw = true
  end

  if needsConnectionRebuild then
    rebuildConnectionList()
  end

  if needsConnectionDraw then
    drawDraggingConnections()
  end
end

-- Global event handler, delegated from Global. Clears any connection lines from dragged cards
-- before they are destroyed by entering a deck. Removal of the card from the dragging list will
-- be handled during the next onUpdate() call.
function tryObjectEnterContainer()
  for draggedGuid, _ in pairs(draggingGuids) do
    local draggedObj = getObjectFromGUID(draggedGuid)
    if draggedObj ~= nil then
      draggedObj.setVectorLines({})
    end
  end
end

---------------------------------------------------------
-- main functionality
---------------------------------------------------------

function shouldSpawnTokens(card)
  local metadata = JSON.decode(card.getGMNotes())
  if metadata == nil then return false end

  return metadata.type == "Location"
      or metadata.type == "Enemy"
      or metadata.type == "Treachery"
      or metadata.weakness
      -- these cards are events with uses, that attach to encounter cards and thus will enter play in the playarea
      or metadata.id == "07310" -- "Shrine of the Moirai"
      or metadata.id == "09100" -- "Makeshift Trap"
end

-- Checks the given card and adds it to the list of locations tracked for connection purposes.
-- A card will be added to the tracking if it is a location in the play area (based on centerpoint).
---@param card tts__Object A card object, possibly a location.
function maybeTrackLocation(card)
  -- Collision checks for any part of the card overlap, but our other tracking is centerpoint
  -- Ignore any collision where the centerpoint isn't in the area
  if isInPlayArea(card) then
    local metadata = JSON.decode(card.getGMNotes())
    if metadata == nil then
      table.insert(missingData, card)
    else
      if metadata.type == "Location" then
        if card.is_face_down then
          locations[card.getGUID()] = metadata.locationBack
        else
          locations[card.getGUID()] = metadata.locationFront
        end
        updateSave()

        -- only draw connection lines for not-excluded scenarios
        if showLocationLinks() then
          rebuildConnectionList()
          drawBaseConnections()
        end
      end
    end
  end
end

-- Stop tracking a location for connection drawing. This should be called for both collision exit
-- and destruction, as a destroyed object does not trigger collision exit. An object can also be
-- deleted mid-drag, but the ordering for drag events means we can't clear those here and those will
-- be cleared in the next onUpdate() cycle.
---@param card tts__Object Card to (maybe) stop tracking
function maybeUntrackLocation(card)
  -- Locked objects no longer collide (hence triggering an exit event) but are still in the play
  -- area. If the object is now locked, don't remove it.
  if locations[card.getGUID()] ~= nil and not card.locked then
    locations[card.getGUID()] = nil
    updateSave()
    rebuildConnectionList()
    drawBaseConnections()
  end
end

-- Builds a list of GUID to GUID connection information based on the currently tracked locations.
-- This will update the connection information and store it in the locationConnections data member,
-- but does not draw those connections. This should often be followed by a call to drawBaseConnections()
function rebuildConnectionList()
  if not showLocationLinks() then
    locationConnections = {}
    return
  end

  local iconCardList = {}

  -- Build a list of cards with each icon as their location ID
  for cardId, metadata in pairs(draggingGuids) do
    buildLocListByIcon(cardId, iconCardList, metadata)
  end
  for cardId, metadata in pairs(locations) do
    buildLocListByIcon(cardId, iconCardList, metadata)
  end

  -- Pair up all the icons
  locationConnections = {}
  for cardId, metadata in pairs(draggingGuids) do
    buildConnection(cardId, iconCardList, metadata)
  end
  for cardId, metadata in pairs(locations) do
    if draggingGuids[cardId] == nil then
      buildConnection(cardId, iconCardList, metadata)
    end
  end
end

-- Extracts the card's icon string into a list of individual location icons
---@param cardId string GUID of the card to pull the icon data from
---@param iconCardList table A table of icon->GUID list. Mutable, will be updated by this method
---@param locData table A table containing the metadata for the card (for the correct side)
function buildLocListByIcon(cardId, iconCardList, locData)
  if locData ~= nil and locData.icons ~= nil then
    for icon in string.gmatch(locData.icons, "%a+") do
      if iconCardList[icon] == nil then
        iconCardList[icon] = {}
      end
      table.insert(iconCardList[icon], cardId)
    end
  end
end

-- Builds the connections for the given cardID by finding matching icons and adding them to the
-- Playarea's locationConnections table.
---@param cardId string GUID of the card to build the connections for
---@param iconCardList table A table of icon->GUID List. Used to find matching icons for connections.
---@param locData table A table containing the metadata for the card (for the correct side)
function buildConnection(cardId, iconCardList, locData)
  if locData ~= nil and locData.connections ~= nil then
    locationConnections[cardId] = {}
    for icon in string.gmatch(locData.connections, "%a+") do
      if iconCardList[icon] ~= nil then
        for _, connectedGuid in ipairs(iconCardList[icon]) do
          -- If the reciprocal exists, convert it to BiDi, otherwise add as a one-way
          if locationConnections[connectedGuid] ~= nil
              and (locationConnections[connectedGuid][cardId] == ONE_WAY
                or locationConnections[connectedGuid][cardId] == BIDIRECTIONAL) then
            locationConnections[connectedGuid][cardId] = BIDIRECTIONAL
            locationConnections[cardId][connectedGuid] = nil
          else
            if locationConnections[connectedGuid] == nil then
              locationConnections[connectedGuid] = {}
            end
            locationConnections[cardId][connectedGuid] = ONE_WAY
            locationConnections[connectedGuid][cardId] = INCOMING_ONE_WAY
          end
        end
      end
    end
  end
end

-- Draws the lines for connections currently in locationConnections but not in draggingGuids.
function drawBaseConnections()
  if not showLocationLinks() then
    locationConnections = {}
    return
  end
  local cardConnectionLines = {}

  for originGuid, targetGuids in pairs(locationConnections) do
    -- Objects should reliably exist at this point, but since this can be called during onUpdate the
    -- object checks are conservative just to make sure.
    local origin = getObjectFromGUID(originGuid)
    if draggingGuids[originGuid] == nil and origin ~= nil then
      for targetGuid, direction in pairs(targetGuids) do
        local target = getObjectFromGUID(targetGuid)
        if draggingGuids[targetGuid] == nil and target ~= nil then
          -- Since we process the full list, we're guaranteed to hit any ONE_WAY connections later
          -- so we can ignore INCOMING_ONE_WAY
          if direction == BIDIRECTIONAL then
            addBidirectionalVector(origin, target, self, cardConnectionLines)
          elseif direction == ONE_WAY then
            addOneWayVector(origin, target, self, cardConnectionLines)
          end
        end
      end
    end
  end
  self.setVectorLines(cardConnectionLines)
end

-- Draws the lines for cards which are currently being dragged.
function drawDraggingConnections()
  if not showLocationLinks() then return end
  local ownedVectors = {}

  for originGuid, _ in pairs(draggingGuids) do
    targetGuids = locationConnections[originGuid]
    -- Objects should reliably exist at this point, but since this can be called during onUpdate the
    -- object checks are conservative just to make sure.
    local origin = getObjectFromGUID(originGuid)
    if draggingGuids[originGuid] and origin ~= nil and targetGuids ~= nil then
      ownedVectors[originGuid] = {}
      for targetGuid, direction in pairs(targetGuids) do
        local target = getObjectFromGUID(targetGuid)
        if target ~= nil then
          if direction == BIDIRECTIONAL then
            addBidirectionalVector(origin, target, origin, ownedVectors[originGuid])
          elseif direction == ONE_WAY then
            addOneWayVector(origin, target, origin, ownedVectors[originGuid])
          elseif direction == INCOMING_ONE_WAY and not draggingGuids[targetGuid] then
            addOneWayVector(target, origin, origin, ownedVectors[originGuid])
          end
        end
      end
    end
  end
  for ownerGuid, vectors in pairs(ownedVectors) do
    local card = getObjectFromGUID(ownerGuid)
    card.setVectorLines(vectors)
  end
end

-- Draws a bidirectional location connection between the two cards, adding the necessary lines to the list
---@param card1 tts__Object One of the card objects to connect
---@param card2 tts__Object The other card object to connect
---@param vectorOwner tts__Object The object which these lines will be set to. Used for relative
---    positioning and scaling, as well as highlighting connections during a drag operation
---@param lines table List of vector line elements. Mutable, will be updated to add this connector
function addBidirectionalVector(card1, card2, vectorOwner, lines)
  local cardPos1 = card1.getPosition()
  local cardPos2 = card2.getPosition()
  cardPos1.y = CONNECTION_LINE_Y
  cardPos2.y = CONNECTION_LINE_Y

  local pos1 = vectorOwner.positionToLocal(cardPos1)
  local pos2 = vectorOwner.positionToLocal(cardPos2)

  table.insert(lines, {
    points = { pos1, pos2 },
    color = vectorOwner == self and connectionColor or DRAGGING_COLOR,
    thickness = vectorOwner == self and CONNECTION_THICKNESS or DRAGGING_THICKNESS,
  })
end

-- Draws a one-way location connection between the two cards, adding the lines to do so to the
-- given lines list. Arrows will point towards the target card.
---@param origin tts__Object Origin card in the connection
---@param target tts__Object Target card object to connect
---@param vectorOwner tts__Object The object which these lines will be set to. Used for relative
---    positioning and scaling, as well as highlighting connections during a drag operation
---@param lines table List of vector line elements. Mutable, will be updated to add this connector
function addOneWayVector(origin, target, vectorOwner, lines)
  -- Start with the BiDi then add the arrow lines to it
  addBidirectionalVector(origin, target, vectorOwner, lines)
  local originPos = origin.getPosition()
  local targetPos = target.getPosition()
  originPos.y = CONNECTION_LINE_Y
  targetPos.y = CONNECTION_LINE_Y

  -- Calculate distance to be closer for horizontal positions than vertical, since cards are taller than wide
  local heading = Vector(originPos):sub(targetPos):heading("y")
  local distanceFromCard = ARROW_DISTANCE * 0.7 + ARROW_DISTANCE * 0.3 * math.abs(math.sin(math.rad(heading)))

  -- Calculate the three possible arrow positions. These are offset by half the arrow length to
  -- make them visually balanced by keeping the arrows centered, not tracking the point
  local midpoint = Vector(originPos):add(targetPos):scale(0.5):moveTowards(targetPos, ARROW_ARM_LENGTH / 2)
  local closeToOrigin = Vector(originPos):moveTowards(targetPos, distanceFromCard + ARROW_ARM_LENGTH / 2)
  local closeToTarget = Vector(targetPos):moveTowards(originPos, distanceFromCard - ARROW_ARM_LENGTH / 2)

  if (originPos:distance(closeToOrigin) > originPos:distance(closeToTarget)) then
    addArrowLines(midpoint, originPos, vectorOwner, lines)
  else
    addArrowLines(closeToOrigin, originPos, vectorOwner, lines)
    addArrowLines(closeToTarget, originPos, vectorOwner, lines)
  end
end

-- Draws an arrowhead at the given position.
---@param arrowheadPos tts__Vector Centerpoint of the arrowhead to draw (NOT the tip of the arrow)
---@param originPos tts__Vector Origin point of the connection, used to position the arrow arms
---@param vectorOwner tts__Object The object which these lines will be set to. Used for relative
---    positioning and scaling, as well as highlighting connections during a drag operation
---@param lines table List of vector line elements. Mutable, will be updated to add this arrow
function addArrowLines(arrowheadPos, originPos, vectorOwner, lines)
  local arrowArm1 = Vector(arrowheadPos):moveTowards(originPos, ARROW_ARM_LENGTH):sub(arrowheadPos):rotateOver("y", -1 * ARROW_ANGLE):add(arrowheadPos)
  local arrowArm2 = Vector(arrowheadPos):moveTowards(originPos, ARROW_ARM_LENGTH):sub(arrowheadPos):rotateOver("y", ARROW_ANGLE):add(arrowheadPos)

  local head = vectorOwner.positionToLocal(arrowheadPos)
  local arm1 = vectorOwner.positionToLocal(arrowArm1)
  local arm2 = vectorOwner.positionToLocal(arrowArm2)
  table.insert(lines, {
    points = { arm1, head, arm2 },
    color = vectorOwner == self and connectionColor or DRAGGING_COLOR,
    thickness = vectorOwner == self and CONNECTION_THICKNESS or DRAGGING_THICKNESS,
  })
end

-- Count victory points from locations in play area
---@param highlightOff boolean True if highlighting should be enabled
---@return number totalVP Total amount of VP found in the play area
function countVP(highlightOff)
  local totalVP = 0

  for cardId, metadata in pairs(locations) do
    local card = getObjectFromGUID(cardId)
    if metadata ~= nil and card ~= nil then
      if highlightOff == true then
        card.highlightOff("Green")
      end

      local cardVP = tonumber(metadata.victory) or 0
      if cardVP ~= 0 and not cardHasClues(card) then
        totalVP = totalVP + cardVP
        if highlightOff == false then
          card.highlightOn("Green")
        end
      end
    end
  end

  return totalVP
end

-- Checks if a card has clues on it
---@param card tts__Object Card to check for clues
---@return boolean hasClues True if card has clues on it
function cardHasClues(card)
  local searchResult = SearchLib.onObject(card, "isClue")
  return #searchResult > 0
end

-- Highlights all locations in the play area without metadata
---@param state boolean True if highlighting should be enabled
function highlightMissingData(state)
  for i, obj in pairs(missingData) do
    if obj ~= nil then
      if state then
        obj.highlightOff("Red")
      else
        obj.highlightOn("Red")
      end
    else
      missingData[i] = nil
    end
  end
end

-- Readies all cards in the main playarea (both player cards, treacheries and enemies)
function readyCards(player, clickType)
  local playerColor
  if player ~= nil then
    playerColor = player.color
  else
    local existingPlayer = Player.getPlayers()[1]
    playerColor = existingPlayer.color
  end

  -- when right-clicked
  if clickType == "-2" then
    printToColor("This will ready (rotate 90° closer to 0°) all cards in the main play area." ..
      " Make sure to handle enemy engagement manually. To exclude a card from this (e.g. Handcuffs)," ..
      " right-click it, select 'Tags' and add the tag 'DoNotReady' to it.", playerColor)
    return
  end

  local zone = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")
  if not zone then
    broadcastToColor("Scripting zone couldn't be found.", playerColor, "Red")
    return
  end

  local count = 0
  local rot = self.getRotation()
  for _, obj in ipairs(zone.getObjects()) do
    if obj.type == "Card" and obj.locked == false then
      local cardWasReadied = GlobalApi.maybeReadyCard(obj, rot, true)

      -- highlighting for readied cards
      if cardWasReadied then
        obj.highlightOn({ r = 0.8, g = 1, b = 0.05 }, 2)
        count = count + 1
      end
    end
  end

  local cardString = " cards"
  if count == 1 then
    cardString = " card"
  end

  broadcastToAll("Play Area: Readied " .. count .. cardString)
end

---------------------------------------------------------
-- functions for outside calls
---------------------------------------------------------

-- Move all contents on the play area (cards, tokens, etc) one slot in the given direction. Certain
-- fixed objects will be ignored, as will anything the player has tagged with 'displacement_excluded'
---@param playerColor string Color of the player requesting the shift (used for error messages)
function shiftContentsUp(playerColor)
  shiftContents(playerColor, "up")
end

function shiftContentsDown(playerColor)
  shiftContents(playerColor, "down")
end

function shiftContentsLeft(playerColor)
  shiftContents(playerColor, "left")
end

function shiftContentsRight(playerColor)
  shiftContents(playerColor, "right")
end

function shiftContents(playerColor, direction)
  local zone = GUIDReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")
  if not zone then
    broadcastToColor("Scripting zone couldn't be found.", playerColor, "Red")
    return
  end

  -- ignore explore / tekeli-li deck
  local tempIgnore     = {}
  local exploreHelper  = getObjectByName("Explore Helper")
  local tekeliliHelper = getObjectByName("Tekeli-li Helper")

  if tekeliliHelper then
    for _, obj in ipairs(SearchLib.onObject(tekeliliHelper, "isCardOrDeck")) do
      tempIgnore[obj.getGUID()] = true
    end
  end
  if exploreHelper then
    for _, obj in ipairs(SearchLib.onObject(exploreHelper, "isCardOrDeck")) do
      tempIgnore[obj.getGUID()] = true
    end
  end

  -- perform the actual shifting
  local offset = SHIFT_OFFSETS[direction]
  for _, object in ipairs(zone.getObjects()) do
    local guid = object.getGUID()
    if not (object.hasTag("displacement_excluded") or tempIgnore[guid]) then
      object.translate(offset)
    end
  end

  Wait.time(drawBaseConnections, 0.1)
end

-- Sets the image of the playarea
---@param newURL string URL for the new surface image
function updateSurface(newURL)
  local customInfo = self.getCustomObject()

  if newURL ~= "" and newURL ~= nil and newURL ~= DEFAULT_URL then
    customInfo.image = newURL
    broadcastToAll("New Playarea Image Applied", "Green")
  else
    customInfo.image = DEFAULT_URL
    broadcastToAll("Default Playarea Image Applied", "Green")
  end

  self.setCustomObject(customInfo)
  updateSave()
  self.reload()
end

-- Toggles the tags for the playarea's snap points to limit snapping to locations or not
-- If matchTypes is false, snap points will be reset to snap all cards
---@param matchTypes boolean Whether snap points should only snap for the matching card types
function setLimitSnapsByType(matchTypes)
  local snaps = self.getSnapPoints()
  for _, snap in ipairs(snaps) do
    if matchTypes then
      if snap.tags == nil then
        snap.tags = { "Location" }
      else
        table.insert(snap.tags, "Location")
      end
    else
      snap.tags = nil
    end
  end
  self.setSnapPoints(snaps)
end

-- called by the option panel to enabled / disable location connections
function setConnectionDrawState(state)
  connectionsEnabled = state
  rebuildConnectionList()
  drawBaseConnections()
  updateSave()
end

-- called by the option panel to edit the location connection color
function setConnectionColor(color)
  connectionColor = color
  rebuildConnectionList()
  drawBaseConnections()
  updateSave()
end

---@param temporaryDisable boolean True if connections are disabled for this scenario
function onScenarioChanged(temporaryDisable)
  excludedScenario = temporaryDisable
  if connectionsEnabled and excludedScenario then
    broadcastToAll("Automatic location connections not available for this scenario")
  end
  updateSave()
end

function getTrackedLocations()
  return locations
end

---------------------------------------------------------
-- utility functions
---------------------------------------------------------

-- Check to see if the given object is within the bounds of the play area (using X and Z coordinates)
---@param object tts__Object Object to check
---@return boolean: True if the object is inside the play area
function isInPlayArea(object)
  local bounds = self.getBounds()
  local position = object.getPosition()
  -- Corners are arbitrary since it's all global - c1 goes down both axes, c2 goes up
  local c1 = { x = bounds.center.x - bounds.size.x / 2, z = bounds.center.z - bounds.size.z / 2 }
  local c2 = { x = bounds.center.x + bounds.size.x / 2, z = bounds.center.z + bounds.size.z / 2 }

  return position.x > c1.x and position.x < c2.x and position.z > c1.z and position.z < c2.z
end

function showLocationLinks()
  return not excludedScenario and connectionsEnabled
end

-- Rebuilds local snap points (could be useful in the future again)
function buildSnaps()
  local snaps = {}

  -- creates 81 snap points, for uneven rows + columns it makes a rotation snap point
  for i = 1, 9 do
    for j = 1, 9 do
      local snap = {}
      snap.position = {}
      snap.position.x = MathLib.round(UPPER_LEFT_SNAP.x - (UPPER_LEFT_SNAP.x - LOWER_RIGHT_SNAP.x) * (i - 1) / 8, 3)
      snap.position.y = 0.1
      snap.position.z = MathLib.round(UPPER_LEFT_SNAP.z - (UPPER_LEFT_SNAP.z - LOWER_RIGHT_SNAP.z) * (j - 1) / 8, 3)

      -- enable rotation snaps for uneven rows / columns
      if (i % 2 ~= 0) and (j % 2 ~= 0) then
        snap.rotation = { 0, 0, 0 }
        snap.rotation_snap = true
      end

      table.insert(snaps, snap)
    end
  end
  self.setSnapPoints(snaps)
end

-- Converts world position to grid coordinates (e.g., {x=-30.5, z=8})
function worldToGrid(pos)
  pos = self.positionToLocal(pos)
  local dx = (pos.x - CENTER_X) / STEP_X / 2
  local dz = (CENTER_Z - pos.z) / STEP_Z / 2
  return { x = MathLib.roundToMultiple(dx, 0.25), y = MathLib.roundToMultiple(dz, 0.25) }
end

-- Converts grid coordinates (e.g., {x=1.5, y=-2}) back to world position
function gridToWorld(grid)
  local localX = CENTER_X + (grid.x or grid[1])* STEP_X * 2
  local localZ = CENTER_Z - (grid.y or grid[2])* STEP_Z * 2
  local pos = self.positionToWorld({ x = localX, y = 0.1, z = localZ })
  return MathLib.roundVector(pos, 3)
end

function getObjectByName(name)
  for _, obj in ipairs(getObjects()) do
    if obj.getName() == name then
      return obj
    end
  end
  return nil
end
