do
  local SearchLib = {}
  local FILTER_FUNCTIONS = {
    isCard           = function(x) return x.type == "Card" end,
    isDeck           = function(x) return x.type == "Deck" end,
    isCardOrDeck     = function(x) return x.type == "Card" or x.type == "Deck" end,
    isClue           = function(x) return x.memo == "clueDoom" and x.is_face_down == false end,
    isDoom           = function(x) return x.memo == "clueDoom" and x.is_face_down == true end,
    isInteractable   = function(x) return x.interactable end,
    isTileOrToken    = function(x) return not x.Book and (x.type == "Tile" or x.type == "Generic") end,
    isUniversalToken = function(x) return x.getMemo() == "universalActionAbility" end,
  }

  -- performs the actual search and returns a filtered list of object references
  ---@param pos tts__Vector Global position
  ---@param rot? tts__Vector Global rotation
  ---@param size table Size
  ---@param filter? string Name of the filter function
  ---@param direction? table Direction (positive is up)
  ---@param maxDistance? number Distance for the cast
  ---@param debug? boolean Whether the debug boxes should be shown
  local function returnSearchResult(pos, rot, size, filter, direction, maxDistance, debug)
    local filterFunc = filter and FILTER_FUNCTIONS[filter]
    local searchResult = Physics.cast({
      origin       = pos,
      direction    = direction or { 0, 1, 0 },
      orientation  = rot or { 0, 0, 0 },
      type         = 3,
      size         = size,
      max_distance = maxDistance or 0,
      debug        = debug or false
    })

    -- filter the result for matching objects
    local objList = {}
    for _, v in ipairs(searchResult) do
      if (not filter or filterFunc(v.hit_object)) then
        table.insert(objList, v.hit_object)
      end
    end
    return objList
  end

  -- searches the specified area
  function SearchLib.inArea(pos, rot, size, filter, debug)
    return returnSearchResult(pos, rot, size, filter, nil, nil, debug)
  end

  -- searches the area on an object
  function SearchLib.onObject(obj, filter, scale, debug)
    scale      = scale or 1
    local pos  = obj.getPosition() + Vector(0, 1, 0) -- offset by half the cast's height
    local size = obj.getBounds().size:scale(scale):setAt("y", 2)
    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)
  end

  -- searches the area directly below an object
  function SearchLib.belowObject(obj, filter, scale, debug)
    scale        = scale or 1
    local objPos = obj.getPosition()
    local pos    = objPos + Vector(0, -objPos.y / 2, 0) -- offset by half the cast's height
    local size   = obj.getBounds().size:scale(scale):setAt("y", objPos.y)
    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)
  end

  -- searches the specified position (a single point)
  function SearchLib.atPosition(pos, filter, debug)
    local size = { 0.1, 2, 0.1 }
    return returnSearchResult(pos, nil, size, filter, nil, nil, debug)
  end

  -- searches below the specified position (downwards until y = 0)
  function SearchLib.belowPosition(pos, filter, debug)
    local size = { 0.1, 2, 0.1 }
    local direction = { 0, -1, 0 }
    local maxDistance = pos.y
    return returnSearchResult(pos, nil, size, filter, direction, maxDistance, debug)
  end

  return SearchLib
end
