do
  local TableLib = {}

  -- Checks if a list contains an element
  ---@param t table
  ---@param ele any
  function TableLib.contains(t, ele)
    if t == nil then return false end
    for k, v in ipairs(t) do
      if v == ele then return true end
    end
    return false
  end

  -- Copies a table (or returns the original if not a table)
  ---@param t table
  function TableLib.copy(t)
    if type(t) ~= "table" then return t end
    local copy = {}
    for tKey, tValue in next, t, nil do
      copy[TableLib.copy(tKey)] = TableLib.copy(tValue)
    end
    setmetatable(copy, TableLib.copy(getmetatable(t)))
    return copy
  end

  -- Returns the index of an element
  ---@param t table
  ---@param ele any
  function TableLib.getElementIndex(t, ele)
    if t == nil then return nil end
    for k, v in ipairs(t) do
      if v == ele then return k end
    end
    return nil
  end

  -- Returns the keys of a table as new table
  ---@param t table
  ---@param filterValue? any Only keys with this value will be extracted
  function TableLib.getKeys(t, filterValue)
    local keys = {}
    for k, v in pairs(t) do
      if filterValue ~= nil then
        if v == filterValue then
          table.insert(keys, k)
        end
      else
        table.insert(keys, k)
      end
    end
    return keys
  end

  -- Checks if a table is empty
  ---@param t table
  function TableLib.isEmpty(t)
    return next(t) == nil
  end

  -- Returns a random list element
  ---@param t table
  function TableLib.pickRandom(t)
    return t[math.random(#t)]
  end

  -- Returns a reversed list
  ---@param t table
  function TableLib.reverse(t)
    local r = {}
    for i = #t, 1, -1 do
      table.insert(r, t[i])
    end
    return r
  end

  -- Shuffles a list in place (Fisher-Yates-Shuffle)
  ---@param t table
  function TableLib.shuffle(t)
    local n = #t
    while n > 1 do
      local k = math.random(n)
      t[n], t[k] = t[k], t[n]
      n = n - 1
    end
    return t
  end

  -- Returns a copy of a list without duplicates
  ---@param t table
  function TableLib.removeDuplicates(t)
    local seen = {}
    local result = {}
    for _, value in ipairs(t) do
      if not seen[value] then
        seen[value] = true
        table.insert(result, value)
      end
    end
    return result
  end

  return TableLib
end
